{"version":3,"sources":["components/app/app.module.css","components/modal/modal-overlay/modal-overlay.module.css","components/loader/loader.module.css","components/order-details/order-details.module.css","components/profile-menu/profile-menu.module.css","components/scrollable-list/scrollable-list.module.css","components/ingridient-details/ingridient-details.module.css","components/app-header/app-header.module.css","pages/feed.module.css","components/feed-detailed-card/feed-detailed-card.module.css","services/hooks.ts","utils/cookie.ts","utils/api-url.ts","services/actions/userActions.ts","utils/api-fetch.ts","services/actions/burgerVendor.ts","components/protected-route/protected-route.tsx","components/modal/modal-overlay/modal-overlay.tsx","components/modal/modal.tsx","components/ingridient-details/ingridient-details.tsx","components/app-header/app-header.tsx","components/ingridient-card/ingrdient-card.tsx","components/ingridients-cardlist/ingridients-cardlist.tsx","components/burger-ingredients/burger-ingredients.tsx","components/draggable-item/draggable-item.tsx","components/loader/loader.tsx","utils/utils.ts","components/burger-constructor/burger-constructor.tsx","components/order-details/order-details.tsx","components/burger-vendor/burger-vendor.tsx","components/feed-detailed-card/feed-detailed-card.tsx","pages/login.tsx","pages/registration.tsx","pages/forgot-password.tsx","pages/reset-password.tsx","components/profile-tab/profile-tab.tsx","components/profile-menu/profile-menu.tsx","pages/profile.tsx","services/actions/wsActions.ts","components/feed-card/feed-card.tsx","components/scrollable-list/scrollable-list.tsx","pages/orders.tsx","pages/ingridient-page.tsx","pages/feed.tsx","pages/order-page.tsx","components/app/app.tsx","services/middleware/socketMiddleware.ts","services/reducers/burgerVendor.ts","services/reducers/user.ts","services/reducers/wsReducer.ts","services/reducers/index.ts","services/store.ts","index.tsx","pages/auth-form.module.css","components/burger-ingredients/burger-ingredients.module.css","components/feed-card/feed-card.module.css","components/burger-constructor/burger-constructor.module.css","pages/profile.module.css","components/ingridient-card/ingridient-card.module.css","components/modal/modal.module.css","components/burger-vendor/burger-vendor.module.css","components/draggable-item/draggable-item.module.css","components/profile-tab/profile-tab.module.css"],"names":["module","exports","useAppSelector","selectorHook","useAppDispatch","dispatchHook","setCookie","name","value","props","exp","expires","d","Date","setTime","getTime","toUTCString","encodeURIComponent","updatedCookie","propName","propValue","document","cookie","getCookie","matches","match","RegExp","replace","decodeURIComponent","undefined","getAccessTokenLiteral","str","split","deleteCookie","baseUrl","urlUserDataEndpoint","wsOrders","wsAllOrders","LOGIN_SUCCESSFUL","SET_USER_DATA","LOGIN_FAILED","LOGOUT_SUCCESSFUL","ALLOW_RESET_PASSWORD","HAS_RESET_PASSWORD","registerNewUserThunk","data","dispatch","fetch","method","headers","body","JSON","stringify","then","res","a","ok","json","response","Promise","reject","fetchUserRegistration","user","accessToken","refreshToken","type","email","isLoggedIn","localStorage","setItem","catch","err","logInAppThunk","fetchLogIn","success","logOutThunk","token","getItem","removeItem","requestResetCodeThunk","userEmail","setNewPasswordThunk","newPassword","resetCode","fetchResetPassword","patchUserDataThunk","form","setFormValues","password","fetchChangeUserData","refreshAccessTokenThunk","safetyCounter","getUserThunk","authorization","message","confirmAuthThunk","hasAccessCookie","hasRefreshToken","TOGGLE_MODAL_VISIBILITY","SET_CURRENT_MODAL_TYPE","SET_INGRIDIENT_IN_MODAL","SET_ORDER_STATE","INGRIDIENT_FETCH_SUCCESS","INGRIDIENT_FETCH_ERROR","OPEN_MODAL","CLOSE_MODAL","SET_MODAL_TYPE","ADD_BUN","ADD_SAUCE","ADD_MAIN","UPDATE_DRAGGABLE_INGRIDIENTS","REMOVE_ALL_INGRIDIENTS","RESORT_DRAGGABLE_INGRIDIENTS","SET_CONSTRUCTOR_LOADER","postBurgerOrderThunk","url","createPostBody","status","ProtectedRoute","children","rest","store","userChecked","render","location","to","pathname","state","from","ModalOverlay","handleClick","className","stylesMO","modalOverlay","onClick","Modal","history","useHistory","useLocation","currentModalType","burgerVendor","modalRoot","getElementById","handleClose","push","background","goBack","useEffect","escHandler","event","key","addEventListener","removeEventListener","ReactDOM","createPortal","modalStyles","modal","stopPropagation","closeButton","IngredientDetais","ingredientData","stylesID","wrap","modalHeader","style","src","alt","ingrImage","ingrInfo","nutrient","nutrientHeader","nutrientValue","test-id","AppHeader","headerStyles","header","headerContainer","navBurgerBuilder","headerButton","navlink","navButton","buttonCaption","userPanel","authButton","IngridientCard","objIngridient","useDrag","item","collect","monitor","outline","isDragging","dragRef","dragPreviewImg","React","useState","ingrCounter","setIngrCounter","bunInConstructor","bun","draggableIngrInConstructor","draggableIngridients","counterValue","_id","forEach","getNumOfIngridients","DragPreviewImage","connect","image","cardStyles","ingrCard","ingredientModal","ref","itemPic","price","count","size","CardList","arrTargetedIngridients","ingridientsData","arrOfIngridients","filter","obj","map","index","BurgerIngredients","currentTab","setCurrentTab","bunRef","useRef","sauceRef","mainRef","scrollContainerRef","handleTabClick","tabName","current","scrollIntoView","block","behavior","scrollIntoRef","ingrStyles","ingridiensContainer","tabs","active","ingrDisplay","onScroll","scrollContainerPosition","getBoundingClientRect","top","bunHeaderPosition","sauceHeaderPosition","mainHeaderPosition","bunDiff","Math","abs","sauceDiff","mainDiff","ingrShowcase","ingrList","DraggableItem","ingrInstanceID","ingrData","ingrIndexInStoreArr","resortIngrList","findIngridient","stateDraggableIngridients","end","didDrop","dragItem","draggedPreview","useDrop","accept","canDrop","hover","draggedInstanceId","droppedIndexInStore","ingrIndexInStore","targetOfDrop","opacity","diStyles","draggableItime","node","draggableButton","text","thumbnail","arrOfIngrObjects","slice","splice","Loader","s","loader","getFormattedDate","currentDate","pastDate","formatedTime","format","diffDays","differenceInDays","calendarDate","formatDistance","now","locale","ru","getOrderStatus","orderStatus","getPrice","arr","reduce","previousValue","currentValue","getCompletedIngrList","orderData","allIngrCatalog","completedIngrList","ingredients","ingrId","ingrObj","BurgerConstructor","chosenBun","chosenDraggableIngr","loaderIsVisible","constructorLoaderIsVisible","addIngridientInConstructor","typeOfIngridient","objIngridientWithId","instanceID","drop","onDropHandler","isOver","dropTarget","findIngridientInStore","useCallback","targetIngrID","objIngrData","objIngr","indexOf","indexOfDraggedIngr","indexOfDroppedIngr","dropResort","arrWithOrderData","sendOrderToApi","container","chosenIngridients","topIngridinet","isLocked","length","draggableIngridinetContainer","ingr","bottomIngridinet","totalBar","priceOfBun","priceOfDraggableIngr","summ","ingridient","Number","getTotalPrice","margin","textAlign","justifyContent","display","paddingRight","OrderDetais","orderState","order","number","stylesOD","bgForCheck","BurgerVendor","modalIsVisible","ingrInModalData","dataIsLoading","ingrDataIsLoading","dataHasError","ingrDataHasError","headerSection","constructorContainer","DndProvider","backend","HTML5Backend","FeedDetailedCard","ws","detailedOrder","arrOfUsedIngr","bunItem","restIngr","includes","getIcon","imgContainer","backgroundImage","getListItem","amount","ingrItem","ingrIdent","image_mobile","priceContainer","ingrPrice","main","plane","createdAt","LoginPage","handleChange","e","target","handleSubmit","preventDefault","styles","onSubmit","placeholder","onChange","error","errorText","RegistrationPage","ForgotPage","canResetPassword","ResetPassword","hasResetPassword","console","log","ProfileTab","isActive","tab","tab_type_current","ProfileMenu","activeTab","menu","ProfilePage","userName","profileInfo","icon","buttonWrap","WS_OPEN_CONNECTION","WS_CONNECTED_SUCCESSFULLY","WS_ERROR","WS_GOT_ORDERS","WS_SEND_MESSAGE","WS_CLOSE_CONNECTION","WS_DISCONNECTED","SET_DETAILED_ORDER_IN_MODAL","wsActions","openConnection","onOpen","onError","onGotOrders","sendMessage","closeConnection","onClose","setOrderInModal","FeedCard","isPersonal","arrImages","normalizedPics","normalizedArr","i","reverse","formateArr","profileOrderModal","feedModal","iconsContainer","getIcons","ScrollableList","currentOrders","ordersData","orders","reversedOrdersList","ProfileOrdersPage","IngridientPage","id","useParams","ingridientProp","find","paddingTop","FeedPage","ordersTotalToday","totalToday","ordersTotalEver","total","оrdersDone","оrdersInWork","getLiElement","orderNumber","liElem","feedData","feedContent","feedChart","currentChart","ul","color","totalChart","totalBlock","bigHeader","OrderPage","selectedOrder","orderSource","App","action","modalIngredientOpen","modalFeedOrderOpen","modalProfileOrderOpen","Array","isArray","getIngridientsDataThunk","indexStyles","path","exact","blankDraggableIngr","proteins","fat","carbohydrates","calories","image_large","__v","initialState","userInitialState","wsInitialState","wsConnected","wsError","updatedAt","rootReducer","combineReducers","resortedArrOfIngridients","update","$splice","wsCreatedMiddleware","socket","next","payload","WebSocket","close","onopen","onerror","onmessage","parseData","parse","onclose","send","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","createStore","StrictMode","basename"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,KAAO,oB,oBCAzBD,EAAOC,QAAU,CAAC,aAAe,sC,oBCAjCD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,uB,oBCAzDD,EAAOC,QAAU,CAAC,WAAa,oC,oBCA/BD,EAAOC,QAAU,CAAC,KAAO,6B,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,aAAe,kEAAkE,UAAY,qC,yCCApJD,EAAOC,QAAU,CAAC,KAAO,iCAAiC,YAAc,wCAAwC,UAAY,sCAAsC,SAAW,qCAAqC,SAAW,qCAAqC,eAAiB,2CAA2C,cAAgB,4C,mBCA9UD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,cAAc,gCAAgC,gBAAkB,kEAAkE,UAAY,8BAA8B,iBAAmB,mEAAmE,UAAY,4DAA4D,WAAa,uHAAuH,aAAe,iCAAiC,QAAU,4BAA4B,cAAgB,oC,mBCA1mBD,EAAOC,QAAU,CAAC,cAAgB,4BAA4B,SAAW,uBAAuB,YAAc,0BAA0B,UAAY,wBAAwB,cAAgB,4BAA4B,aAAe,2BAA2B,GAAK,iBAAiB,OAAS,qBAAqB,WAAa,yBAAyB,WAAa,yBAAyB,UAAY,0B,mBCA9YD,EAAOC,QAAU,CAAC,KAAO,iCAAiC,OAAS,mCAAmC,OAAS,mCAAmC,OAAS,mCAAmC,KAAO,iCAAiC,MAAQ,kCAAkC,SAAW,qCAAqC,MAAQ,kCAAkC,aAAe,yCAAyC,SAAW,qCAAqC,UAAY,sCAAsC,eAAiB,2CAA2C,UAAY,wC,wHCO/jBC,EAAkDC,IAGlDC,EAAiB,kBAAMC,e,yBCT7B,SAASC,EAAUC,EAAcC,EAAsBC,GAE5D,IAAIC,GADJD,EAAQA,GAAS,IACDE,QAEhB,GAAkB,iBAAPD,GAAmBA,EAAK,CACjC,IAAME,EAAI,IAAIC,KACdD,EAAEE,QAAQF,EAAEG,UAAkB,IAANL,GACxBA,EAAMD,EAAME,QAAUC,EAGpBF,GAAOA,EAAIM,cACbP,EAAME,QAAUD,EAAIM,eAGlBR,IACFA,EAAQS,mBAAmBT,IAG7B,IAAIU,EAAgBX,EAAO,IAAMC,EACjC,IAAK,IAAMW,KAAYV,EAAO,CAC5BS,GAAiB,KAAOC,EACxB,IAAMC,EAAYX,EAAMU,IACN,IAAdC,IACFF,GAAiB,IAAME,GAK3BC,SAASC,OAASJ,EAKb,IAAMK,EAAY,SAAChB,GACxB,IAAMiB,EAAUH,SAASC,OAAOG,MAC9B,IAAIC,OAEF,WAAanB,EAAKoB,QAAQ,+BAAgC,QAAU,aAGxE,OAAOH,EAAUI,mBAAmBJ,EAAQ,SAAMK,GAIvCC,EAAwB,WACnC,IAAIC,EAAMR,EAAU,eAMpB,OAJEQ,EADEA,EACIA,EAAIC,MAAM,WAAW,GAErB,IAKH,SAASC,EAAa1B,GAC3BD,EAAUC,EAAM,KAAM,CAAEI,SAAU,ICzD7B,IAAMuB,EAAU,wCAQVC,EAAsBD,EAAU,aAQhCE,EAAmB,yCACnBC,EAAsBD,EAAW,OCHvC,IAAME,EAAuC,mBACvCC,EAAiC,gBACjCC,EAA+B,eAC/BC,EAAyC,oBACzCC,EAA+C,uBAC/CC,EAA2C,qBAyD3CC,EAAiC,SAACC,GAI7C,OAAO,SAAUC,IC9DZ,SAA+BD,GACpC,OAAOE,MFT0Bb,sDESC,CAChCc,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,KAPI,uCAOC,WAAOC,GAAP,eAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,uBAKmBH,EAAIG,OALvB,cAKEC,EALF,yBAMGC,QAAQC,OAAOF,IANlB,2CAPD,uDAeJL,MAAK,SAACC,GAGL,OAAOA,MD4CTO,CAAsBhB,GACnBQ,MAAK,YAA0C,IAAvCS,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAE1BlB,EAAS,CACPmB,KAAM3B,EACN/B,KAAMuD,EAAKvD,KACX2D,MAAOJ,EAAKI,MACZC,YAAY,IAEd7D,EAAU,cAAeyD,EAAa,CAAEpD,QAAS,OACjDyD,aAAaC,QAAQ,eAAgBL,MAEtCM,OAAM,SAAAC,SAOAC,EAA0B,SAAC3B,GAEtC,OAAO,SAAUC,IC1CZ,SAAoBD,GACzB,OAAOE,MFvDmBb,mDEuDC,CACzBc,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAUP,KAEpBQ,KAPI,uCAOC,WAAOC,GAAP,SAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,mBAIGE,QAJH,SAIwBL,EAAIG,OAJ5B,iDAIWG,OAJX,4DAPD,uDAaJP,MAAK,SAACC,GAGL,OAAOA,MD0BTmB,CAAW5B,GACRQ,MAAK,YAAmD,IAAhDS,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,cACV,IADsC,EAAdU,UAEtC5B,EAAS,CACPmB,KAAM3B,EACN/B,KAAMuD,EAAKvD,KACX2D,MAAOJ,EAAKI,QAGd5D,EAAU,cAAeyD,EAAa,CAAEpD,QAAS,OACjDyD,aAAaC,QAAQ,eAAgBL,OAGxCM,OAAM,SAAAC,GACLzB,EAAS,CACPmB,KAAMzB,SAUHmC,EAAwB,WAEnC,OAAO,SAAU7B,GCwIVC,MFnQoBb,oDEmQC,CAC1Bc,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAU,CAAEwB,MAAOR,aAAaS,QAAQ,oBAElDxB,KAPI,uCAOC,WAAOC,GAAP,SAAAC,EAAA,0DAEAD,EAAIE,GAFJ,yCAGKF,EAAIG,QAHT,mBAKGE,QALH,SAKwBL,EAAIG,OAL5B,iDAKWG,OALX,4DAPD,uDAcJP,MAAK,SAACC,GAML,OALIA,EAAG,QAKAA,KDxJND,MAAK,SAACC,IAGe,IAAhBA,EAAIoB,UAENzC,EAAa,eACbmC,aAAaU,WAAW,gBAExBhC,EAAS,CACPmB,KAAMxB,QAKX6B,OAAM,SAAAC,GAMLtC,EAAa,eACbmC,aAAaU,WAAW,gBACxBhC,EAAS,CACPmB,KAAMxB,SAMHsC,EAAkC,SAACb,GAE9C,OAAO,SAAUpB,GClFZ,IAA+BkC,KDqFZd,ECnFjBnB,MFzEuBb,uDEyEC,CAC7Bc,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAU,CAAEc,MAAOc,MAE7B3B,KAPI,uCAOC,WAAOC,GAAP,SAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,mBAIGE,QAJH,SAIwBL,EAAIG,OAJ5B,iDAIWG,OAJX,4DAPD,uDAaJP,MAAK,SAACC,GAGL,OAAOA,MDoEND,MAAK,SAAAC,IAGgB,IAAhBA,EAAIoB,UAEN5B,EAAS,CACPmB,KAAMvB,IAIRpC,EAAU,mBAAoB,MAAO,CAAEK,QAAS,WAGnD2D,OAAM,SAAAC,SAOAU,EAAgC,SAACC,EAAqBC,GAEjE,OAAO,SAAUrC,ICrFZ,SAA4BoC,EAAqBC,GACtD,OAAOpC,MF9FwBb,6DE8FC,CAC9Bc,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAU,CACnB,SAAY8B,EACZ,MAASC,MAGV9B,KAVI,uCAUC,WAAOC,GAAP,SAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,mBAIGE,QAJH,SAIwBL,EAAIG,OAJ5B,iDAIWG,OAJX,4DAVD,uDAgBJP,MAAK,SAACC,GAGL,OAAOA,MDqET8B,CAAmBF,EAAaC,GAC7B9B,MAAK,SAAAC,IACgB,IAAhBA,EAAIoB,UACN5B,EAAS,CACPmB,KAAMtB,IAGRrC,EAAU,mBAAoB,KAAM,CAAEK,SAAU,QAGnD2D,OAAM,SAAAC,SAOAc,EAA+B,SAACC,EAAiBC,GAE5D,OAAO,SAAUzC,ICnCZ,SAA6BwC,GAWlC,OAAOvC,MAAMZ,EAAqB,CAChCa,OAAQ,QACRC,QAAS,CACP,eAAgB,iCAChB,cAAiB1B,EAAU,gBAE7B2B,KAAMC,KAAKC,UAAU,CACnB,KAAQkC,EAAK/E,KACb,MAAS+E,EAAKpB,MACd,SAAYoB,EAAKE,aAGlBnC,KAZI,uCAYC,WAAOC,GAAP,SAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,mBAKGE,QALH,SAKwBL,EAAIG,OAL5B,iDAKWG,OALX,4DAZD,uDAmBJP,MAAK,SAACC,GAOL,OANIA,EAAG,QAMAA,MDGTmC,CAAoBH,GACjBjC,MAAK,SAAAC,GAGJR,EAAS,CACPmB,KAAM1B,EACNhC,KAAM+C,EAAIQ,KAAKvD,KACf2D,MAAOZ,EAAIQ,KAAKI,QAGlBqB,EAAc,CAAEhF,KAAM+C,EAAIQ,KAAKvD,KAAM2D,MAAOZ,EAAIQ,KAAKI,MAAOsB,SAAU,UAYjEE,EAAoC,SAACC,GAGhD,OAAO,SAAU7C,GChBVC,MF3NkBb,mDE2NC,CACxBc,OAAQ,OACRC,QAAS,CACP,eAAgB,kCAElBC,KAAMC,KAAKC,UAAU,CAAEwB,MAAOR,aAAaS,QAAQ,oBAElDxB,KAPI,uCAOC,WAAOC,GAAP,SAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,mBAKGE,QALH,SAKwBL,EAAIG,OAL5B,iDAKWG,OALX,4DAPD,uDAcJP,MAAK,SAACC,GACL,OAAuB,IAAnBA,EAAG,SAKAA,KDFND,MAAK,YAAoC,IAAjCU,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAEpB1D,EAAU,cAAeyD,EAAa,CAAEpD,QAAS,OACjDyD,aAAaC,QAAQ,eAAgBL,GAGrClB,EAAS8C,EAAaD,OAEvBrB,OAAM,SAACC,SAODqB,EAAyB,SAACD,GAUrC,QANAA,EAMoB,EACX,aAOF,SAAU7C,GC9IVC,MAAMZ,EAAqB,CAChCc,QAAS,CACPD,OAAQ,MACR,eAAgB,iCAChB6C,cAAetE,EAAU,kBAG1B8B,KAPI,uCAOC,WAAOC,GAAP,SAAAC,EAAA,0DACAD,EAAIE,GADJ,yCAEKF,EAAIG,QAFT,mBAKGE,QALH,SAKwBL,EAAIG,OAL5B,iDAKWG,OALX,4DAPD,uDAeJP,MAAK,SAACC,GAOL,OANIA,EAAG,QAMAA,KD0HND,MAAK,YAAwB,IAArBS,EAAoB,EAApBA,MACS,IADW,EAAdY,SAIX5B,EAAS,CACPmB,KAAM1B,EACNhC,KAAMuD,EAAKvD,KACX2D,MAAOJ,EAAKI,WAIjBI,OAAM,SAACC,GAEc,gBAAhBA,EAAIuB,SAENhD,EAAS4C,EAAwBC,SAU9BI,EAA6B,WAExC,8CAAO,WAAgBjD,GAAhB,iBAAAS,EAAA,yDACCyC,EAA+C,MAA5BzE,EAAU,eAC7B0E,EAA2D,MAAxC7B,aAAaS,QAAQ,iBAE1CmB,EAJC,uBAKmB,EACtBlD,EAAS8C,EADa,IALnB,kBAOI,iBAPJ,UAUAI,IAAmBC,EAVnB,wBAWmB,EACtBnD,EAAS4C,EADa,IAXnB,kBAaI,wCAbJ,4CAAP,uDE/SWQ,EAAqD,0BACrDC,EAAmD,yBACnDC,EAAqD,0BACrDC,EAAqC,kBACrCC,EAAuD,2BACvDC,EAAmD,yBACnDC,EAA2B,aAC3BC,EAA6B,cAC7BC,EAA2C,yBAC3CC,EAAqB,UACrBC,EAAyB,YACzBC,EAAuB,WACvBC,EAA+D,+BAC/DC,EAAmD,yBACnDC,EAA+D,+BAC/DC,GAAmD,yBA8HnDC,GAAiC,WAAoC,IAAnCC,EAAkC,uDAA5B,GAAIC,EAAwB,uCAC7E,OAAO,SAAUtE,GACbA,EAAS,CACLmB,KAAMgD,GACNzG,OAAO,IAEXuC,MAAMoE,EAAK,CACPnE,OAAQ,OAERC,QAAS,CACL,eAAgB,iCAChB4C,cAAetE,EAAU,gBAE7B2B,KAAMC,KAAKC,UAAUgE,OAEpB/D,MAAK,SAACC,GACH,OAAIA,EAAIE,GACGF,EAAIG,OAERE,QAAQC,OAAON,EAAI+D,WAE7BhE,MAAK,SAACC,GAGHR,EAAS,CACLmB,KAAMoC,EACN7F,MAAO8C,IAEXR,EAAS,CACLmB,KAAMgD,GACNzG,OAAO,OAGd6C,MAAK,WACFP,EAAS,CACLmB,KAAMuC,IAEV1D,EAAS,CACLmB,KAAMyC,EACNlG,MAAO,iBAEXsC,EAAS,CACLmB,KAAM8C,OAGbzC,OAAM,SAACC,S,0BC3Lb,SAAS+C,GAAT,GAA4D,IAAlCC,EAAiC,EAAjCA,SAAaC,EAAoB,6BAEhE,EAAoCtH,GAAe,SAACuH,GAAD,OAAWA,EAAM3D,QAA5DK,EAAR,EAAQA,WAAYuD,EAApB,EAAoBA,YAEpB,OAAItD,aAAaS,QAAQ,kBAAoB6C,EAAoB,KAY/D,eAAC,IAAD,6BAAWF,GAAX,IAAiBG,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,OACvBzD,EACGoD,EACA,eAAC,IAAD,CAAUM,GAAI,CACbC,SAAU,SAEVC,MAAO,CAAEC,KAAMJ,U,6CCVVK,GAT8B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaX,EAAe,EAAfA,SAE3D,OACE,sBAAKY,UAAWC,KAASC,aAAcC,QAASJ,EAAhD,SACGX,K,QCoEQgB,GA7DG,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SACXzE,EAAW1C,IACXoI,EAAUC,cACVb,EAAWc,cACXC,EAAmBzI,GAAe,SAAA6H,GAAK,OAAIA,EAAMa,aAAaD,oBAE9DE,EAAYxH,SAASyH,eAAe,gBAOpCC,EAAc,WAWhB,GAVAjG,EAAS,CACLmB,KAAMwC,IAGV3D,EAAS,CACLmB,KAAMyC,EACNlG,MAAO,SAIc,iBAArBmI,EACA,OAAOH,EAAQQ,KAAK,CAEhBjB,MAAO,CAAEkB,WAAYrB,KAI7BY,EAAQU,UAcZ,OAVAC,qBAAU,WACN,IAAMC,EAAa,SAACC,GACE,WAAdA,EAAMC,KACNP,KAIR,OADA1H,SAASkI,iBAAiB,UAAWH,GAC9B,kBAAM/H,SAASmI,oBAAoB,UAAWJ,OAGlDK,IAASC,aAER,eAAC,GAAD,CAAcxB,YAAaa,EAA3B,SAGI,2BAASZ,UAAWwB,KAAYC,MAAOtB,QAzC3B,SAACe,GACrBA,EAAMQ,mBAwCE,UACI,yBAAQvB,QAASS,EAAaZ,UAAWwB,KAAYG,YAArD,SACI,eAAC,aAAD,CAAW7F,KAAK,cAEnBsD,OAGVsB,I,oBCtCIkB,OA9Bf,YAAuE,IAA3CC,EAA0C,EAA1CA,eAExB,OACI,uBAAK7B,UAAW8B,KAASC,KAAzB,UACI,qBAAI/B,UAAW8B,KAASE,YAAc,+CAAgDC,MAAO,GAA7F,qHACA,sBAAKC,IAAKL,EAAc,YAAiBM,IAAKN,EAAc,KAAU7B,UAAW8B,KAASM,UAAY,UACtG,oBAAGpC,UAAW,mCAAd,SAAmD6B,EAAc,OAEjE,sBAAI7B,UAAW8B,KAASO,SAAxB,UACI,sBAAIrC,UAAW8B,KAASQ,SAAxB,UACI,qBAAItC,UAAW8B,KAASS,eAAiB,oDAAzC,iFACA,oBAAGvC,UAAW8B,KAASU,cAAgB,sDAAuDC,UAAQ,uBAAtG,SAA8HZ,EAAc,cAEhJ,sBAAI7B,UAAW8B,KAASQ,SAAW,oDAAnC,UACI,qBAAItC,UAAW8B,KAASS,eAAiB,oDAAzC,oDACA,oBAAGvC,UAAW8B,KAASU,cAAgB,sDAAuDC,UAAQ,uBAAtG,SAA8HZ,EAAc,cAEhJ,sBAAI7B,UAAW8B,KAASQ,SAAW,oDAAnC,UACI,qBAAItC,UAAW8B,KAASS,eAAiB,oDAAzC,8CACA,oBAAGvC,UAAW8B,KAASU,cAAgB,sDAAuDC,UAAQ,mBAAtG,SAA0HZ,EAAc,SAE5I,sBAAI7B,UAAW8B,KAASQ,SAAW,oDAAnC,UACI,qBAAItC,UAAW8B,KAASS,eAAiB,oDAAzC,sEACA,oBAAGvC,UAAW8B,KAASU,cAAgB,sDAAuDC,UAAQ,oBAAtG,SAA2HZ,EAAc,0B,4BC0B9Ia,OA5Cf,WAEE,OACE,yBAAQ1C,UAAW2C,KAAaC,OAAhC,SACE,uBAAK5C,UAAW2C,KAAaE,gBAA7B,UACE,sBAAK7C,UAAU,8BAAf,SACE,sBAAIA,UAAW2C,KAAaG,iBAA5B,UACE,qBAAI9C,UAAW2C,KAAaI,aAA5B,SACE,eAAC,KAAD,CAAMrD,GAAG,IAAIM,UAAW2C,KAAaK,QAArC,SACE,uBAAKhD,UAAW2C,KAAaM,UAA7B,UACE,eAAC,cAAD,CAAYnH,KAAK,YACjB,uBAAMkE,UAAW2C,KAAaO,cAA9B,uFAIN,qBAAIlD,UAAW2C,KAAaI,aAA5B,SACE,eAAC,KAAD,CAAMrD,GAAG,QAAQM,UAAW2C,KAAaK,QAAzC,SACE,uBAAKhD,UAAW2C,KAAaM,UAAY,wBAAzC,UACE,eAAC,YAAD,CAAUnH,KAAK,cACf,uBAAMkE,UAAW2C,KAAaO,cAA9B,mGAOV,eAAC,KAAD,CAAMxD,GAAG,IAAT,SACE,eAAC,QAAD,MAMF,sBAAKM,UAAW2C,KAAaQ,UAAY,+BAAzC,SACE,gBAAC,KAAD,CAAMnD,UAAW2C,KAAaS,WAAa,IAAMT,KAAaK,QAAU,wBAAyBtD,GAAG,WAApG,UACE,eAAC,eAAD,CAAa5D,KAAK,cAClB,uBAAMkE,UAAW2C,KAAaO,cAA9B,wG,yFC2FGG,GAzHwC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAChD3I,EAAW1C,IACXoI,EAAUC,cACVb,EAAWc,cAEjB,EAA+CgD,aAAQ,CACnDzH,KAAM,aACN0H,KAAMF,EAGNG,QAAS,SAACC,GAAD,MAAc,CACnBC,QAASD,EAAQE,aAAe,oBAAsB,OAN9D,oBAASD,EAAT,KAASA,QAAWE,EAApB,KAA6BC,EAA7B,KAwCA,EAAsCC,IAAMC,WAA5C,oBAAOC,EAAP,KAAoBC,EAApB,KASMC,EAAmDpM,GAAe,SAAC6H,GAErE,GAA2B,QAAvB0D,EAAcxH,KACd,OAAO8D,EAAMa,aAAa2D,OAK5BC,EAA2DtM,GAAe,SAAC6H,GAE7E,GAA2B,UAAvB0D,EAAcxH,MAA2C,SAAvBwH,EAAcxH,KAChD,OAAO8D,EAAMa,aAAa6D,wBAuClC,OAPAtD,qBAAU,WACNkD,EA3BJ,WACI,IAAIK,EAAe,EAKnB,MAA2B,QAAvBjB,EAAcxH,MACVqI,GAAqBA,EAAiBK,MAAQlB,EAAckB,IACrD,IAKXH,GAAsD,UAAvBf,EAAcxH,MAA2C,SAAvBwH,EAAcxH,MAE/EuI,EAA2BI,SAAQ,SAACjB,GAC5BA,EAAKgB,MAAQlB,EAAckB,KAC3BD,OAKLA,GAKQG,MAEhB,CAACP,EAAkBE,EAA4Bf,IAK9C,uCACI,eAACqB,GAAA,EAAD,CAAkBC,QAASd,EAAgB5B,IAAKoB,EAAcuB,QADlE,IAEI,uBAAK7E,UAAW8E,KAAWC,SAAW,QAAS5E,QA9EnC,WAbhBxF,EAAS,CACLmB,KAAMuC,IAEV1D,EAAS,CACLmB,KAAMyC,EACNlG,MAAO,sBAEXsC,EAAS,CACLmB,KAAMmC,EACN5F,MAAOiL,IAQXjD,EAAQQ,KAAK,CACTlB,SAAS,gBAAD,OAAkB2D,EAAckB,KACxC5E,MAAO,CAAEoF,gBAAiBvF,MAwE2CwF,IAAKpB,EAAS5B,MAAO,CAAE0B,WAA5F,UACI,sBAAKzB,IAAKoB,EAAcuB,MAAO1C,IAAKmB,EAAclL,KAAM4H,UAAW8E,KAAWI,UAC9E,uBAAKlF,UAAW8E,KAAWK,MAA3B,YAEOlB,GAAe,eAAC,WAAD,CAASmB,MAAOnB,EAAaoB,KAAK,YACpD,uBAAMrF,UAAU,+BAAhB,SAAgDsD,EAAc6B,QAC9D,eAAC,gBAAD,CAAcrJ,KAAK,eAEvB,qBAAIkE,UAAU,6BAAd,SAA4CsD,EAAclL,cC9F3DkN,GA1B4B,SAAC,GAAc,IAAZxJ,EAAW,EAAXA,KAMpCyJ,EAHmBxN,GAAe,SAACuH,GAAD,OAAWA,EAAMmB,aAAa+E,gBAAgBC,oBAGtCC,QAAO,SAAUC,GAC7D,OAAOA,EAAI7J,OAASA,KAGxB,OACI,qCAEQyJ,EAAuBK,KAAI,SAACD,EAAyBE,GACjD,OACI,eAAC,GAAD,CACIvC,cAAeqC,GACVA,EAAInB,WC8FtBsB,OAzGf,WAII,MAAoC/B,IAAMC,SAAiB,OAA3D,oBAAO+B,EAAP,KAAmBC,EAAnB,KAGMC,EAASC,iBAAuB,MAChCC,EAAWD,iBAAuB,MAClCE,EAAUF,iBAAuB,MACjCG,EAAqBH,iBAAuB,MAsB5CI,EAAiB,SAACjO,GACpB2N,EAAc3N,GArBlB,SAAuBkO,GAInB,IAAIR,EAEY,QAAZQ,EACAR,EAAaE,EAEI,UAAZM,EACLR,EAAaI,EAEI,SAAZI,IACLR,EAAaK,GAGjBL,GAAcA,EAAWS,SAAWT,EAAWS,QAAQC,eAAe,CAAEC,MAAO,QAASC,SAAU,WAMlGC,CAAcvO,IA8BlB,OACI,2BAAS2H,UAAW6G,KAAWC,oBAA/B,UAEI,uBAAK9G,UAAW6G,KAAWE,KAA3B,UAEI,eAAC,OAAD,CAAK1O,MAAM,MAAM2O,OAAuB,QAAfjB,EAAsB5F,QAASmG,EAAxD,4CACA,eAAC,OAAD,CAAKjO,MAAM,QAAQ2O,OAAuB,UAAfjB,EAAwB5F,QAASmG,EAA5D,4CACA,eAAC,OAAD,CAAKjO,MAAM,OAAO2O,OAAuB,SAAfjB,EAAuB5F,QAASmG,EAA1D,2DAGJ,uBAAKtG,UAAW6G,KAAWI,YAAc,SAAUhC,IAAKoB,EAAoBa,SArC/D,WAGjB,IAAMC,EAA0Bd,EAAmBG,QAAUH,EAAmBG,QAAQY,wBAAwBC,IAAM,EAChHC,EAAoBrB,EAAOO,QAAUP,EAAOO,QAAQY,wBAAwBC,IAAM,EAClFE,EAAsBpB,EAASK,QAAUL,EAASK,QAAQY,wBAAwBC,IAAM,EACxFG,EAAqBpB,EAAQI,QAAUJ,EAAQI,QAAQY,wBAAwBC,IAAM,EAOrFI,EAAUC,KAAKC,IAAIR,EAA0BG,GAC7CM,EAAYF,KAAKC,IAAIR,EAA0BI,GAC/CM,EAAWH,KAAKC,IAAIR,EAA0BK,GAGhDxB,EADAyB,EAAUG,EACI,MACPA,EAAYC,EACL,QAEA,SAed,UAGI,uBAAK7H,UAAW6G,KAAWiB,aAAc7C,IAAKgB,EAA9C,UACI,qBAAIjG,UAAU,6BAAd,4CACA,sBAAKA,UAAW6G,KAAWkB,SAA3B,SACI,eAAC,GAAD,CAAUjM,KAAM,aAKxB,uBAAKkE,UAAW6G,KAAWiB,aAAc7C,IAAKkB,EAA9C,UACI,qBAAInG,UAAU,6BAAd,4CACA,sBAAKA,UAAW6G,KAAWkB,SAA3B,SACI,eAAC,GAAD,CAAUjM,KAAM,eAKxB,uBAAKkE,UAAW6G,KAAWiB,aAAc7C,IAAKmB,EAA9C,UACI,qBAAIpG,UAAU,6BAAd,wDACA,sBAAKA,UAAW6G,KAAWkB,SAA3B,SACI,eAAC,GAAD,CAAUjM,KAAM,qB,kDClBzBkM,GAzEsC,SAAC,GAAuF,IAArFC,EAAoF,EAApFA,eAAgBC,EAAoE,EAApEA,SAAUC,EAA0D,EAA1DA,oBAAqBC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,eAC7G1N,EAAW1C,IAEXqQ,EAA4BvQ,GAAe,SAACuH,GAAD,OAAWA,EAAMmB,aAAa6D,wBAqB/E,EAAmDf,cAC/C,iBAAO,CACHzH,KAAM,sBACN0H,KAAM,CAAEyE,iBAAgBE,uBACxB1E,QAAS,SAACC,GAAD,MAAc,CACnBE,WAAYF,EAAQE,eAExB2E,IAAK,SAAC/E,EAAME,GACQA,EAAQ8E,WAGpBJ,EAAe5E,EAAKyE,eAAgBzE,EAAK2E,yBAIrD,CAACF,EAAgBE,EAAqBC,IAf1C,oBAASxE,EAAT,KAASA,WAAc6E,EAAvB,KAAiCC,EAAjC,KAmBA,EAAyBC,cAErB,iBAAO,CACHC,OAAQ,sBACRC,QAAS,kBAAM,GACfC,MAHG,YAG2C,IAAtBC,EAAqB,EAArCd,eACJ,GAAIc,IAAsBd,EAAgB,CACtC,IAA0Be,EAAwBX,EAAeJ,GAAzDgB,iBACRb,EAAeW,EAAmBC,QAI9C,CAACX,EAAgBD,IAZZc,EAAT,qBAeMC,EAAUvF,EAAa,EAAI,EAIjC,OAEI,uBAAK5D,UAAWoJ,KAASC,eAAgBpE,IAAK,SAACqE,GAAD,OAAUJ,EAAaR,EAAeY,KAAQrH,MAAO,CAAEkH,WAArG,UACI,yBAAQlE,IAAKwD,EAAUzI,UAAWoJ,KAASG,gBAA3C,SACI,eAAC,YAAD,CAAUzN,KAAK,cAEnB,eAAC,sBAAD,CAAoB0N,KAAMtB,EAAS9P,KAAMqR,UAAWvB,EAASrD,MAAOM,MAAO+C,EAAS/C,MAAOvE,YA/DtE,WAEzB,IAAM8I,EAAmBpB,EAA0BqB,MAAM,GAGzDD,EAAiBE,OAAOzB,EAAqB,GAG7CxN,EAAS,CACLmB,KAAM6C,EACNtG,MAAOqR,W,qBCrCNG,GAAS,WACpB,OACE,sBAAK7J,UAAW8J,KAAEC,U,kDCGTC,GAAmB,SAACtP,GAC/B,IAAMuP,EAAc,IAAIvR,KAClBwR,EAAW,IAAIxR,KAAKgC,GAEpByP,EACJC,aAAOF,EAAU,UAAY,KAAOE,aAAOF,EAAU,KAEjDG,EAAWC,aAAiBL,EAAYrR,UAAWsR,EAAStR,WAE9D2R,EAAe,GAcnB,OAZEA,EADe,IAAbF,EACa,6CACO,IAAbA,EACM,iCACNA,EAAW,EACR,UAAMA,EAAN,sDACHA,EAAW,GACR,UAAMA,EAAN,4DAEA,UAAMG,aAAe,IAAI9R,KAAKwR,GAAWxR,KAAK+R,MAAO,CAAEC,OAAQC,OAA/D,mCAGL,UAAMJ,EAAN,aAAuBJ,IA4BrBS,GAAiB,SAACC,GAC7B,OAAQA,GACN,IAAM,OACJ,MAAO,mDAET,IAAM,UACJ,MAAO,yDAET,QAAS,MAAO,+CAIPC,GAAW,SAACC,GACvB,OAAOA,EAAIC,QAAO,SAACC,EAAuBC,GACxC,OAAOD,EAAgBC,EAAa/F,QACnC,IAIQgG,GAAuB,SAACC,EAAmBC,GACtD,IAD+H,EACzHC,EAA+C,GAD0E,eAI1GF,EAAUG,aAJgG,yBAIpHC,EAJoH,QAK7HH,EAAe5G,SAAQ,SAACgH,GAClBA,EAAQjH,MAAQgH,GAClBF,EAAkBzK,KAAK4K,OAH7B,2BAA6C,IAJkF,8BAY/H,OAAOH,GC6KMI,OAxOf,WACE,IAAM/Q,EAAW1C,IACXoI,EAAUC,cAGhB,EAAyEvI,GAAe,SAACuH,GAAD,MAAY,CAClGqM,UAAWrM,EAAMmB,aAAa2D,IAC9BwH,oBAAqBtM,EAAMmB,aAAa6D,qBACxCtI,WAAYsD,EAAM3D,KAAKK,WACvB6P,gBAAiBvM,EAAMmB,aAAaqL,+BAJ9BH,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,oBAAqB5P,EAAxC,EAAwCA,WAAY6P,EAApD,EAAoDA,gBAoC9CE,EAA6B,SAACzI,GAElC,IAlBiB0I,EAkBXC,EAAmC,6BAAQ3I,GAAR,IAAuB4I,YDnExB,IAAIxT,MAAQE,YCqEpD+B,EAAS,CACPmB,MArBekQ,EAqBC1I,EAAcxH,KApBP,QAArBkQ,EACKxN,EAGgB,UAArBwN,EACKvN,EAGgB,SAArBuN,EACKtN,EAGF,SASLrG,MAAO4T,KAIX,EAAqCtD,aAAQ,CAC3CC,OAAQ,aACRuD,KAF2C,SAEtC7I,IApCP,SAAuBA,GACrByI,EAA2BzI,GAoCzB8I,CAAc9I,IAGhBG,QAAS,SAAAC,GAAO,MAAK,CACnB5C,WAAY4C,EAAQ2I,SAAW,yFAA2F,OAP9H,oBAASvL,EAAT,KAASA,WAAcwL,EAAvB,KAmBMC,EAAwBC,uBAC5B,SAACC,GAEC,IAAMC,EAAcd,EAAoBlG,QAAO,SAACiH,GAAD,OAAiCA,EAAQT,aAAeO,KAAc,GACrH,MAAO,CACLC,cACAzD,iBAAkB2C,EAAoBgB,QAAQF,MAGlD,CAACd,IAIGxD,EAGJ,SAACW,EAA2BC,GAC1B,IAAQC,EAAqBsD,EAAsBxD,GAA3CE,iBAERtO,EAAS,CACPmB,KAAM+C,EACNgO,mBAAoB5D,EACpB6D,mBAAoB9D,KAK1B,EAAuBL,cAAQ,iBAAO,CAAEC,OAAQ,0BAAvCmE,EAAT,qBAwBA,SAAS9N,IACP,IAAM+N,EAAmB,GAUzB,OAPAA,EAAiBnM,KAAK8K,EAAS,KAG/BC,EAAoBnH,SAAQ,SAACkB,GAC3BqH,EAAiBnM,KAAK8E,EAAG,QAGpB,CAAE,YAAeqH,GAG1B,IAAMC,EAAc,uCAAG,sBAAA7R,EAAA,yDAGhBY,EAHgB,yCAKXqE,EAAQQ,KAAK,CAAElB,SAAU,YALd,gCAQdhF,EAASoE,GfzKWhF,+CeyK2BkF,KARjC,2CAAH,qDAWpB,OACE,2BAASe,UAAW8J,KAAEoD,UAAWjI,IAAKqH,EAAYrK,MAAO,CAAEnB,cAA3D,UAEI+K,EAAkB,sBAAK7L,UAAW8J,KAAEC,OAAlB,SAA0B,eAAC,GAAD,MAAmB,KAGjE,sBAAI/J,UAAW8J,KAAEqD,kBAAoB,QAArC,UAGIxB,EAAUvT,MAER,qBAAI4H,UAAW8J,KAAEsD,cAAjB,SACE,eAAC,sBAAD,CAAoBtR,KAAK,MAAMuR,UAAU,EAAM7D,KAAMmC,EAAUvT,KAAO,8BAAWqR,UAAWkC,EAAU9G,MAAOM,MAAOwG,EAAUxG,UAMlIyG,EAAoB0B,OAAS,GAE3B,qBAAItN,UAAW8J,KAAEyD,6BAA8BtI,IAAK8H,EAApD,SACGnB,EAAoBhG,KAAI,SAAC4H,EAA0B3H,GAClD,OACE,eAAC,GAAD,CAEEoC,eAAgBuF,EAAKtB,WACrBhE,SAAUsF,EACVrF,oBAAqBtC,EACrBuC,eAAgBA,EAChBC,eAAgBkE,GALXiB,EAAKtB,iBAepBP,EAAUvT,MAER,qBAAI4H,UAAW8J,KAAE2D,iBAAjB,SACE,eAAC,sBAAD,CAAoB3R,KAAK,SAASuR,UAAU,EAAM7D,KAAMmC,EAAUvT,KAAO,wBAAUqR,UAAWkC,EAAU9G,MAAOM,MAAOwG,EAAUxG,aAOxI,sBAAKnF,UAAW8J,KAAE4D,SAAlB,SAGI/B,EAAUvT,MAER,uCACE,wBAAM4H,UAAW,qCAAjB,UAjGZ,WACE,IAAM2N,EAA+B,EAAlBhC,EAAUxG,MACzByI,EAAuB,EAS3B,OANIhC,EAAoB0B,OAAS,IAC/BM,EAAuBhC,EAAoBZ,QAAO,SAAU6C,EAAcC,GACxE,OAAOD,EAAOE,OAAOD,EAAW3I,SAC/B,IAGEwI,EAAaC,EAsF8CI,GAAgB,eAAC,gBAAD,CAAclS,KAAM,eAC5F,eAAC,UAAD,CAAQA,KAAK,UAAUuJ,KAAK,QAAQlF,QAAS8M,EAA7C,iGAKF,sBAAKhL,MAAO,CAAEgM,OAAQ,UAAtB,UACKtC,EAAUvT,MAAUwT,EAAoB0B,OAAS,GAEhD,wBAAMtN,UAAW,mCAAoCiC,MAAO,CAAEiM,UAAW,SAAUC,eAAgB,SAAUC,QAAS,aAAcC,aAAc,QAAlJ,uKAC+B,wBAD/B,mLAMA,uBAAMrO,UAAW,mCAAoCiC,MAAO,GAA5D,mK,qBClOHqM,GAdS,WACpB,IAAMC,EAAaxW,GAAe,SAACuH,GAAD,OAAWA,EAAMmB,aAAa2K,aAEhE,OACI,uCACI,qBAAIpL,UAAW,yCAAf,SAA0DuO,EAAWC,MAAMC,SAC3E,oBAAGzO,UAAW,mCAAd,iIACA,sBAAKA,UAAW0O,KAASC,WAAa,WACtC,oBAAG3O,UAAW,mCAAd,qJACA,oBAAGA,UAAW,wDAAd,gQ,oBC6DG4O,OAlEf,WAME,MAA4F7W,GAAe,SAACuH,GAAD,MAAY,CACrHuP,eAAgBvP,EAAMmB,aAAaoO,eACnCrO,iBAAkBlB,EAAMmB,aAAaD,iBACrCsO,gBAAiBxP,EAAMmB,aAAaqO,gBACpCrJ,iBAAkBnG,EAAMmB,aAAa+E,gBAAgBC,iBACrDsJ,cAAezP,EAAMmB,aAAa+E,gBAAgBwJ,kBAClDC,aAAc3P,EAAMmB,aAAa+E,gBAAgB0J,qBAN3CL,EAAR,EAAQA,eAAgBrO,EAAxB,EAAwBA,iBAAkBiF,EAA1C,EAA0CA,iBAAkBsJ,EAA5D,EAA4DA,cAAeE,EAA3E,EAA2EA,aA0B3E,OACE,uCACE,0BAASjP,UAAW8J,KAAEqF,cAAtB,SACE,qBAAInP,UAAU,4BAAd,qGAGF,0BAASA,UAAW8J,KAAEsF,qBAAtB,UAQIL,IAAkBE,KAAkBxJ,KAAsBA,EAAiB6H,QAC3E,uCACE,gBAAC+B,GAAA,EAAD,CAAaC,QAASC,KAAtB,UACE,eAAC,GAAD,IACA,eAAC,GAAD,OAIDV,GAAwC,iBAArBrO,GAClB,eAAC,GAAD,UACE,eAAC,GAAD,e,oBCxDHgP,GAAmB,WAC9B,IAAMpE,EAAYrT,GAAe,SAAAuH,GAAK,OAAIA,EAAMmQ,GAAGC,iBAC7CrE,EAAiBtT,GAAe,SAAC6H,GAAD,OAAWA,EAAMa,aAAa+E,gBAAgBC,oBAGhFkK,EAAkD,KAClDC,EAAqC,KACrCC,EAA6C,KAE7CxE,GAAkBD,IAEpBuE,EAAgBtE,EAAe3F,QAAO,SAAC8H,GAAD,OAA8BpC,EAAUG,YAAYuE,SAAStC,EAAKhJ,QAKxGoL,GAHAC,EAAWxE,EAAe3F,QAAO,SAAC8H,GAAD,OAA8BpC,EAAUG,YAAYuE,SAAStC,EAAKhJ,SAGhF,GACnBqL,EAAWA,EAASlG,MAAM,IAM5B,IAAMoG,EAAU,SAAC/Q,GACf,OAAQ,sBAAKgB,UAAW8J,KAAEkG,aAAc/N,MAAO,CAAEgO,gBAAgB,OAAD,OAASjR,EAAT,SAG5DkR,EAAc,SAACzE,GAA2E,IAAvC0E,EAAsC,uDAArB,EAAGtK,EAAkB,uCAE7F,OACE4F,EAEI,sBAAIzL,UAAW8J,KAAEsG,SAAjB,UACE,uBAAKpQ,UAAW8J,KAAEuG,UAAlB,UACGN,EAAQtE,EAAQ6E,cACjB,uBAAMtQ,UAAW,+BAAjB,SAAkDyL,EAAQrT,UAE5D,uBAAK4H,UAAW8J,KAAEyG,eAAlB,UACE,wBAAMvQ,UAAW8J,KAAE0G,UAAY,iCAA/B,UAAkEL,EAAlE,MAA6E1E,EAAQtG,SACrF,eAAC,gBAAD,CAAcrJ,KAAK,iBAPS+J,GAYlC,MAIN,OACE,2BAAS7F,UAAW8J,KAAE2G,KAAtB,UACE,wBAAMzQ,UAAW8J,KAAE2E,OAAS,uCAA5B,cAAsErD,EAAUqD,OAAhF,OACA,sBAAIzO,UAAW8J,KAAElH,OAAS,mCAA1B,cAAgEwI,EAAUhT,KAA1E,OACA,uBAAM4H,UAAW8J,KAAE5K,OAAS,qCAA5B,SAAmE0L,GAAeQ,EAAUlM,UAE5F,qBAAIc,UAAW8J,KAAI,mCAAnB,mDAEA,sBAAI9J,UAAW8J,KAAE/B,SAAjB,UAEG6H,EAAUM,EAAYN,EAAS,EAAG,KAAO,KAGzCC,EAAWA,EAASjK,KAAK,SAAC4H,EAAM3H,GAAP,OAAiBqK,EAAY1C,EAAM,EAAG3H,MAAU,QAG5E,uBAAK7F,UAAW8J,KAAE4G,MAAlB,UACE,uBAAM1Q,UAAW,mDAAjB,SAAsEgK,GAAiBoB,EAAUuF,aAEjG,uBAAK3Q,UAAW8J,KAAE3E,MAAlB,UAAyB,uBAAMnF,UAAW,sCAAjB,SACrB2P,EAAkB7E,GAASK,GAAqBC,EAAWC,IAAqB,OAC3E,eAAC,gBAAD,CAAcvP,KAAK,sB,6BCjE7B,SAAS8U,KACd,MAA8B5M,mBAAS,CAAEjI,MAAO,GAAIsB,SAAU,KAA9D,oBAAOF,EAAP,KAAaC,EAAb,KACQpB,EAAejE,GAAe,SAACuH,GAAD,OAAWA,EAAM3D,QAA/CK,WACFrB,EAAW1C,IAIXwH,EAAWc,cAGjBS,qBAAU,WAERrG,EAASiD,OACR,CAACjD,IAUJ,IAgBgB,EAhBVkW,EAAe,SAACC,GACpB1T,EAAc,6BAAKD,GAAN,mBAAa2T,EAAEC,OAAO3Y,KAAO0Y,EAAEC,OAAO1Y,UAG/C2Y,EAAexE,uBACnB,SAAAsE,GACEA,EAAEG,iBAIFtW,EAAS0B,EAAcc,MAEzB,CAACA,EAAMxC,IAIT,OAAIqB,EAEM,eAAC,IAAD,CAAU0D,IAAK,UAAAD,EAASG,aAAT,eAAgBC,OAAQ,MAI/C,sBAAKG,UAAWkR,KAAOnP,KAAvB,SACE,wBAAM/B,UAAW,aAAekR,KAAO/T,KAAMgU,SAAUH,EAAvD,UACE,qBAAIhR,UAAU,kCAAd,sCAEA,eAAC,SAAD,CACElE,KAAK,QACLsV,YAAY,SACZ/Y,MAAO8E,EAAKpB,MACZ3D,KAAM,QACNiZ,SAAUR,EAEVS,OAAO,EACPC,UAAW,mHAGb,eAAC,iBAAD,CACElZ,MAAO8E,EAAKE,SACZjF,KAAM,WACNiN,KAAM,UACNgM,SAAUR,IAGZ,eAAC,UAAD,CAAQ/U,KAAK,UAAUuJ,KAAK,SAA5B,4CAIA,qBAAGrF,UAAU,kDAAb,yIAC2B,IACzB,eAAC,KAAD,CAAMN,GAAI,gBAAiBM,UAAW,kBAAtC,6HAIF,qBAAGA,UAAU,kDAAb,uFACiB,IACf,eAAC,KAAD,CAAMN,GAAI,mBAAoBM,UAAW,kBAAzC,mIChFH,SAASwR,KACd,MAA8BxN,mBAAS,CAAEjI,MAAO,GAAI3D,KAAM,GAAIiF,SAAU,KAAxE,oBAAOF,EAAP,KAAaC,EAAb,KACQpB,EAAejE,GAAe,SAACuH,GAAD,OAAWA,EAAM3D,QAA/CK,WAEFrB,EAAW1C,IAEjB+I,qBAAU,WAERrG,EAASiD,OACR,CAACjD,IAGHqG,qBAAU,WACT5D,EACE,CAAErB,MAAO,yBAA0B3D,KAAM,QAASiF,SAAU,aAE7D,CAACrB,IAEJ,IAAM6U,EAAe,SAACC,GACpB1T,EAAc,6BAAKD,GAAN,mBAAa2T,EAAEC,OAAO3Y,KAAO0Y,EAAEC,OAAO1Y,UAI/C2Y,EAAexE,uBACnB,SAAAsE,GACEA,EAAEG,iBAEFtW,EAASF,EAAqB0C,MAK7B,CAACxC,EAAUwC,IAIhB,OAAInB,EACM,eAAC,IAAD,CAAU0D,GAAI,CAAEC,SAAU,OAIlC,sBAAKK,UAAWkR,KAAOnP,KAAvB,SACE,wBAAM/B,UAAW,aAAekR,KAAO/T,KAAMgU,SAAUH,EAAvD,UACE,qBAAIhR,UAAU,kCAAd,gFAEA,eAAC,SAAD,CACElE,KAAK,OACLsV,YAAY,qBACZ/Y,MAAO8E,EAAK/E,KACZA,KAAM,OACNiZ,SAAUR,EAEVS,OAAO,EACPC,UAAW,iTAGb,eAAC,SAAD,CACEzV,KAAK,QACLsV,YAAY,SACZ/Y,MAAO8E,EAAKpB,MACZ3D,KAAM,QACNiZ,SAAUR,EAEVS,OAAO,EACPC,UAAW,mHAGb,eAAC,iBAAD,CACElZ,MAAO8E,EAAKE,SACZjF,KAAM,WACNiN,KAAM,UACNgM,SAAUR,IAGZ,eAAC,UAAD,CAAQ/U,KAAK,UAAUuJ,KAAK,SAA5B,0HAIA,qBAAGrF,UAAU,kDAAb,iIACwB,IACtB,eAAC,KAAD,CAAMN,GAAI,SAAUM,UAAW,kBAA/B,oDCjFH,SAASyR,KACd,MAA8BzN,mBAAS,CAAEjI,MAAO,KAAhD,oBAAOoB,EAAP,KAAaC,EAAb,KACA,EAAyCrF,GAAe,SAACuH,GAAD,OAAWA,EAAM3D,QAAjEK,EAAR,EAAQA,WAAY0V,EAApB,EAAoBA,iBAGd/W,EAAW1C,IAGjB+I,qBAAU,WACR5D,EACE,CAAErB,MAAO,2BAEV,IAEHiF,qBAAU,WAERrG,EAASiD,OACR,CAACjD,IAEJ,IAIMqW,EAAexE,uBACnB,SAAAsE,GACEA,EAAEG,iBAQFtW,EAASiC,EAAsBO,EAAKpB,UAKnC,CAACpB,EAAUwC,IAIhB,OAAInB,EACM,eAAC,IAAD,CAAU0D,GAAI,CAAEC,SAAU,QAG/B3D,GAAc0V,EACT,eAAC,IAAD,CAAUhS,GAAI,CAAEC,SAAU,qBAIlC,sBAAKK,UAAWkR,KAAOnP,KAAvB,SACE,wBAAM/B,UAAW,aAAekR,KAAO/T,KAAMgU,SAAUH,EAAvD,UACE,qBAAIhR,UAAU,kCAAd,uIAEA,eAAC,SAAD,CACElE,KAAK,OACLsV,YAAY,oDACZ/Y,MAAO8E,EAAKpB,MACZ3D,KAAM,QACNiZ,SAzCa,SAACP,GACpB1T,EAAc,6BAAKD,GAAN,mBAAa2T,EAAEC,OAAO3Y,KAAO0Y,EAAEC,OAAO1Y,UA0C7CiZ,OAAO,EACPC,UAAW,mHAGb,eAAC,UAAD,CAAQzV,KAAK,UAAUuJ,KAAK,SAA5B,sFAIA,qBAAGrF,UAAU,kDAAb,yGACoB,IAClB,eAAC,KAAD,CAAMN,GAAI,SAAUM,UAAW,kBAA/B,oDCtEH,SAAS2R,KACd,MAA8B3N,mBAAS,CAAE3G,SAAU,GAAIL,UAAW,KAAlE,oBAAOG,EAAP,KAAaC,EAAb,KACA,EAA2DrF,GAAe,SAACuH,GAAD,OAAWA,EAAM3D,QAAnFK,EAAR,EAAQA,WAAY0V,EAApB,EAAoBA,iBAAkBE,EAAtC,EAAsCA,iBAEhCjX,EAAW1C,IAGX4Y,EAAe,SAACC,GACpB1T,EAAc,6BAAKD,GAAN,mBAAa2T,EAAEC,OAAO3Y,KAAO0Y,EAAEC,OAAO1Y,UAG/C2Y,EAAexE,uBACnB,SAAAsE,GACEA,EAAEG,iBAGF,IAAMlU,EAAcI,EAAKE,SACnBL,EAAYG,EAAI,UAEtB0U,QAAQC,IAAI,cAAe/U,GAC3B8U,QAAQC,IAAI,YAAa9U,GAEzBrC,EAASmC,EAAoBC,EAAaC,IAE1CI,EAAc,6BAAKD,GAAN,IAAYE,SAAU,QAClC,CAAC1C,EAAUwC,IAShB,OAAInB,EACM,eAAC,IAAD,CAAU0D,GAAI,CAAEC,SAAU,OAIhCiS,GACFC,QAAQC,IAAI,sBACJ,eAAC,IAAD,CAAUpS,GAAI,CAAEC,SAAU,aAK/B+R,GAAuD,QAAlCtY,EAAU,oBAOlC,sBAAK4G,UAAWkR,KAAOnP,KAAvB,SACE,wBAAM/B,UAAW,aAAekR,KAAO/T,KAAMgU,SAAUH,EAAvD,UACE,qBAAIhR,UAAU,kCAAd,uIAEA,eAAC,iBAAD,CACE3H,MAAO8E,EAAKE,SACZjF,KAAM,WACNiN,KAAM,UACNgM,SAAUR,IAGZ,eAAC,SAAD,CACE/U,KAAK,OACLsV,YAAY,kHACZ/Y,MAAO8E,EAAKH,UACZ5E,KAAM,YACNiZ,SAAUR,EAEVS,OAAO,EACPC,UAAW,KAGb,eAAC,UAAD,CAAQzV,KAAK,UAAUuJ,KAAK,SAA5B,sFAIA,qBAAGrF,UAAU,kDAAb,yGACoB,IAClB,eAAC,KAAD,CAAMN,GAAI,SAAUM,UAAW,kBAA/B,oDAlCE,eAAC,IAAD,CAAUN,GAAI,CAAEC,SAAU,sB,iECjDzBoS,GAAmC,SAAC,GAAwD,IAAtD3S,EAAqD,EAArDA,SAAU/G,EAA2C,EAA3CA,MAAO2Z,EAAoC,EAApCA,SAAmBjS,EAAiB,EAA1BI,QACtEH,EAAS,UAAMkR,KAAOe,IAAb,YAAoBD,EAAWd,KAAOgB,iBAAmB,IAElE/R,EAAU4D,IAAMyI,aAAY,WACL,oBAAhBzM,GAA+BiS,GACxCjS,EAAY1H,KAEb,CAAC0H,EAAa1H,EAAO2Z,IAExB,OACE,sBAAKhS,UAAS,UAAKA,EAAL,6BAA2CG,QAASA,EAAlE,SACE,uBAAMH,UAAU,6BAAhB,SAA8CZ,OCXvC+S,GAAqC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACnD,EAAqBpO,mBAASoO,GAAvBrM,EAAP,qBACM1F,EAAUC,cACV3F,EAAW1C,IAEXqO,EAAiB,SAACjO,GACR,YAAVA,GACFgI,EAAQ7G,QAAQ,CAAEmG,SAAU,aAGhB,iBAAVtH,GACFgI,EAAQ7G,QAAQ,CAAEmG,SAAU,oBAGhB,WAAVtH,GAGFsC,EAAS6B,MAIb,OACE,uBAAKwD,UAAWkR,KAAOmB,KAAvB,UACE,eAAC,GAAD,CAAYha,MAAM,UAAU2Z,SAAyB,YAAfjM,EAA0B5F,QAASmG,EAAzE,wDACA,eAAC,GAAD,CAAYjO,MAAM,eAAe2Z,SAAyB,iBAAfjM,EAA+B5F,QAASmG,EAAnF,mGACA,eAAC,GAAD,CAAYjO,MAAM,SAAS2Z,UAAU,EAAO7R,QAASmG,EAArD,4CAEA,oBAAGtG,UAAU,wDAAb,sUC3BC,SAASsS,KACd,MAA8BtO,mBAAS,CAAE5L,KAAM,GAAI2D,MAAO,GAAIsB,SAAU,KAAxE,oBAAOF,EAAP,KAAaC,EAAb,KACA,EAAgCrF,GAAe,SAAC6H,GAAD,OAAWA,EAAMjE,QAAxD4W,EAAR,EAAQA,SAAU1V,EAAlB,EAAkBA,UAEZlC,EAAW1C,IAEjB+I,qBAAU,WACRrG,EAASiD,OACR,CAACjD,IAGJqG,qBAAU,WACR5D,EAAc,6BAAKD,GAAN,IAAY/E,KAAMma,EAAUxW,MAAOc,OAE/C,IAEH,IAAMgU,EAAe,SAACC,GACpB1T,EAAc,6BAAKD,GAAN,mBAAa2T,EAAEC,OAAO3Y,KAAO0Y,EAAEC,OAAO1Y,UAerD,OACE,2BAAS2H,UAAWkR,KAAOnP,KAA3B,UACE,eAAC,GAAD,CAAaqQ,UAAW,YACxB,wBAAMpS,UAAWkR,KAAOsB,YAAc,kBAAmBrB,SAfxC,SAACL,GACpBA,EAAEG,iBAEFtW,EAASuC,EAAmBC,EAAMC,KAYhC,UACE,eAAC,SAAD,CACEtB,KAAM,OACN1D,KAAM,OACNgZ,YAAa,qBACb/Y,MAAO8E,EAAK/E,KACZiZ,SAAUR,EACV4B,KAAM,WACNnB,OAAO,IAGT,eAAC,SAAD,CACExV,KAAM,OACN1D,KAAM,QACNgZ,YAAa,SACb/Y,MAAO8E,EAAKpB,MACZsV,SAAUR,EACV4B,KAAM,WACNnB,OAAO,IAGT,eAAC,SAAD,CACExV,KAAM,OACN1D,KAAM,WACNgZ,YAAa,uCACb/Y,MAAO8E,EAAKE,SACZgU,SAAUR,EACVxL,KAAM,UACNoN,KAAM,WACNnB,OAAO,IAET,uBAAKtR,UAAWkR,KAAOwB,WAAvB,UACE,eAAC,UAAD,qEACA,eAAC,UAAD,CAAQvS,QA1CK,SAAC2Q,GACpBA,EAAEG,iBAEF7T,EAAc,CAAEhF,KAAMma,EAAUxW,MAAOc,EAAWQ,SAAU,MAuCTvB,KAAK,YAAlD,2DC5EH,IAAM6W,GAA2C,qBAC3CC,GAAyD,4BACzDC,GAAuB,WACvBC,GAAiC,gBACjCC,GAAqC,kBACrCC,GAA6C,sBAC7CC,GAAqC,kBACrCC,GAA6D,8BAE7DC,GAAY,CACvBC,eAAgBT,GAChBU,OAAQT,GACRU,QAAST,GACTU,YAAaT,GACbU,YAAaT,GACbU,gBAAiBT,GACjBU,QAAST,GACTU,gBAAiBT,I,oBCKZ,SAASU,GAAT,GAAyD,IAArCxI,EAAoC,EAApCA,UAAWyI,EAAyB,EAAzBA,WAE9BlZ,EAAW1C,IACXoI,EAAUC,cACVb,EAAWc,cAGX8K,EAAiBtT,GAAe,SAAC6H,GAAD,OAAWA,EAAMa,aAAa+E,gBAAgBC,oBAgBhFqO,EAA2B,GAG3BzI,GAAkBD,GACJC,EAAe3F,QAAO,SAAC8H,GAAD,OAA8BpC,EAAUG,YAAYuE,SAAStC,EAAKhJ,QAE1FC,SAAQ,SAAC+I,GAA+BsG,EAAUjT,KAAK2M,EAAK8C,iBAY5E,IAIIyD,EAAiB,GAqBrBA,EAjBmB,SAAChJ,GAElB,GAAIA,EAAIuC,OAAS,EACf,MAAO,GAGT,IAAI0G,EAAgBjJ,EAAInF,KAAI,SAAAqO,GAAC,OAAIA,KAQjC,OANID,EAAc1G,OAAS,IACzB0G,EAAc1G,OAAS,GAGzB0G,EAAcE,UAEPF,EAGQG,CAAWL,GAgD5B,OACE,2BAAS9T,UAAW8J,KAAE2G,KAAMtQ,QA1BV,WAflBxF,EAAS,CACPmB,KAAMuC,IAER1D,EAAS,CACPmB,KAAMyC,EACNlG,MAAO,cAETsC,EAAS,CACPmB,KAAMoX,GACN9H,cAkBEyI,EACFxT,EAAQQ,KAAK,CACXlB,SAAS,GAAD,OAAKU,EAAQZ,SAASE,SAAtB,YAAkCyL,EAAU5G,KACpD5E,MAAO,CAAEwU,kBAAmB3U,KAG9BY,EAAQQ,KAAK,CACXlB,SAAS,GAAD,OAAKU,EAAQZ,SAASE,SAAtB,YAAkCyL,EAAU5G,KACpD5E,MAAO,CAAEyU,UAAW5U,MAMxB,UACE,uBAAKO,UAAW8J,KAAE4G,MAAQ,QAA1B,UACE,wBAAM1Q,UAAW8J,KAAE2E,OAAS,iCAA5B,cAAgErD,EAAUqD,UAC1E,uBAAMzO,UAAW,mDAAjB,SAAsEgK,GAAiBoB,EAAUuF,gBAEnG,qBAAI3Q,UAAW8J,KAAElH,OAAS,mCAA1B,SAA+DwI,EAAUhT,OACxEyb,EAAc,uBAAM7T,UAAW,wDAAjB,SAA2E4K,GAAeQ,EAAUlM,UAAmB,KACtI,uBAAKc,UAAW8J,KAAE4G,MAAlB,UACE,sBAAK1Q,UAAW8J,KAAEwK,eAAlB,SACGP,GAAkBA,EAAenO,KAAI,SAAC5G,EAAa6G,GAAd,OAnF7B,SAAC7G,EAAa6G,GAC7B,OAAQ,sBAAK7F,UAAW8J,KAAEkG,aAAc/N,MAAO,CAAEgO,gBAAgB,OAAD,OAASjR,EAAT,OAAwB6G,GAkFnB0O,CAASvV,EAAK6G,QAG/E,uBAAK7F,UAAW8J,KAAE3E,MAAlB,UAAyB,uBAAMnF,UAAW,sCAAjB,SAAyD8K,GAASK,GAAqBC,EAAWC,MAAwB,eAAC,gBAAD,CAAcvP,KAAK,qB,yBC9IvK,SAAS0Y,GAAT,GAA+D,IAArCX,EAAoC,EAApCA,WAEzBY,EAAuC1c,GAAe,SAACuH,GAAD,OAAWA,EAAMmQ,GAAGiF,WAAWC,UAEvFC,EAAoC,GAMxC,OALIH,GAAiBZ,IAEnBe,GADAA,EAAqBH,EAAc9K,SACKuK,WAIxC,2BAASlU,UAAW8J,KAAE2G,KAAtB,WAGIoD,GAAcY,GAAiBA,EAAc7O,KAAI,SAAC4I,GAAD,OAAmB,eAACoF,GAAD,CAAUxI,UAAWoD,EAAOqF,WAAYA,GAAiBrF,EAAMC,WAGpIoF,GAAce,GAAsBA,EAAmBhP,KAAI,SAAC4I,GAAD,OAAmB,eAACoF,GAAD,CAAUxI,UAAWoD,EAAOqF,WAAYA,GAAiBrF,EAAMC,cCjB7I,SAASoG,KACd,IAAMla,EAAW1C,IAkBjB,OAhBA+I,qBAAU,WAERrG,EAASiD,OACR,CAACjD,IAEJqG,qBAAU,WAKR,OAJArG,EAAS,CACPmB,KAAMqX,GAAUC,eAChBpU,IAAK/E,EAAQ,iBAAaN,OAErB,WAELgB,EAAS,CAAEmB,KAAMqX,GAAUM,qBAE5B,CAAC9Y,IAGF,2BAASqF,UAAWkR,KAAOnP,KAA3B,UACE,eAAC,GAAD,CAAaqQ,UAAW,iBACxB,sBAAKpS,UAAWkR,KAAOsB,YAAc,kBAArC,SAGE,eAACgC,GAAD,CAAgBX,YAAY,SC7B7B,SAASiB,KACd,IAAQC,EAAOC,cAAPD,GAQFE,EANuBld,GAAe,SAACuH,GAAD,OAAWA,EAAMmB,aAAa+E,mBAAlEC,iBAMgCyP,MAAK,SAAC1H,GAAD,OAA8BA,EAAKhJ,MAAQuQ,KAGxF,OAAKE,EAKH,sBAAKhT,MAAO,CAAEkT,WAAY,IAA1B,SACE,eAAC,GAAD,CAAkBtT,eAAgBoT,MAL7B,K,wBCXJ,SAASG,KAEd,IAAMza,EAAW1C,IAEXwc,EAAuC1c,GAAe,SAACuH,GAAD,OAAWA,EAAMmQ,GAAGiF,WAAWC,UACrFU,EAAmBtd,GAAe,SAACuH,GAAD,OAAWA,EAAMmQ,GAAGiF,WAAWY,cACjEC,EAAkBxd,GAAe,SAACuH,GAAD,OAAWA,EAAMmQ,GAAGiF,WAAWc,SAGhEC,EAAuB,GACvBC,EAAyB,GAG3BjB,GACFA,EAAchQ,SAAQ,SAACjB,GACD,SAAhBA,EAAKtE,OACPuW,EAAW5U,KAAK2C,EAAKiL,QAErBiH,EAAa7U,KAAK2C,EAAKiL,WAM7B,IAAMkH,EAAe,SAACC,EAAqBzU,GACzC,OAAQ,qBAAInB,UAAW8J,KAAE+L,OAAS,sCAA1B,SAA4ED,GAANzU,IAchF,OAXAH,qBAAU,WAKR,OAJArG,EAAS,CACPmB,KAAMqX,GAAUC,eAChBpU,IAAK9E,IAEA,WAELS,EAAS,CAAEmB,KAAMqX,GAAUM,qBAE5B,CAAC9Y,IAGF,uCACE,0BAASqF,UAAW8J,KAAEqF,cAAtB,SACE,qBAAInP,UAAU,4BAAd,yFAGF,2BAASA,UAAW8J,KAAEgM,SAAtB,UAGE,0BAAS9V,UAAW8J,KAAEiM,YAAtB,SACE,eAACvB,GAAD,CAAgBX,YAAY,MAI9B,2BAAS7T,UAAW8J,KAAEkM,UAAtB,UAGE,uBAAKhW,UAAW8J,KAAE2K,cAAlB,UAEE,uBAAKzU,UAAW8J,KAAEmM,aAAlB,UACE,uBAAMjW,UAAW,kCAAjB,kDACA,qBAAIA,UAAW8J,KAAEoM,GAAIjU,MAAO,CAAEkU,MAAO,WAArC,SACGV,EAAW9L,MAAM,EAAG,IAAI/D,KAAI,SAACpC,GAAD,OAAUmS,EAAanS,EAAMA,WAI9D,uBAAKxD,UAAW8J,KAAEmM,aAAlB,UACE,uBAAMjW,UAAW,kCAAjB,yDACA,qBAAIA,UAAW8J,KAAEoM,GAAjB,SACGR,EAAa/L,MAAM,EAAG,IAAI/D,KAAI,SAACpC,GAAD,OAAUmS,EAAanS,EAAMA,cAOlE,uBAAKxD,UAAW8J,KAAEsM,WAAlB,UAEE,uBAAKpW,UAAW8J,KAAEuM,WAAlB,UACE,uBAAMrW,UAAW8J,KAAEwM,UAAY,oCAA/B,mIACA,uBAAMtW,UAAW,qCAAjB,SAAwDuV,OAI1D,uBAAKvV,UAAW8J,KAAEuM,WAAlB,UACE,uBAAMrW,UAAW8J,KAAEwM,UAAY,oCAA/B,4HACA,uBAAMtW,UAAW,qCAAjB,SAAwDqV,mBCzE/D,IAAMkB,GAAY,SAAC,GAAsC,IAO1DC,EAPsBC,EAAmC,EAAnCA,YACpB9b,EAAW1C,IACT8c,EAAOC,cAAPD,GAEFN,EAAuC1c,GAAe,SAACuH,GAAD,OAAWA,EAAMmQ,GAAGiF,WAAWC,UAmC3F,OA9BIF,IACF+B,EAAgB/B,EAAcS,MAAK,SAAAvP,GAAG,OAAIA,EAAInB,MAAQuQ,KAEtDpa,EAAS,CACPmB,KAAMoX,GACN9H,UAAWoL,KAIfxV,qBAAU,WAgBR,MAdoB,SAAhByV,GACF9b,EAAS,CACPmB,KAAMqX,GAAUC,eAChBpU,IAAK9E,IAIW,kBAAhBuc,GACF9b,EAAS,CACPmB,KAAMqX,GAAUC,eAChBpU,IAAK/E,EAAQ,iBAAaN,OAIvB,WACLgB,EAAS,CAAEmB,KAAMqX,GAAUM,qBAE5B,CAAC9Y,EAAU8b,IAGZ,uCACGhC,GAAiB+B,EAAgB,eAAC,GAAD,IAAuB,KAAK,4BCoFrDE,ICvIkBvD,GDuIlBuD,GArHf,WAEE,IAAMrW,EAAUC,cACZb,EAAWc,cAOToW,EAA4B,SAAnBtW,EAAQsW,QAAwC,YAAnBtW,EAAQsW,OAG9CC,EAAsBD,GAAUlX,EAASG,OAASH,EAASG,MAAMoF,gBACjE6R,EAAqBF,GAAUlX,EAASG,OAASH,EAASG,MAAMyU,UAChEyC,EAAwBH,GAAUlX,EAASG,OAASH,EAASG,MAAMwU,kBAEjEtF,EAAoB/W,GAAe,SAACuH,GAAD,OAAWA,EAAMmB,gBAApDqO,gBAEFnU,EAAW1C,IAQjB,OALA+I,qBAAU,WACRrG,EAASiD,KACTjD,E9BuD6C,WAAe,IAAdqE,EAAa,uDAAP,GAGpD,OAAO,SAAUrE,GACbC,MAAMoE,GACD9D,MAAK,SAACC,GAGH,OAAIA,EAAIE,GACGF,EAAIG,OAERE,QAAQC,OAAON,EAAI+D,WAE7BhE,MAAK,SAACC,GAEH,IAAM4b,MAAMC,QAAQ7b,EAAIT,MAGpB,OAAOc,QAAQC,OAAON,GAG1BR,EAAS,CACLmB,KAAMqC,EACN9F,MAAO8C,EAAIT,UAGlByB,OAAM,SAACC,GAKJzB,EAAS,CACLmB,KAAMsC,Q8BvFb6Y,CjClDuBld,wDiCmD/B,CAACY,IAGF,uCACE,eAAC,GAAD,IAEA,wBAAMqF,UAAWkX,IAAYzG,KAA7B,UACE,gBAAC,IAAD,CAAQhR,SAAUmX,GAAuBC,GAAsBC,GAAyBrX,EAAxF,UAEE,eAAC,IAAD,CAAO0X,KAAK,SAAZ,SACE,eAACvG,GAAD,MAGF,eAAC,IAAD,CAAOuG,KAAK,gBAAZ,SACE,eAAC3F,GAAD,MAGF,eAAC,IAAD,CAAO2F,KAAK,mBAAZ,SACE,eAAC1F,GAAD,MAGF,eAAC,IAAD,CAAO0F,KAAK,kBAAZ,SACE,eAACxF,GAAD,MAGF,eAACxS,GAAD,CAAgBgY,KAAK,WAAWC,OAAO,EAAvC,SACE,eAAC9E,GAAD,MAGF,eAACnT,GAAD,CAAgBgY,KAAK,kBAAkBC,OAAO,EAA9C,SACE,eAACvC,GAAD,MAIF,eAAC1V,GAAD,CAAgBgY,KAAK,sBAArB,SAEE,eAAC,GAAD,CAAWV,YAAa,oBAQ1B,eAAC,IAAD,CAAOU,KAAK,mBAAZ,SACE,eAACrC,GAAD,MAGF,eAAC,IAAD,CAAOqC,KAAK,QAAQC,OAAO,EAA3B,SACE,eAAChC,GAAD,MAGF,eAAC,IAAD,CAAO+B,KAAK,YAAZ,SAEE,eAAC,GAAD,CAAWV,YAAa,WAG1B,eAAC,IAAD,CAAOU,KAAK,IAAIC,OAAO,EAAvB,SACE,eAAC,GAAD,SAKHR,GACC,eAAC,IAAD,CAAOO,KAAK,mBAAZ,SACI,eAAC,GAAD,UACE,eAAC,GAAD,CAAkBtV,eAAgBiN,QAKzC+H,GACC,eAAC,IAAD,CAAOM,KAAK,YAAZ,SACI,eAAC,GAAD,UACE,eAAC,GAAD,QAKPL,GACC,eAAC3X,GAAD,CAAgBgY,KAAK,sBAArB,SACI,eAAC,GAAD,UACE,eAAC,GAAD,e,uCE9EHE,GAAqC,CAC9C7S,IAAK,GACLpM,KAAM,GACN0D,KAAM,OACNwb,SAAU,EACVC,IAAK,EACLC,cAAe,EACfC,SAAU,EACVtS,MAAO,EACPN,MAAO,GACPyL,aAAc,GACdoH,YAAa,GACbC,IAAK,EACLzL,WAAY,GAGH0L,GAAqC,CAC9CpS,gBAAiB,CACbC,iBAAkB,GAClBuJ,mBAAmB,EACnBE,kBAAkB,GAItB9K,IAAKiT,GACL/S,qBAAsB,GAGtBuK,gBAAgB,EAChBrO,iBAAkB,OAClBsO,gBA7C0C,CAC1CtK,IAAK,GACLpM,KAAM,GACN0D,KAAM,OACNwb,SAAU,EACVC,IAAK,EACLC,cAAe,EACfC,SAAU,EACVtS,MAAO,EACPN,MAAO,GACPyL,aAAc,GACdoH,YAAa,GACbC,IAAK,GAmCLvM,UAAW,CACP7O,SAAS,EACTnE,KAAM,GACNoW,MAAO,CACHC,OAAQ,KAGhB3C,4BAA4B,GC5EnB+L,GAA+B,CAC1C7b,YAAY,EACZuW,SAAU,GACV1V,UAAW,GACX6U,kBAAkB,EAClBE,kBAAkB,EAClBrS,aAAa,GCDFuY,GAA2B,CACtCC,aAAa,EACbC,SAAS,EACTtD,WAAY,CACVnY,QAAS,KACToY,OAAQ,GACRa,MAAO,EACPF,WAAY,GAEd5F,cAAe,CACbnE,YAAa,GACb/G,IAAK,GACLtF,OAAQ,UACRuP,OAAQ,EACRkC,UAAW,GACXsH,UAAW,GACX7f,KAAM,KCnCG8f,GAAcC,aAAgB,CACvC1X,aH+F+B,WAAoF,IAAnFb,EAAkF,uDAA1EgY,GAAcjB,EAA4D,uCAClH,OAAQA,EAAO7a,MACX,KAAKiC,EACD,OAAO,6BACA6B,GADP,IAEIiP,eAAgB8H,EAAOte,QAG/B,KAAK2F,EACD,OAAO,6BACA4B,GADP,IAEIY,iBAAkBmW,EAAOte,QAGjC,KAAK4F,EACD,OAAO,6BACA2B,GADP,IAEIkP,gBAAiB6H,EAAOte,QAGhC,KAAK6F,EACD,OAAO,6BACA0B,GADP,IAEIwL,UAAWuL,EAAOte,QAG1B,KAAK8F,EACD,OAAO,6BACAyB,GADP,IAEI4F,gBAAiB,CACbC,iBAAkBkR,EAAOte,MACzB2W,mBAAmB,EACnBE,kBAAkB,KAI9B,KAAK9Q,EACD,OAAO,6BACAwB,GADP,IAEI4F,gBAAiB,CACbC,iBAAkB,GAClBuJ,mBAAmB,EACnBE,kBAAkB,KAI9B,KAAK7Q,EACD,OAAO,6BACAuB,GADP,IAEIiP,gBAAgB,IAGxB,KAAKvQ,EACD,OAAO,6BACAsB,GADP,IAEIiP,gBAAgB,IAGxB,KAAKtQ,EACD,OAAO,6BACAqB,GADP,IAEIY,iBAAkBmW,EAAOte,QAGjC,KAAKmG,EACD,OAAO,6BACAoB,GADP,IAEIwE,IAAKuS,EAAOte,QAGpB,KAAKoG,EASL,KAAKC,EACD,OAAO,6BACAkB,GADP,IAEI0E,qBAAqB,GAAD,oBACb1E,EAAM0E,sBADO,CAEhBqS,EAAOte,UAInB,KAAKsG,EACD,OAAO,6BACAiB,GADP,IAEI0E,qBAAsBqS,EAAOte,QAGrC,KAAKwG,EACD,IAAMuZ,EAA2BC,KAAOzY,EAAM0E,qBAAsB,CAIhEgU,QAAS,CACL,CAAC3B,EAAO9J,mBAAoB,GAC5B,CAAC8J,EAAO7J,mBAAoB,EAAGlN,EAAM0E,qBAAqBqS,EAAO9J,wBAGzE,OAAO,6BACAjN,GADP,IAEI0E,qBAAsB8T,IAG9B,KAAKxZ,EACD,OAAO,6BACAgB,GADP,IAEIwE,IAAKiT,GACL/S,qBAAsB,KAG9B,KAAKxF,GACD,OAAO,6BACAc,GADP,IAEIkM,2BAA4B6K,EAAOte,QAG3C,QACI,OAAOuH,IGzNfjE,KFqBuB,WAAsE,IAArEiE,EAAoE,uDAA5DiY,GAAkBlB,EAA0C,uCAC9F,OAAQA,EAAO7a,MACb,KAAK3B,EAWL,KAAKC,EACH,OAAO,6BACFwF,GADL,IAEE5D,YAAY,EACZuW,SAAUoE,EAAOve,KACjByE,UAAW8Z,EAAO5a,MAClBwD,aAAa,IAGjB,KAAKlF,EASL,KAAKC,EACH,OAAO,6BACFsF,GADL,IAEE5D,YAAY,EACZuW,SAAU,GACV1V,UAAW,GACX0C,aAAa,IAGjB,KAAKhF,EACH,OAAO,6BACFqF,GADL,IAEE8R,kBAAkB,EAClBE,kBAAkB,EAClBrS,aAAa,IAGjB,KAAK/E,EACH,OAAO,6BACFoF,GADL,IAEEL,aAAa,EACbmS,kBAAkB,EAClBE,kBAAkB,IAGtB,QACE,OAAOhS,IE7ET6P,GDoCqB,WAAgE,IAA/D7P,EAA8D,uDAAtDkY,GAAgBnB,EAAsC,uCACtF,OAAQA,EAAO7a,MACb,KAAK8W,GACH,OAAO,6BACFhT,GADL,IAEEmY,aAAa,EACbC,SAAS,IAEb,KAAKlF,GACH,OAAO,6BACFlT,GADL,IAEE8U,WAAYiC,EAAOjC,aAEvB,KAAKzB,GACH,OAAO,6BACFrT,GADL,IAEEmY,aAAa,IAEjB,KAAKlF,GACH,OAAO,6BACFjT,GADL,IAEEmY,aAAa,EACbC,SAAS,IAEb,KAAK9E,GACH,OAAO,6BACFtT,GADL,IAEE8P,cAAeiH,EAAOvL,YAG1B,QACE,OAAOxL,M,UElEA2Y,ILAoBpF,GKAmBA,GLC3C,SAAA7T,GACL,IAAIkZ,EAA2B,KAE/B,OAAO,SAAAC,GAAI,OAAI,SAAA9B,GACb,IAAQhc,EAAa2E,EAAb3E,SACAmB,EAAS6a,EAAT7a,KACA4c,EAAY/B,EAAZ+B,QAGNtF,EAOED,GAPFC,eACAC,EAMEF,GANFE,OACAC,EAKEH,GALFG,QACAC,EAIEJ,GAJFI,YACAG,EAGEP,GAHFO,QACAF,EAEEL,GAFFK,YACAC,EACEN,GADFM,gBAIE3X,IAASsX,IAGXoF,EAAS,IAAIG,UAAUhC,EAAO3X,MAG5BwZ,GAAU1c,IAAS2X,IAErB+E,EAAOI,QACPJ,EAAS,MAGPA,IAEFA,EAAOK,OAAS,WAEdle,EAAS,CAAEmB,KAAMuX,KAGnBmF,EAAOM,QAAU,SAAC5X,GAGhBvG,EAAS,CAAEmB,KAAMwX,KAGnBkF,EAAOO,UAAY,SAAC7X,GAElB,IAAQxG,EAASwG,EAATxG,KACFse,EAAYhe,KAAKie,MAAMve,GAE7BC,EAAS,CACPmB,KAAMyX,EACNmB,WAAYsE,KAIhBR,EAAOU,QAAU,WAEfve,EAAS,CAAEmB,KAAM4X,MAKjB8E,GAAU1c,IAAS0X,GACrBgF,EAAOW,KAAKne,KAAKC,UAAL,6BACPyd,GADO,IAEVjc,MAAO9C,QAIX8e,EAAK9B,OK1DLyC,IAJc,kBAAXC,QAAwBA,OAAeC,qCACzCD,OAAeC,qCAAqC,IACrDC,MAE4BC,aAAgBC,KAAOlB,KAQ5CjZ,GAAQoa,aAAYxB,GAAakB,ICrB9C9X,IAAS9B,OACP,eAAC,IAAMma,WAAP,UACE,eAAC,KAAD,CAAeC,SAAS,IAAxB,SACE,eAAC,IAAD,CAAUta,MAAOA,GAAjB,SACE,eAAC,GAAD,UAINpG,SAASyH,eAAe,U,mBChB1B9I,EAAOC,QAAU,CAAC,KAAO,wBAAwB,KAAO,0B,mBCAxDD,EAAOC,QAAU,CAAC,oBAAsB,gDAAgD,KAAO,iCAAiC,YAAc,wCAAwC,aAAe,yCAAyC,SAAW,qCAAqC,UAAY,wC,mBCA1SD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,MAAQ,yBAAyB,OAAS,0BAA0B,OAAS,0BAA0B,MAAQ,yBAAyB,eAAiB,kCAAkC,aAAe,kC,mBCA3PD,EAAOC,QAAU,CAAC,UAAY,sCAAsC,kBAAoB,8CAA8C,cAAgB,0CAA0C,iBAAmB,6CAA6C,6BAA+B,yDAAyD,eAAiB,2CAA2C,gBAAkB,4CAA4C,SAAW,qCAAqC,OAAS,qC,mBCA3gBD,EAAOC,QAAU,CAAC,KAAO,sBAAsB,YAAc,6BAA6B,WAAa,8B,mBCAvGD,EAAOC,QAAU,CAAC,SAAW,kCAAkC,MAAQ,+BAA+B,QAAU,iCAAiC,QAAU,mC,mBCA3JD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,YAAc,6B,mBCA7DD,EAAOC,QAAU,CAAC,cAAgB,qCAAqC,qBAAuB,8C,mBCA9FD,EAAOC,QAAU,CAAC,eAAiB,uCAAuC,gBAAkB,0C,mBCA5FD,EAAOC,QAAU,CAAC,IAAM,yBAAyB,iBAAmB,yC","file":"static/js/main.e66c028f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"app_main__10WoL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalOverlay\":\"modal-overlay_modalOverlay__3ANk1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader_loader__2ygAD\",\"spin\":\"loader_spin__2UBHq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgForCheck\":\"order-details_bgForCheck__1Nj8M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"profile-menu_menu__1b59K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"scrollable-list_main__3ExZa\",\"mainReversed\":\"scrollable-list_mainReversed__2MEoO scrollable-list_main__3ExZa\",\"temporary\":\"scrollable-list_temporary__3ooEJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ingridient-details_wrap__2JGDy\",\"modalHeader\":\"ingridient-details_modalHeader__1R8jG\",\"ingrImage\":\"ingridient-details_ingrImage__64rnG\",\"ingrInfo\":\"ingridient-details_ingrInfo__3NL6K\",\"nutrient\":\"ingridient-details_nutrient__1F9um\",\"nutrientHeader\":\"ingridient-details_nutrientHeader__3BBXY\",\"nutrientValue\":\"ingridient-details_nutrientValue__3ee9n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"app-header_header__1SaPq\",\"header-flex\":\"app-header_header-flex__1b8S3\",\"headerContainer\":\"app-header_headerContainer__kPTHQ app-header_header-flex__1b8S3\",\"userPanel\":\"app-header_userPanel__2F6h8\",\"navBurgerBuilder\":\"app-header_navBurgerBuilder__19Hs1 app-header_header-flex__1b8S3\",\"navButton\":\"app-header_navButton__ZNs7g app-header_header-flex__1b8S3\",\"authButton\":\"app-header_authButton__11phM app-header_header-flex__1b8S3 app-header_navButton__ZNs7g app-header_header-flex__1b8S3\",\"headerButton\":\"app-header_headerButton__qYIya\",\"navlink\":\"app-header_navlink__iUrjH\",\"buttonCaption\":\"app-header_buttonCaption__280yW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerSection\":\"feed_headerSection__2RsgT\",\"feedData\":\"feed_feedData__-mL1q\",\"feedContent\":\"feed_feedContent__2yirZ\",\"feedChart\":\"feed_feedChart__8nM2E\",\"currentOrders\":\"feed_currentOrders__2-UDs\",\"currentChart\":\"feed_currentChart__2oCw-\",\"ul\":\"feed_ul__2xcqb\",\"liElem\":\"feed_liElem__3znO_\",\"totalChart\":\"feed_totalChart__3Vq5L\",\"totalBlock\":\"feed_totalBlock__3KEch\",\"bigHeader\":\"feed_bigHeader__QKejj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"feed-detailed-card_main__2YiY_\",\"number\":\"feed-detailed-card_number__2pOz_\",\"header\":\"feed-detailed-card_header__2vYQw\",\"status\":\"feed-detailed-card_status__2S9tl\",\"ingr\":\"feed-detailed-card_ingr__2CkSv\",\"plane\":\"feed-detailed-card_plane__128B0\",\"ingrList\":\"feed-detailed-card_ingrList__1iqeD\",\"price\":\"feed-detailed-card_price__2xs0z\",\"imgContainer\":\"feed-detailed-card_imgContainer__3ihl5\",\"ingrItem\":\"feed-detailed-card_ingrItem__3cpL_\",\"ingrIdent\":\"feed-detailed-card_ingrIdent__1FuaN\",\"priceContainer\":\"feed-detailed-card_priceContainer__2AFwh\",\"ingrPrice\":\"feed-detailed-card_ingrPrice__2whBU\"};","import {\r\n  TypedUseSelectorHook,\r\n  useSelector as selectorHook,\r\n  useDispatch as dispatchHook\r\n} from 'react-redux';\r\nimport { AppDispatch, RootState, AppThunk } from '../services/store';\r\n\r\n// Теперь этот хук «знает» структуру хранилища\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = selectorHook;\r\n\r\n// Хук не даст отправить экшен, который ему не знаком\r\nexport const useAppDispatch = () => dispatchHook<AppDispatch | AppThunk>();\r\n","// эта функция нормализует работу с временем жизни куки и обрабатывает те случаи, когда время жизни куки не было передано.\r\n// { expires: 20 * 60 } - передать такое в качестве аргумента props, чтобы выставить время жизни куки на 20 минут\r\nexport function setCookie(name: string, value: string | null, props: any) {\r\n  props = props || {};\r\n  let exp = props.expires;\r\n\r\n  if (typeof exp == \"number\" && exp) {\r\n    const d = new Date();\r\n    d.setTime(d.getTime() + exp * 1000);\r\n    exp = props.expires = d;\r\n  }\r\n\r\n  if (exp && exp.toUTCString) {\r\n    props.expires = exp.toUTCString();\r\n  }\r\n\r\n  if (value) { // проверка для ts\r\n    value = encodeURIComponent(value);\r\n  }\r\n\r\n  let updatedCookie = name + \"=\" + value;\r\n  for (const propName in props) {\r\n    updatedCookie += \"; \" + propName;\r\n    const propValue = props[propName];\r\n    if (propValue !== true) {\r\n      updatedCookie += \"=\" + propValue;\r\n    }\r\n  }\r\n  // console.log(`cookie named ${name} updated:`);\r\n  // console.log(updatedCookie);\r\n  document.cookie = updatedCookie;\r\n}\r\n\r\n// Authorization: 'Bearer ' + getCookie('accessToken')\r\n// getCookie('accessToken') вернёт accessToken перет которым 'Bearer '\r\nexport const getCookie = (name: string): string | undefined => {\r\n  const matches = document.cookie.match(\r\n    new RegExp(\r\n      //eslint-disable-next-line\r\n      \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, \"\\\\$1\") + \"=([^;]*)\"\r\n    )\r\n  );\r\n  return matches ? decodeURIComponent(matches[1]) : undefined;\r\n};\r\n\r\n// вернёт либо accessToken без 'Bearer ', либо пустую строку\r\nexport const getAccessTokenLiteral = (): string => {\r\n  let str = getCookie('accessToken');\r\n  if (str) {\r\n    str = str.split(\"Bearer \")[1]\r\n  } else {\r\n    str = '';\r\n  }\r\n  return str;\r\n}\r\n\r\nexport function deleteCookie(name: string) {\r\n  setCookie(name, null, { expires: -1 });\r\n}","export const baseUrl = 'https://norma.nomoreparties.space/api';\r\n\r\nexport const urlApiGetIngridients = baseUrl + '/ingredients';\r\nexport const urlApiPostOrder = baseUrl + '/orders';\r\n\r\n// роуты для авторизации\r\nexport const urlLoginRout = baseUrl + '/auth/login';\r\nexport const urlLogoutRout = baseUrl + '/auth/logout';\r\nexport const urlUserDataEndpoint = baseUrl + '/auth/user'; // - эндпоинт получения данных о пользователе\r\nexport const urlApiToken = baseUrl + '/auth/token'; // для обновления токенов\r\nexport const urlUserRegistration = baseUrl + '/auth/register';\r\n\r\nexport const urlResetPassword = baseUrl + '/password-reset';\r\nexport const urlSetNewPassword = baseUrl + '/password-reset/reset';\r\n\r\n// адреса для WebSocket\r\nexport const wsOrders: string = 'wss://norma.nomoreparties.space/orders'\r\nexport const wsAllOrders: string = wsOrders + '/all';","import {\r\n  fetchLogIn,\r\n  fetchLogOut,\r\n  fetchGetUserData,\r\n  fetchRefreshTokens,\r\n  fetchUserRegistration,\r\n  fetchRequestResetCode,\r\n  fetchResetPassword,\r\n  fetchChangeUserData,\r\n} from '../../utils/api-fetch';\r\nimport { setCookie, deleteCookie, getCookie } from '../../utils/cookie';\r\nimport { TUserForm, TLoginForm } from '../../utils/types';\r\nimport { AppDispatch, AppThunk } from '../store';\r\n\r\nexport const LOGIN_SUCCESSFUL: 'LOGIN_SUCCESSFUL' = 'LOGIN_SUCCESSFUL';\r\nexport const SET_USER_DATA: 'SET_USER_DATA' = 'SET_USER_DATA';\r\nexport const LOGIN_FAILED: 'LOGIN_FAILED' = 'LOGIN_FAILED';\r\nexport const LOGOUT_SUCCESSFUL: 'LOGOUT_SUCCESSFUL' = 'LOGOUT_SUCCESSFUL';\r\nexport const ALLOW_RESET_PASSWORD: 'ALLOW_RESET_PASSWORD' = 'ALLOW_RESET_PASSWORD';\r\nexport const HAS_RESET_PASSWORD: 'HAS_RESET_PASSWORD' = 'HAS_RESET_PASSWORD';\r\n\r\n\r\n// типизирует генератор экшена и экшен в reducer/user\r\nexport interface ILoginSuccessful {\r\n  readonly type: typeof LOGIN_SUCCESSFUL;\r\n  readonly name: string,\r\n  readonly email: string\r\n}\r\n\r\n// генератор экшенов, некоторым с ними удобнее\r\nexport const LoginSuccessful = (name: string, email: string): ILoginSuccessful => {\r\n  return {\r\n    type: LOGIN_SUCCESSFUL,\r\n    name,\r\n    email,\r\n  };\r\n}\r\n\r\n// *****\r\n\r\nexport interface ISetUserData {\r\n  readonly type: typeof SET_USER_DATA;\r\n  readonly name: string,\r\n  readonly email: string,\r\n}\r\n\r\n// *****\r\n\r\nexport interface ILoginFailed {\r\n  readonly type: typeof LOGIN_FAILED;\r\n}\r\n\r\n// *****\r\n\r\nexport interface ILogoutSuccessful {\r\n  readonly type: typeof LOGOUT_SUCCESSFUL;\r\n}\r\n\r\n// *****\r\n\r\nexport interface IAllowResetPassword {\r\n  readonly type: typeof ALLOW_RESET_PASSWORD;\r\n}\r\n\r\n// *****\r\n\r\nexport interface IHasResetPassword {\r\n  readonly type: typeof HAS_RESET_PASSWORD;\r\n}\r\n\r\n// это union-тип, объединяющий в себе все типы экшенов\r\nexport type TUserActionsUnion = ILoginSuccessful | ISetUserData | ILoginFailed | ILogoutSuccessful | IAllowResetPassword | IHasResetPassword;\r\n\r\n\r\n// Миддлвары для thunk:\r\n\r\nexport const registerNewUserThunk: AppThunk = (data: TUserForm) => {\r\n  // console.log('Начинаем регистрацию нового пользователя');\r\n  // console.log('data: ', data);\r\n\r\n  return function (dispatch: AppDispatch) {\r\n    fetchUserRegistration(data)\r\n      .then(({ user, accessToken, refreshToken }) => {\r\n        // поскольку после успешной регистрации сервер возвращает токены и юзернейм, есть смысл автоматом залогинить юзера\r\n        dispatch({\r\n          type: LOGIN_SUCCESSFUL,\r\n          name: user.name,\r\n          email: user.email,\r\n          isLoggedIn: true,\r\n        });\r\n        setCookie(\"accessToken\", accessToken, { expires: 20 * 60 });\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n      })\r\n      .catch(err => {\r\n        // console.log('Ошибка при попытке зарегистрироваться');\r\n        return;\r\n      });\r\n  }\r\n}\r\n\r\nexport const logInAppThunk: AppThunk = (data: TLoginForm) => {\r\n\r\n  return function (dispatch: AppDispatch) {\r\n    fetchLogIn(data)\r\n      .then(({ user, accessToken, refreshToken, success }) => {\r\n        if (success === true) {\r\n          dispatch({\r\n            type: LOGIN_SUCCESSFUL,\r\n            name: user.name,\r\n            email: user.email,\r\n          });\r\n\r\n          setCookie(\"accessToken\", accessToken, { expires: 20 * 60 });\r\n          localStorage.setItem('refreshToken', refreshToken); // по рекомендации наставника этот токен кладём в localStorage\r\n        }\r\n      })\r\n      .catch(err => {\r\n        dispatch({\r\n          type: LOGIN_FAILED,\r\n\r\n        });\r\n\r\n        // console.log('Ошибка при авторизации по логину и паролю');\r\n        // console.log(err);\r\n      });\r\n  };\r\n}\r\n\r\nexport const logOutThunk: AppThunk = () => {\r\n\r\n  return function (dispatch: AppDispatch) {\r\n    // console.log('Logging you out, Shepard'); // ;-)\r\n\r\n    fetchLogOut()\r\n      .then((res) => {\r\n        // console.log('res in logOut: ', res)\r\n        // console.log('res.success', res.success)\r\n        if (res.success === true) {\r\n          // console.log('Now deleting tokens');\r\n          deleteCookie('accessToken');\r\n          localStorage.removeItem('refreshToken');\r\n\r\n          dispatch({\r\n            type: LOGOUT_SUCCESSFUL,\r\n          });\r\n          // console.log('Logged out successfully');\r\n        }\r\n      })\r\n      .catch(err => {\r\n        // console.log('Ошибка при разлогинивании');\r\n        // console.log(err);\r\n\r\n        // в случае ошибки при разлогинивании необходимо удалить токены. Это сразу запретит заходить на роуты, требующие авторизации.\r\n        // console.log('Удаляем токены');\r\n        deleteCookie('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        dispatch({\r\n          type: LOGOUT_SUCCESSFUL,\r\n        });\r\n      });\r\n  };\r\n}\r\n\r\nexport const requestResetCodeThunk: AppThunk = (email: string) => {\r\n\r\n  return function (dispatch: AppDispatch) {\r\n    // console.log(`Запрашиваем код для смены пароля для email: ${email}`);\r\n\r\n    fetchRequestResetCode(email)\r\n      .then(res => {\r\n        // console.log('res in fn requestResetCodeThunk: ', res);\r\n\r\n        if (res.success === true) {\r\n          // отмечаем в хранилище, что можно пустить пользователя на страницу ввода нового пароля\r\n          dispatch({\r\n            type: ALLOW_RESET_PASSWORD,\r\n          });\r\n\r\n          // и ещё в куки запишем, что в течение 1 суток можно зайти на страницу ресета пароля\r\n          setCookie('canResetPassword', 'yes', { expires: 60 * 60 * 1 });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        // console.log('Smth went wrong while requesting for reset code');\r\n        // console.log(err);\r\n      })\r\n  }\r\n}\r\n\r\nexport const setNewPasswordThunk: AppThunk = (newPassword: string, resetCode: string) => {\r\n\r\n  return function (dispatch: AppDispatch) {\r\n    // console.log('newPassword', newPassword);\r\n    // console.log('resetCode', resetCode);\r\n\r\n    fetchResetPassword(newPassword, resetCode)\r\n      .then(res => {\r\n        if (res.success === true) {\r\n          dispatch({\r\n            type: HAS_RESET_PASSWORD,\r\n          });\r\n\r\n          setCookie('canResetPassword', 'no', { expires: -1 });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        // console.log('Smth went wrong while requesting for password change');\r\n        // console.log(err);\r\n      })\r\n  }\r\n}\r\n\r\nexport const patchUserDataThunk: AppThunk = (form: TUserForm, setFormValues) => {\r\n\r\n  return function (dispatch: AppDispatch) {\r\n    // console.log('new Name', form.name);\r\n    // console.log('new Email', form.email);\r\n    // console.log('new Password', form.password);\r\n\r\n    fetchChangeUserData(form)\r\n      .then(res => {\r\n        // console.log(res);\r\n\r\n        dispatch({\r\n          type: SET_USER_DATA,\r\n          name: res.user.name,\r\n          email: res.user.email,\r\n        });\r\n\r\n        setFormValues({ name: res.user.name, email: res.user.email, password: '' });\r\n      })\r\n  }\r\n}\r\n\r\n\r\n/************************************************************************** */\r\n/******   Авто-авторизация, рефреш токенов, получение юзердаты   ********* */\r\n/************************************************************************ */\r\n\r\n\r\n\r\nexport const refreshAccessTokenThunk: AppThunk = (safetyCounter: number) => {\r\n  // console.log('Refreshing tokens now');\r\n\r\n  return function (dispatch: AppDispatch | AppThunk) {\r\n    fetchRefreshTokens()\r\n      .then(({ accessToken, refreshToken }) => {\r\n        // console.log('Setting refreshed tokens');\r\n        setCookie(\"accessToken\", accessToken, { expires: 20 * 60 });\r\n        localStorage.setItem('refreshToken', refreshToken);\r\n\r\n        // safetyCounter на данном этапе равен 1. Эта переменная предотвращает бесконечную петл. getUser >> refreshAccessToken >> getUser, если на сервере что-то сбойнуло.\r\n        dispatch(getUserThunk(safetyCounter));\r\n      })\r\n      .catch((err) => {\r\n        // console.log('.catch case in fn refreshAccessToken: ');\r\n        return;\r\n      })\r\n  }\r\n}\r\n\r\nexport const getUserThunk: AppThunk = (safetyCounter: number) => {\r\n  // console.log('Starting fn getUser with accessToken');\r\n\r\n  /**** safetyCounter - предохранитель, чтобы не было бесконечной рекурсии ****/\r\n  safetyCounter++;\r\n  // console.log('safetyCounter in getUser: ', safetyCounter);\r\n\r\n  // Если по какой-то причине сервер будет обновлять токены через refreshToken, но не будет залогинивать пользователя через accessToken, мы попадём в рекурсию. Будет вызываться getUser >> refreshAccessToken >> getUser >> refreshAccessToken и так до бесконечности. \r\n  // А нужно, чтобы цепочка максимум была такая: getUser >> refreshAccessToken >> getUser\r\n  // Ситуация с бесконечной рекурсией маловероятна и свидетельствует о проблемах на сервере. Однако на всякий случай этот предохранитель со счётчиком  пусть будет. Он остановит бесконечные запросы к серверу.\r\n  if (safetyCounter > 2) {\r\n    return function () {\r\n      // console.log('Вошли в рекурсию в fn getUser. Заканчиваем это безобразие.');\r\n\r\n    }\r\n  };\r\n  /*************************************************************************** */\r\n\r\n  return function (dispatch: AppDispatch | AppThunk) {\r\n    fetchGetUserData()\r\n      .then(({ user, success }) => {\r\n        if (success === true) {\r\n          // console.log('Access granted. Welcome aboard, Commander!');\r\n\r\n          dispatch({\r\n            type: SET_USER_DATA,\r\n            name: user.name,\r\n            email: user.email,\r\n          });\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        // если accessToken есть в браузере, но для сервера он просрочен, получим сообщение 'jwt expired' и пойдём делать рефреш токенов и автологиниться\r\n        if (err.message === 'jwt expired') {\r\n          // console.log('Не получилось добыть юзердату через accessToken. Попробуем обновить токены');\r\n          dispatch(refreshAccessTokenThunk(safetyCounter)); // сюда пробрасываем safetyCounter\r\n        } else {\r\n          // console.log(err);\r\n        }\r\n\r\n      });\r\n  }\r\n}\r\n\r\n// авторизует пользователя, если есть accessToken. Или, если есть refreshToken, рефрешнет токены, а потом авторизует\r\nexport const confirmAuthThunk: AppThunk = () => {\r\n\r\n  return async function (dispatch: AppDispatch | AppThunk) {\r\n    const hasAccessCookie = (getCookie('accessToken') != null); // когда куки удалятся, getCookie вернёт undefined. Проверку можно сделать нестрогой, т.к. в любом случае корректный токен - это строка с length > 0\r\n    const hasRefreshToken = (localStorage.getItem('refreshToken') != null);\r\n\r\n    if (hasAccessCookie) {\r\n      const safetyCounter = 0;\r\n      dispatch(getUserThunk(safetyCounter));\r\n      return 'has logged in';\r\n    }\r\n\r\n    if (!hasAccessCookie && hasRefreshToken) {\r\n      const safetyCounter = 1;\r\n      dispatch(refreshAccessTokenThunk(safetyCounter));\r\n      return 'has refreshed tokens, than logged in';\r\n    }\r\n\r\n    // return console.log('fn confirmAuth found no tokens. You may want to enter your login and password on a /login page');\r\n  }\r\n}\r\n\r\n\r\n","import { getCookie } from './cookie';\r\nimport {\r\n  urlLoginRout,\r\n  urlLogoutRout,\r\n  urlUserDataEndpoint,\r\n  urlApiToken,\r\n  urlUserRegistration,\r\n  urlResetPassword,\r\n  urlSetNewPassword,\r\n} from './api-url';\r\n\r\ntype TRegistrationData = {\r\n  'email': string,\r\n  'password': string,\r\n  'name': string,\r\n}\r\n\r\n// Регистрация нового пользователя\r\nexport function fetchUserRegistration(data: TRegistrationData) {\r\n  return fetch(urlUserRegistration, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    },\r\n    body: JSON.stringify(data), // email, password, name\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // console.log('Возникли проблемы при регистрации нового пользователя:')\r\n      const response = await res.json();\r\n      return Promise.reject(response);\r\n    })\r\n    .then((res) => {\r\n      // console.log('Результаты успешного запроса о регистрации:')\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n}\r\n/*\r\nТело ответа при успешной регистрации:\r\n{\r\n  \"success\": true,\r\n  \"user\": {\r\n      \"email\": \"\",\r\n      \"name\": \"\"\r\n  },\r\n  \"accessToken\": \"Bearer ...\",\r\n  \"refreshToken\": \"\"\r\n} \r\n*/\r\n\r\ntype TLogInData = {\r\n  'email': string,\r\n  'password': string,\r\n}\r\n\r\n// logIN авторизация по email, password\r\n// в аргумент data нужно передать объект ответа от сервера с email, password успешно залогинившегося пользователя\r\nexport function fetchLogIn(data: TLogInData) {\r\n  return fetch(urlLoginRout, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    },\r\n    body: JSON.stringify(data), // email, password\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(await res.json());\r\n    })\r\n    .then((res) => {\r\n      // console.log('Результаты успешного запроса об авторизации:')\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n};\r\n\r\n// запрашивает у сервера код для смены пароля. Код придёт на почту\r\n\r\nexport function fetchRequestResetCode(userEmail: string) {\r\n  // console.log('body', JSON.stringify({ email: userEmail }))\r\n  return fetch(urlResetPassword, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    },\r\n    body: JSON.stringify({ email: userEmail }), // email\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(await res.json());\r\n    })\r\n    .then((res) => {\r\n      // console.log('Результаты запроса о коде восстановления пароля:')\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n}\r\n\r\n// запрос об установке нового пароля\r\nexport function fetchResetPassword(newPassword: string, resetCode: string) {\r\n  return fetch(urlSetNewPassword, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    },\r\n    body: JSON.stringify({\r\n      \"password\": newPassword,\r\n      \"token\": resetCode\r\n    }),\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(await res.json());\r\n    })\r\n    .then((res) => {\r\n      // console.log('Результаты запроса об установке нового пароля:')\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n}\r\n\r\n/****************************************************************************** */\r\n/****************************************************************************** */\r\n\r\n// получение данных о пользователе с помощью accessToken (который живёт 20 мин)\r\nexport function fetchGetUserData() {\r\n  // console.log('accessToken', getCookie('accessToken'));\r\n\r\n  return fetch(urlUserDataEndpoint, {\r\n    headers: {\r\n      method: 'GET',\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n      authorization: getCookie('accessToken') as string,\r\n    },\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // console.log('Ошибка при попытке получить данные пользователя через accessToken. Возможно, так и должно быть, если токен просрочен.');\r\n      return Promise.reject(await res.json());\r\n      // если нет адекватного токена (например, пользователь вылогинился), консоль засирается красными ошибками. \r\n    })\r\n    .then((res) => {\r\n      if (res[\"success\"] === false) {\r\n        // console.error('Getting user data with accessToken failed:', res);\r\n        //return false;\r\n      }\r\n      // console.log('Getting user data with accessToken was successfull')\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n}\r\n/*\r\n{\r\n  \"success\": true,\r\n  \"user\": {\r\n    \"email\": \"\",\r\n    \"name\": \"\"\r\n  }\r\n} \r\n*/\r\n\r\ntype TChangeUserDataArg = {\r\n  \"name\": string,\r\n  \"email\": string,\r\n  \"password\": string,\r\n}\r\n\r\n//запрос на изменение данных о пользователе (имя, мыло, пароль)\r\nexport function fetchChangeUserData(form: TChangeUserDataArg) {\r\n  // console.log('getCookie( accessToken )', getCookie('accessToken'));\r\n  // console.log('body is',\r\n  //   `\r\n  //     {\r\n  //       \"name\": ${form.name},\r\n  //       \"email\": ${form.email},\r\n  //       \"password\": ${form.password},\r\n  //     }`\r\n  // );\r\n\r\n  return fetch(urlUserDataEndpoint, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n      'Authorization': getCookie('accessToken') as string, // у меня записан вместе с 'Bearer '\r\n    },\r\n    body: JSON.stringify({\r\n      \"name\": form.name,\r\n      \"email\": form.email,\r\n      \"password\": form.password,\r\n    })\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // console.log('Ошибка при попытке обновить данные пользователя');\r\n      return Promise.reject(await res.json());\r\n    })\r\n    .then((res) => {\r\n      if (res[\"success\"] === false) {\r\n        // console.error('Updating user data failed:', res);\r\n        //return false;\r\n      }\r\n      // console.log('Updating user data was successfull');\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n}\r\n\r\n\r\n/****************************************************************************** */\r\n/****************************************************************************** */\r\n\r\n// Обновления токенов через refreshToken, если accessToken протух\r\nexport function fetchRefreshTokens() {\r\n  // console.log('начало фетча за рефрешем токенов')\r\n  // console.log('текущий refreshToken', localStorage.getItem('refreshToken'));\r\n  return fetch(urlApiToken, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8',\r\n    },\r\n    body: JSON.stringify({ token: localStorage.getItem('refreshToken') }),\r\n  })\r\n    .then(async (res) => {\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      // console.log('Ошибка при попытке обновить токены через refreshToken. Возможно, так и должно быть, если токены уже были обновлены в параллельной сессии.');\r\n      return Promise.reject(await res.json());\r\n    })\r\n    .then((res) => {\r\n      if (res[\"success\"] === false) {\r\n        // console.error('Couldn`t refresh tokens: ', res);\r\n        return false;\r\n      }\r\n      // console.log('Got fresh tokens: ', res);\r\n      return res;\r\n    });\r\n}\r\n\r\n/* Тело ответа сервера при успешном обновлении токена:\r\n{\r\n  \"success\": true,\r\n  \"accessToken\": \"Bearer ...\",\r\n  \"refreshToken\": \"\"\r\n}  */\r\n\r\n\r\n/****************************************************************************** */\r\n/****************************************************************************** */\r\n\r\n// logOUT с помощью refreshToken\r\nexport function fetchLogOut() {\r\n  // console.log('refreshToken',  localStorage.getItem('refreshToken'))\r\n  return fetch(urlLogoutRout, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    },\r\n    body: JSON.stringify({ token: localStorage.getItem('refreshToken'), }),\r\n  })\r\n    .then(async (res) => {\r\n      // console.log('response from server: ', res)\r\n      if (res.ok) {\r\n        return res.json();\r\n      }\r\n      return Promise.reject(await res.json());\r\n    })\r\n    .then((res) => {\r\n      if (res[\"success\"] === false) {\r\n        // console.error('Didn`t logout properly', res);\r\n      }\r\n      // console.log('Body of response: ')\r\n      // console.log(res);\r\n      return res;\r\n    })\r\n};\r\n/* Варианты ответа от сервера при запросе на логаут:\r\n{\r\n  \"success\": true,\r\n  \"message\": \"Successful logout\"\r\n}\r\n{\r\n    \"success\": false,\r\n    \"message\": \"Token required\"\r\n}\r\n*/","import { getCookie } from '../../utils/cookie';\r\nimport { TIngredientObjData, TOrderData, TDraggableIngr, TModalType } from '../../utils/types';\r\nimport { AppDispatch, AppThunk } from '../store';\r\n\r\n\r\nexport const TOGGLE_MODAL_VISIBILITY: 'TOGGLE_MODAL_VISIBILITY' = 'TOGGLE_MODAL_VISIBILITY';\r\nexport const SET_CURRENT_MODAL_TYPE: 'SET_CURRENT_MODAL_TYPE' = 'SET_CURRENT_MODAL_TYPE';\r\nexport const SET_INGRIDIENT_IN_MODAL: 'SET_INGRIDIENT_IN_MODAL' = 'SET_INGRIDIENT_IN_MODAL';\r\nexport const SET_ORDER_STATE: 'SET_ORDER_STATE' = 'SET_ORDER_STATE';\r\nexport const INGRIDIENT_FETCH_SUCCESS: 'INGRIDIENT_FETCH_SUCCESS' = 'INGRIDIENT_FETCH_SUCCESS';\r\nexport const INGRIDIENT_FETCH_ERROR: 'INGRIDIENT_FETCH_ERROR' = 'INGRIDIENT_FETCH_ERROR';\r\nexport const OPEN_MODAL: 'OPEN_MODAL' = 'OPEN_MODAL';\r\nexport const CLOSE_MODAL: 'CLOSE_MODAL' = 'CLOSE_MODAL';\r\nexport const SET_MODAL_TYPE: 'SET_CURRENT_MODAL_TYPE' = 'SET_CURRENT_MODAL_TYPE';\r\nexport const ADD_BUN: 'ADD_BUN' = 'ADD_BUN';\r\nexport const ADD_SAUCE: 'ADD_SAUCE' = 'ADD_SAUCE';\r\nexport const ADD_MAIN: 'ADD_MAIN' = 'ADD_MAIN';\r\nexport const UPDATE_DRAGGABLE_INGRIDIENTS: 'UPDATE_DRAGGABLE_INGRIDIENTS' = 'UPDATE_DRAGGABLE_INGRIDIENTS';\r\nexport const REMOVE_ALL_INGRIDIENTS: 'REMOVE_ALL_INGRIDIENTS' = 'REMOVE_ALL_INGRIDIENTS';\r\nexport const RESORT_DRAGGABLE_INGRIDIENTS: 'RESORT_DRAGGABLE_INGRIDIENTS' = 'RESORT_DRAGGABLE_INGRIDIENTS';\r\nexport const SET_CONSTRUCTOR_LOADER: 'SET_CONSTRUCTOR_LOADER' = 'SET_CONSTRUCTOR_LOADER';\r\n\r\nexport interface ISetConstructorLoader {\r\n    readonly type: typeof SET_CONSTRUCTOR_LOADER,\r\n    readonly value: boolean,\r\n}\r\n\r\nexport interface IToggleModalVisibility {\r\n    readonly type: typeof TOGGLE_MODAL_VISIBILITY,\r\n    readonly value: boolean,\r\n}\r\n\r\nexport interface ISetCurrentModalType {\r\n    readonly type: typeof SET_CURRENT_MODAL_TYPE,\r\n    readonly value: TModalType,\r\n}\r\n\r\nexport interface ISetIngrInModal {\r\n    readonly type: typeof SET_INGRIDIENT_IN_MODAL,\r\n    readonly value: TIngredientObjData,\r\n}\r\n\r\nexport interface ISetOrderState {\r\n    readonly type: typeof SET_ORDER_STATE,\r\n    readonly value: TOrderData,\r\n}\r\n\r\nexport interface IIngrFetchSuccess {\r\n    readonly type: typeof INGRIDIENT_FETCH_SUCCESS,\r\n    readonly value: Array<TIngredientObjData>,\r\n}\r\n\r\nexport interface IIngrFetchError {\r\n    readonly type: typeof INGRIDIENT_FETCH_ERROR,\r\n}\r\n\r\nexport interface IOpenModal {\r\n    readonly type: typeof OPEN_MODAL,\r\n}\r\n\r\nexport interface ICloseModal {\r\n    readonly type: typeof CLOSE_MODAL,\r\n}\r\n\r\nexport interface ISetModalType {\r\n    readonly type: typeof SET_MODAL_TYPE,\r\n    readonly value: TModalType,\r\n}\r\n\r\nexport interface IAddBun {\r\n    readonly type: typeof ADD_BUN,\r\n    readonly value: TDraggableIngr,\r\n}\r\n\r\nexport interface IAddSauce {\r\n    readonly type: typeof ADD_SAUCE,\r\n    readonly value: TDraggableIngr,\r\n}\r\n\r\nexport interface IAddMain {\r\n    readonly type: typeof ADD_MAIN,\r\n    readonly value: TDraggableIngr,\r\n}\r\n\r\nexport interface IUpdateDraggableIngr {\r\n    readonly type: typeof UPDATE_DRAGGABLE_INGRIDIENTS,\r\n    readonly value: Array<TDraggableIngr>,\r\n}\r\n\r\nexport interface IResortDraggableIngr {\r\n    readonly type: typeof RESORT_DRAGGABLE_INGRIDIENTS,\r\n    readonly indexOfDraggedIngr: number,\r\n    readonly indexOfDroppedIngr: number,\r\n\r\n}\r\n\r\nexport interface IRemoveAllIngr {\r\n    readonly type: typeof REMOVE_ALL_INGRIDIENTS,\r\n}\r\n\r\n// union-тип для типизации в редьюсере\r\nexport type TBurgerVendorActionsUnion = IToggleModalVisibility | ISetCurrentModalType | ISetIngrInModal | ISetOrderState | IIngrFetchSuccess | IIngrFetchError | IOpenModal | ICloseModal | ISetModalType | IAddBun | IAddSauce | IAddMain | IUpdateDraggableIngr | IResortDraggableIngr | IRemoveAllIngr | ISetConstructorLoader;\r\n\r\n\r\n// Миддлвары для thunk:\r\n\r\n// запрос к серверу для получения списка доступных ингридиентов бургера\r\nexport const getIngridientsDataThunk: AppThunk = (url = '') => {\r\n\r\n    //@ts-ignore\r\n    return function (dispatch: AppDispatch) {\r\n        fetch(url)\r\n            .then((res) => {\r\n                /* https://github.com/ev-shamko/react-stellar-burgers/pull/2#discussion_r648116469 \r\n                отличный комментарий от ревьюера про то, как этот условный блок ловит ошибку и перенаправляет ее в .catch - - -  плюс ссылки на доку от developer.mozilla.org */\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(res.status);\r\n            })\r\n            .then((res) => {\r\n\r\n                if (!(Array.isArray(res.data))) {\r\n                    // console.log('Promise.reject(This response is not valid)');\r\n                    // console.log(`Didn't find array in res.data  :-(   Probably got wrong response from ${url}`);\r\n                    return Promise.reject(res);\r\n                }\r\n\r\n                dispatch({\r\n                    type: INGRIDIENT_FETCH_SUCCESS,\r\n                    value: res.data,\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                // console.log(`Error: can't fetch ingridiets data from ${url}`);\r\n                // console.log(`response from server is: `, err);\r\n                // console.log(`err.message is: `, err.message);\r\n\r\n                dispatch({\r\n                    type: INGRIDIENT_FETCH_ERROR,\r\n                })\r\n            });\r\n    };\r\n};\r\n\r\n// отправляет API массив с инфой о заказе, затем меняет стейт редакса в зависимости от ответа\r\nexport const postBurgerOrderThunk: AppThunk = (url = '', createPostBody: any) => {\r\n    return function (dispatch: AppDispatch) {\r\n        dispatch({\r\n            type: SET_CONSTRUCTOR_LOADER,\r\n            value: true,\r\n        });\r\n        fetch(url, {\r\n            method: 'POST',\r\n            //@ts-ignore getCookie может вернуть undefined, это не страшно\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8',\r\n                authorization: getCookie('accessToken'),\r\n            },\r\n            body: JSON.stringify(createPostBody())\r\n        })\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(res.status);\r\n            })\r\n            .then((res) => {\r\n                // console.log('after fetch: Получен номер заказа', res.order.number);\r\n                // сохраняем объект ответа от сервера с инфой о заказе в редакс-хранилище\r\n                dispatch({\r\n                    type: SET_ORDER_STATE,\r\n                    value: res,\r\n                });\r\n                dispatch({\r\n                    type: SET_CONSTRUCTOR_LOADER,\r\n                    value: false,\r\n                });\r\n            })\r\n            .then(() => {\r\n                dispatch({\r\n                    type: OPEN_MODAL,\r\n                });\r\n                dispatch({\r\n                    type: SET_MODAL_TYPE,\r\n                    value: 'OrderDetails',\r\n                });\r\n                dispatch({\r\n                    type: REMOVE_ALL_INGRIDIENTS,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                // console.log(`Error: some error ocured during posting order`);\r\n                // console.log(`response from server is: `, err);\r\n            });\r\n    }\r\n};","import { Route, Redirect } from 'react-router-dom';\r\nimport { useAppSelector } from '../../services/hooks';\r\nimport { RouteProps } from 'react-router';\r\n\r\nexport function ProtectedRoute({ children, ...rest }: RouteProps) {\r\n\r\n  const { isLoggedIn, userChecked } = useAppSelector((store) => store.user);\r\n\r\n  if (localStorage.getItem('refreshToken') && !userChecked) return null;\r\n  \r\n  // useEffect(() => {\r\n  // если совершён прямой переход на защищённые роуты, стейт isLoggedIn всегда будет false. Тогда пользователя редиректнет на /login без лишнего запроса к серверу\r\n  // если пользователь залогинен, произойдёт проверка актуальности токенов, только потом пустит на защищённые роуты\r\n  //   if (isLoggedIn) {\r\n  //     console.log('Auth in ProtectedRout');\r\n  //     dispatch(confirmAuth());\r\n  //   }\r\n  // }, [dispatch, isLoggedIn]);\r\n\r\n  return (\r\n    <Route {...rest} render={({ location }) =>\r\n      isLoggedIn ?\r\n        (children) :\r\n        (<Redirect to={{\r\n          pathname: \"/login\",\r\n          // https://reactrouter.com/web/api/Redirect/to-object \r\n          state: { from: location }, // этот объект будет доступен на странице /login через this.props.location.state. Из него вытащим роут, на который нужно будет вернуться после успешного логина\r\n        }} />)\r\n    } />\r\n  );\r\n}\r\n","import { FC } from 'react';\r\nimport stylesMO from './modal-overlay.module.css';\r\n\r\ntype TModalOverlayProps = {\r\n  handleClick: () => void,\r\n}\r\n\r\nconst ModalOverlay: FC<TModalOverlayProps> = ({ handleClick, children }) => {\r\n\r\n  return (\r\n    <div className={stylesMO.modalOverlay} onClick={handleClick}>\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalOverlay;","import React, { FC, useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport modalStyles from './modal.module.css';\r\nimport ModalOverlay from './modal-overlay/modal-overlay';\r\nimport { CloseIcon } from '@ya.praktikum/react-developer-burger-ui-components';\r\nimport { useAppDispatch, useAppSelector } from '../../services/hooks';\r\n\r\nimport {\r\n    CLOSE_MODAL,\r\n    SET_MODAL_TYPE,\r\n} from '../../services/actions/burgerVendor';\r\n\r\ntype TLocationState = {\r\n    background?: Location;\r\n};\r\n\r\nconst Modal: FC = ({ children }) => {\r\n    const dispatch = useAppDispatch();\r\n    const history = useHistory();\r\n    const location = useLocation<TLocationState | undefined>();\r\n    const currentModalType = useAppSelector(state => state.burgerVendor.currentModalType);\r\n\r\n    const modalRoot = document.getElementById(\"react-modals\") as HTMLElement;\r\n\r\n    // Функция передаётся в onClick <article>. Предотвращает всплытие события клика с модального окна до ModalOverlay. Иначе клик по любому месту модального окна закроет модальное окно. А надо, чтобы так делал только клик по крестику и клик по ModalOverlay.\r\n    const stopPropagation = (event: React.MouseEvent<HTMLElement>) => {\r\n        event.stopPropagation();\r\n    }\r\n\r\n    const handleClose = () => {\r\n        dispatch({\r\n            type: CLOSE_MODAL,\r\n        });\r\n\r\n        dispatch({\r\n            type: SET_MODAL_TYPE,\r\n            value: 'none',\r\n        });\r\n\r\n        // фикс: после закрытия модального окна о свежем заказе не будет редиректа history.goBack();\r\n        if (currentModalType === 'OrderDetails') {\r\n            return history.push({\r\n                // pathname: `/`,\r\n                state: { background: location },\r\n            })\r\n        }\r\n\r\n        history.goBack(); // теперь это работает, потому что содержимое объекта location корректно меняется при открытии модалок, которые открываются в результате работы handleClick(), в котором корректно делается history.push, чтобы прописать в истории нужную \"предыдущую страницу\"\r\n    }\r\n\r\n    // Логика закрытия по esc. Она не работает, если написать ее в компоненте modaloverlay на .tsx  Не понимаю, почему ломается.\r\n    useEffect(() => {\r\n        const escHandler = (event: KeyboardEvent) => {\r\n            if (event.key === 'Escape') {\r\n                handleClose();\r\n            }\r\n        }\r\n        document.addEventListener('keydown', escHandler);\r\n        return () => document.removeEventListener('keydown', escHandler);\r\n    })\r\n\r\n    return ReactDOM.createPortal(\r\n        (\r\n            <ModalOverlay handleClick={handleClose} >\r\n                {/* {console.log('Отладка: рендерю модальное окно')} */}\r\n\r\n                <article className={modalStyles.modal} onClick={stopPropagation}>\r\n                    <button onClick={handleClose} className={modalStyles.closeButton}>\r\n                        <CloseIcon type=\"primary\" />\r\n                    </button>\r\n                    {children}\r\n                </article>\r\n            </ModalOverlay>\r\n        ), modalRoot\r\n    );\r\n}\r\n\r\nexport default Modal;","import stylesID from './ingridient-details.module.css';\r\nimport { TIngredientObjData } from '../../utils/types';\r\n\r\ntype TIngredientDetaisProps = {\r\n    ingredientData: TIngredientObjData\r\n};\r\n\r\nfunction IngredientDetais({ ingredientData }: TIngredientDetaisProps) {\r\n\r\n    return (\r\n        <div className={stylesID.wrap}>\r\n            <h2 className={stylesID.modalHeader + ' text  text_type_main-large mt-10 ml-10 mb-3'} style={{}}>Детали ингредиента</h2>\r\n            <img src={ingredientData['image_large']} alt={ingredientData['name']} className={stylesID.ingrImage + ' mb-4'} />\r\n            <p className={'text  text_type_main-medium mb-4'}>{ingredientData['name']}</p>\r\n\r\n            <ul className={stylesID.ingrInfo}>\r\n                <li className={stylesID.nutrient}>\r\n                    <h5 className={stylesID.nutrientHeader + ' text  text_type_main-default text_color_inactive'}>Калории,ккал</h5>\r\n                    <p className={stylesID.nutrientValue + ' text text_type_digits-default  text_color_inactive'} test-id='ingrDetails_calories'>{ingredientData['calories']}</p>\r\n                </li>\r\n                <li className={stylesID.nutrient + ' text  text_type_main-default text_color_inactive'}>\r\n                    <h5 className={stylesID.nutrientHeader + ' text  text_type_main-default text_color_inactive'}>Белки, г</h5>\r\n                    <p className={stylesID.nutrientValue + ' text text_type_digits-default  text_color_inactive'} test-id='ingrDetails_proteins'>{ingredientData['proteins']}</p>\r\n                </li>\r\n                <li className={stylesID.nutrient + ' text  text_type_main-default text_color_inactive'}>\r\n                    <h5 className={stylesID.nutrientHeader + ' text  text_type_main-default text_color_inactive'}>Жиры, г</h5>\r\n                    <p className={stylesID.nutrientValue + ' text text_type_digits-default  text_color_inactive'} test-id='ingrDetails_fats'>{ingredientData['fat']}</p>\r\n                </li>\r\n                <li className={stylesID.nutrient + ' text  text_type_main-default text_color_inactive'}>\r\n                    <h5 className={stylesID.nutrientHeader + ' text  text_type_main-default text_color_inactive'}>Углеводы, г</h5>\r\n                    <p className={stylesID.nutrientValue + ' text text_type_digits-default  text_color_inactive'} test-id='ingrDetails_carbo'>{ingredientData['carbohydrates']}</p>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IngredientDetais;","import React from \"react\";\r\nimport headerStyles from \"./app-header.module.css\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  Logo,\r\n  BurgerIcon,\r\n  ListIcon,\r\n  ProfileIcon,\r\n} from \"@ya.praktikum/react-developer-burger-ui-components\";\r\n\r\n\r\nfunction AppHeader() {\r\n\r\n  return (\r\n    <header className={headerStyles.header}>\r\n      <div className={headerStyles.headerContainer}>\r\n        <nav className='text text_type_main-default'>\r\n          <ul className={headerStyles.navBurgerBuilder}>\r\n            <li className={headerStyles.headerButton}>\r\n              <Link to='/' className={headerStyles.navlink}>\r\n                <div className={headerStyles.navButton}>\r\n                  <BurgerIcon type=\"primary\" />\r\n                  <span className={headerStyles.buttonCaption}>Конструктор</span>\r\n                </div>\r\n              </Link>\r\n            </li>\r\n            <li className={headerStyles.headerButton}>\r\n              <Link to='/feed' className={headerStyles.navlink}>\r\n                <div className={headerStyles.navButton + '  text_color_inactive'}>{/* вот здесь через state будем менять цвет текста */}\r\n                  <ListIcon type=\"secondary\" />\r\n                  <span className={headerStyles.buttonCaption}>Лента заказов</span>\r\n                </div>\r\n              </Link>\r\n\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <Link to=\"/\">\r\n          <Logo />\r\n        </Link>\r\n\r\n        {/* На будущее:\r\nЛоготип в шапке центруктся через space-between, поэтому левая и правая <nav> должны быть примерно одинаковой ширины, но кнопка авторизации чуть уже.\r\nМожно высчитывать ширину кнопки авторизации через js, но пока захардкодено в css. */}\r\n        <nav className={headerStyles.userPanel + ' text text_type_main-default'}>\r\n          <Link className={headerStyles.authButton + ' ' + headerStyles.navlink + '  text_color_inactive'} to=\"/profile\">\r\n            <ProfileIcon type=\"secondary\" />\r\n            <span className={headerStyles.buttonCaption}>Личный кабинет</span>\r\n          </Link>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default AppHeader;\r\n","import React, { useEffect } from \"react\";\r\nimport cardStyles from \"./ingridient-card.module.css\";\r\nimport { CurrencyIcon, Counter } from \"@ya.praktikum/react-developer-burger-ui-components\";\r\nimport { useDrag, DragPreviewImage } from \"react-dnd\";\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { useAppSelector, useAppDispatch } from '../../services/hooks';\r\n\r\nimport {\r\n    OPEN_MODAL,\r\n    SET_MODAL_TYPE,\r\n    SET_INGRIDIENT_IN_MODAL,\r\n} from '../../services/actions/burgerVendor';\r\nimport { TIngredientObjData, TIngredientInStore, TDraggableIngr } from '../../utils/types';\r\n\r\ntype TIngridientCardProps = {\r\n    objIngridient: TIngredientObjData\r\n};\r\n\r\nconst IngridientCard: React.FC<TIngridientCardProps> = ({ objIngridient }) => {\r\n    const dispatch = useAppDispatch();\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const [{ outline }, dragRef, dragPreviewImg] = useDrag({\r\n        type: 'ingridient',\r\n        item: objIngridient,\r\n\r\n        //добавляет элементу рамку, если элемент в данный момент перетаскивается куда-то\r\n        collect: (monitor) => ({\r\n            outline: monitor.isDragging() ? '1px solid #4C4CFF' : '',\r\n        }),\r\n    });\r\n\r\n    const openIngridientDetails = () => {\r\n        dispatch({\r\n            type: OPEN_MODAL,\r\n        });\r\n        dispatch({\r\n            type: SET_MODAL_TYPE,\r\n            value: 'IngridientDetails',\r\n        });\r\n        dispatch({\r\n            type: SET_INGRIDIENT_IN_MODAL,\r\n            value: objIngridient,\r\n        });\r\n    };\r\n\r\n    const handleClick = () => {\r\n        openIngridientDetails();\r\n\r\n        // при открытии модального окна с информацией об ингридиенте в адресной строке пропишется уникальный роут ингридиента\r\n        history.push({\r\n            pathname: `/ingredients/${objIngridient._id}`,\r\n            state: { ingredientModal: location }, // в background записался текущий объект location, который будет использоваться в App для изменения содержимого адресной строки\r\n        });\r\n    };\r\n\r\n\r\n    /******************************************************************** */\r\n    /******      Логика счётчика выбранных ингридиентов        ********* */\r\n    /****************************************************************** */\r\n\r\n    // стейт для хранения состояния счетчика на карточке ингридиента\r\n    const [ingrCounter, setIngrCounter] = React.useState<number>();\r\n\r\n    // получаем стейт из редакса, из которого можно понять, сколько штук текущего ингридиента положено в конструктор бургера. Какой конкретно стейт нам нужен зависит от ингридиента в пропсах инстанса текущего компонента\r\n\r\n\r\n    // эта переменная даёт инстансу карточки доступ к ингридиентам в конструкторе бургера:\r\n    // либо к булкам, если это карточка булки\r\n    // либо к списку draggableIngridients, если инстанс карточки относится к начинкам\r\n    // на основании этой переменной определяется, что писать в счётчике выбранных ингредиентов на карточке ингридиента\r\n    const bunInConstructor: TIngredientObjData | undefined = useAppSelector((state) => {\r\n        // если у нас тут карточка булки, то в переменную запишется 1 объект: либо пустой, либо с 1 булк ой\r\n        if (objIngridient.type === 'bun') {\r\n            return state.burgerVendor.bun ;\r\n        }\r\n        return undefined;\r\n    });\r\n\r\n    const draggableIngrInConstructor: TDraggableIngr[] | undefined = useAppSelector((state) => {\r\n        // если создаём карточку соуса или начинки, то в переменную запишется массив с объектами ингридиентов, перетащенных в конструктор бургера\r\n        if (objIngridient.type === 'sauce' || objIngridient.type === 'main') {\r\n            return state.burgerVendor.draggableIngridients ;\r\n        }\r\n        return undefined;\r\n    });\r\n\r\n    // в зависимости от типа текущего ингридиента функция проверит, сколько таких ингридиентов лежит в соответствующем стейте в редаксе\r\n    function getNumOfIngridients(): number {\r\n        let counterValue = 0;\r\n\r\n\r\n        // если в стейте лежит именно эта булка, счётчик выставляем на 1, иначе на 0\r\n        // ingrInConstructor будет объектом\r\n        if (objIngridient.type === 'bun') {\r\n            if (bunInConstructor && (bunInConstructor._id === objIngridient._id) ) {\r\n                return 2;\r\n            }\r\n        }\r\n\r\n        // если текущий для данного инстанса ингридиент - это соус или начинка, считаем, сколько таких ингридиентов в конструкторе\r\n        if (draggableIngrInConstructor && (objIngridient.type === 'sauce' || objIngridient.type === 'main')) {\r\n            // если находим в массиве такой же _id, как в этом экземпляре карточки, то увеличиваем счётчик на 1\r\n            draggableIngrInConstructor.forEach((item: TIngredientInStore) => {\r\n                if (item._id === objIngridient._id) {\r\n                    counterValue++;\r\n                }\r\n            });\r\n        }\r\n\r\n        return counterValue;\r\n    }\r\n\r\n    // при каждом изменении стейта в редаксе будет обновляться стейт счетчика ингридиента ingrCounter\r\n    useEffect(() => {\r\n        setIngrCounter(getNumOfIngridients());\r\n        // eslint-disable-next-line\r\n    }, [bunInConstructor, draggableIngrInConstructor, objIngridient]);\r\n\r\n    /**************************************************** */\r\n\r\n    return (\r\n        <>\r\n            <DragPreviewImage connect={dragPreviewImg} src={objIngridient.image} /> {/* При перетаскивании будет показываться только картинка, а не вся карточка ингридиента */}\r\n            <div className={cardStyles.ingrCard + ' mb-8'} onClick={handleClick} ref={dragRef} style={{ outline }}>\r\n                <img src={objIngridient.image} alt={objIngridient.name} className={cardStyles.itemPic} />\r\n                <div className={cardStyles.price}>\r\n                    {/* Если данный ингридиент ни разу не был перетащен в конструктор, счетчик не будет отображаться. Так красивее и не противоречит тз */}\r\n                    {!!ingrCounter && <Counter count={ingrCounter} size=\"default\" />}\r\n                    <span className=\"m-2 text_type_digits-default\">{objIngridient.price}</span>\r\n                    <CurrencyIcon type=\"primary\" />\r\n                </div>\r\n                <h3 className=\"m-1 text_type_main-default\">{objIngridient.name}</h3>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IngridientCard;","import React from \"react\";\r\nimport IngridientCard from \"../ingridient-card/ingrdient-card\";\r\nimport { TIngredientObjData, TIngredientType } from '../../utils/types';\r\n\r\nimport { useAppSelector } from '../../services/hooks';\r\n\r\n\r\n// *********  Как работает этот компонет:\r\n// получаем из стейта полный список ингридиентов (массив объектов)\r\n// на его основании рендерим новый массив по типу ингридиента, полученного в пропсе\r\n\r\ntype TCardListProps = { type: TIngredientType };\r\n\r\nconst CardList: React.FC<TCardListProps> = ({ type }) => {\r\n\r\n    //const { ingridientsState } = React.useContext(IngridientsListContext);\r\n    const arrOfIngridients = useAppSelector((store) => store.burgerVendor.ingridientsData.arrOfIngridients);\r\n    \r\n    // из массива всех ингридиентов выбираем ингридиенты определённого типа (например, только булки: obj.type === 'bun')\r\n    const arrTargetedIngridients = arrOfIngridients.filter(function (obj: TIngredientObjData) {\r\n        return obj.type === type;\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {\r\n                arrTargetedIngridients.map((obj: TIngredientObjData, index: number) => {\r\n                    return (\r\n                        <IngridientCard\r\n                            objIngridient={obj}\r\n                            key={obj._id}                            \r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, { useRef } from \"react\";\r\n// import { LegacyRef } from 'react';\r\nimport ingrStyles from \"./burger-ingredients.module.css\";\r\nimport CardList from \"../ingridients-cardlist/ingridients-cardlist\";\r\n\r\nimport {\r\n    Tab,\r\n} from \"@ya.praktikum/react-developer-burger-ui-components\";\r\n\r\nimport { TIngredientType } from '../../utils/types';\r\n\r\n// type TBunRef = {\r\n//     'bun': LegacyRef<HTMLDivElement>,\r\n//     'sauce': LegacyRef<HTMLDivElement>,\r\n//     'main': LegacyRef<HTMLDivElement>,\r\n// }\r\n\r\n\r\n// <BurgerIngredients openModal={openModal} /> \r\nfunction BurgerIngredients() {\r\n\r\n    // стейт  для переключения активного таба в компоненте <Tab />\r\n    // компонент <Tab /> \"под капотом\" передаёт этому методу в качестве аргумента значение пропса value\r\n    const [currentTab, setCurrentTab] = React.useState<string>(\"bun\");\r\n\r\n    // рефы и scrollIntoRef используются для автопрокрутки блока с ингридиентами при клике на табы с названиями типов ингридиентов\r\n    const bunRef = useRef<HTMLDivElement>(null);\r\n    const sauceRef = useRef<HTMLDivElement>(null);\r\n    const mainRef = useRef<HTMLDivElement>(null);\r\n    const scrollContainerRef = useRef<HTMLDivElement>(null);\r\n\r\n    function scrollIntoRef(tabName: TIngredientType): void {\r\n        // Ниже идёт серия else if плюс двойная проверка currentTab && currentTab.current &&\r\n        // Они нужны, потому что иначе не получилось победить веру тайпскрипта в то, что currentTab может быть либо null, либо набором из всех типов, встречающихся в этом компоненте\r\n\r\n        let currentTab;\r\n\r\n        if (tabName === 'bun') {\r\n            currentTab = bunRef;\r\n        }\r\n        else if (tabName === 'sauce') {\r\n            currentTab = sauceRef;\r\n        }\r\n        else if (tabName === 'main') {\r\n            currentTab = mainRef\r\n        }\r\n\r\n        currentTab && currentTab.current && currentTab.current.scrollIntoView({ block: \"start\", behavior: \"smooth\" });\r\n\r\n    }\r\n\r\n    const handleTabClick = (value: string): void => {\r\n        setCurrentTab(value);\r\n        scrollIntoRef(value as TIngredientType); // сделала как в вебинаре, но не понимаю, почему иначе тс капризничает\r\n    };\r\n\r\n    const handleScroll = () => {\r\n\r\n        // У четырёх перменных ниже используется рернарный оператор. Это нужно, чтобы тайпскрипт не ругался на возможность записи null в переменную\r\n        const scrollContainerPosition = scrollContainerRef.current ? scrollContainerRef.current.getBoundingClientRect().top : 0;\r\n        const bunHeaderPosition = bunRef.current ? bunRef.current.getBoundingClientRect().top : 0;\r\n        const sauceHeaderPosition = sauceRef.current ? sauceRef.current.getBoundingClientRect().top : 0;\r\n        const mainHeaderPosition = mainRef.current ? mainRef.current.getBoundingClientRect().top : 0;\r\n        // console.log(\"scroll container pos: \", scrollContainerPosition);\r\n        // console.log(\"bun header pos: \", bunHeaderPosition);\r\n        // console.log(\"sauce header pos: \", sauceHeaderPosition);\r\n        // console.log(\"main ingridient header pos: \", mainHeaderPosition);\r\n\r\n        // Используем Math.abs, так как число может получиться отрицательное\r\n        const bunDiff = Math.abs(scrollContainerPosition - bunHeaderPosition);\r\n        const sauceDiff = Math.abs(scrollContainerPosition - sauceHeaderPosition);\r\n        const mainDiff = Math.abs(scrollContainerPosition - mainHeaderPosition);\r\n\r\n        if (bunDiff < sauceDiff) {\r\n            setCurrentTab(\"bun\");\r\n        } else if (sauceDiff < mainDiff) {\r\n            setCurrentTab(\"sauce\");\r\n        } else {\r\n            setCurrentTab(\"main\");\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <section className={ingrStyles.ingridiensContainer}>\r\n            {/* {console.log('Рендерю компонент BurgerIngridients')} */}\r\n            <div className={ingrStyles.tabs}>\r\n                {/* Компонент <Tab /> в функцию из onClick={} в качестве аргумента передаёт не event, а значение пропса value={} */}\r\n                <Tab value=\"bun\" active={currentTab === 'bun'} onClick={handleTabClick}>Булки</Tab>\r\n                <Tab value=\"sauce\" active={currentTab === 'sauce'} onClick={handleTabClick}>Соусы</Tab>\r\n                <Tab value=\"main\" active={currentTab === 'main'} onClick={handleTabClick}>Начинки</Tab>\r\n            </div>\r\n\r\n            <div className={ingrStyles.ingrDisplay + ' mt-10'} ref={scrollContainerRef} onScroll={handleScroll}>\r\n\r\n                {/* Булки */}\r\n                <div className={ingrStyles.ingrShowcase} ref={bunRef}>\r\n                    <h3 className=\"text text_type_main-medium\">Булки</h3>\r\n                    <div className={ingrStyles.ingrList}>\r\n                        <CardList type={\"bun\"} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Соусы */}\r\n                <div className={ingrStyles.ingrShowcase} ref={sauceRef}>\r\n                    <h3 className=\"text text_type_main-medium\">Соусы</h3>\r\n                    <div className={ingrStyles.ingrList}>\r\n                        <CardList type={\"sauce\"} />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Начинки */}\r\n                <div className={ingrStyles.ingrShowcase} ref={mainRef}>\r\n                    <h3 className=\"text text_type_main-medium\">Начинки</h3>\r\n                    <div className={ingrStyles.ingrList}>\r\n                        <CardList type={\"main\"} />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default BurgerIngredients;","import React from \"react\";\r\nimport diStyles from \"./draggable-item.module.css\";\r\nimport { useAppSelector, useAppDispatch } from '../../services/hooks';\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport {\r\n    UPDATE_DRAGGABLE_INGRIDIENTS,\r\n} from '../../services/actions/burgerVendor';\r\nimport {\r\n    ConstructorElement,\r\n    DragIcon\r\n} from \"@ya.praktikum/react-developer-burger-ui-components\";\r\n\r\nimport { TIngredientObjData, TFindIngredientInStore, TResortIngrList } from '../../utils/types';\r\n\r\n\r\ntype TDraggableItemProps = {\r\n    ingrInstanceID: number,\r\n    ingrData: TIngredientObjData,\r\n    ingrIndexInStoreArr: number,\r\n    resortIngrList: TResortIngrList,\r\n    findIngridient: TFindIngredientInStore,\r\n}\r\n\r\n\r\nconst DraggableItem: React.FC<TDraggableItemProps> = ({ ingrInstanceID, ingrData, ingrIndexInStoreArr, resortIngrList, findIngridient }) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    const stateDraggableIngridients = useAppSelector((store) => store.burgerVendor.draggableIngridients); // массив объектов  \r\n\r\n    const deleteThisIngridient = () => {\r\n        // копируем данные из стейта родительского компонента в эту переменную\r\n        const arrOfIngrObjects = stateDraggableIngridients.slice(0);\r\n\r\n        // удаляем из массива ингридиент с текущим индексом\r\n        arrOfIngrObjects.splice(ingrIndexInStoreArr, 1);\r\n\r\n        // записываем в стейт новый массив ингридиентов\r\n        dispatch({\r\n            type: UPDATE_DRAGGABLE_INGRIDIENTS,\r\n            value: arrOfIngrObjects,// сюда передаём новый массив\r\n        });\r\n    }\r\n\r\n\r\n    /******* DND-ресортировка *******/\r\n    // остальная логика этой ресортировки в компоненте burger-constructor, т.к. там рендерится контейнер, внутри которого совершаем перетаскивание\r\n\r\n    // для перетаскиваемых элементов:\r\n    const [{ isDragging }, dragItem, draggedPreview] = useDrag(\r\n        () => ({\r\n            type: \"draggableIngridient\",\r\n            item: { ingrInstanceID, ingrIndexInStoreArr },\r\n            collect: (monitor) => ({\r\n                isDragging: monitor.isDragging(),\r\n            }),\r\n            end: (item, monitor) => {\r\n                const didDrop = monitor.didDrop();\r\n                // если не дропнули элемент где положено, то отменяем ресортировку и возвращаем как было. Для этого передаём в resortIngrList() не droppedIndexInStore, а как бы draggedIndexInStore\r\n                if (!didDrop) {\r\n                    resortIngrList(item.ingrInstanceID, item.ingrIndexInStoreArr); // используем данные из объекта item не смотря на то, что в принципе можно взять эти же переменные из замыкания. Не будем извращаться над логикой библиотеки\r\n                }\r\n            },\r\n        }),\r\n        [ingrInstanceID, ingrIndexInStoreArr, resortIngrList]\r\n    );\r\n\r\n    // дополнительно помечаем все перетаскиваемые ингридиенты ещё и как цель дропа\r\n    const [, targetOfDrop] = useDrop(\r\n        // @ts-ignore: god no please no -- я не понимаю, что тут происходит c типами и как пофиксить\r\n        () => ({\r\n            accept: \"draggableIngridient\",\r\n            canDrop: () => false,\r\n            hover({ ingrInstanceID: draggedInstanceId }) { // при включенной проверке типов вот здесь всё ломается. Но не переименовать переменную нельзя. Что с этим делать - я хз.  Проще всего переписать всю логику по образцу из документации для тайпскрипта, но это всё-равно займёт много времени\r\n                if (draggedInstanceId !== ingrInstanceID) {\r\n                    const { ingrIndexInStore: droppedIndexInStore } = findIngridient(ingrInstanceID); // получаем индекс драг-элемента, на который перетащили дроп-элемент\r\n                    resortIngrList(draggedInstanceId, droppedIndexInStore);\r\n                }\r\n            },\r\n        }),\r\n        [findIngridient, resortIngrList]\r\n    );\r\n\r\n    const opacity = isDragging ? 0 : 1;\r\n\r\n    //ref={(node) => dropItem(preview(node))} - напоминаю себе, что такой записью мы передаём в реф 2 функции: dropItem, preview, и обе получают необходимый им аргумент node. Соответственно, один и тот же элемент используется и как превью в процессе перетаскивания и как цель для дропа.\r\n\r\n    return (\r\n\r\n        <div className={diStyles.draggableItime} ref={(node) => targetOfDrop(draggedPreview(node))} style={{ opacity }}>\r\n            <button ref={dragItem} className={diStyles.draggableButton}>\r\n                <DragIcon type=\"primary\" />\r\n            </button>\r\n            <ConstructorElement text={ingrData.name} thumbnail={ingrData.image} price={ingrData.price} handleClose={deleteThisIngridient} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraggableItem;","import s from './loader.module.css';\r\n\r\nexport const Loader = () => {\r\n  return (\r\n    <div className={s.loader}></div>\r\n  )\r\n}","import { format, differenceInDays, formatDistance } from \"date-fns\";\r\n// import {  isToday, isYesterday, formatDistance } from \"date-fns\";\r\nimport { ru } from \"date-fns/locale\";\r\nimport { TIngredientObjData, TOrder } from './types';\r\n\r\nexport const getInstanceID = () => {return (new Date()).getTime()};\r\n\r\nexport const getFormattedDate = (data: string) => {\r\n  const currentDate = new Date();\r\n  const pastDate = new Date(data);\r\n\r\n  const formatedTime =\r\n    format(pastDate, 'HH:mm ') + 'i-' + format(pastDate, 'O'); // https://date-fns.org/v2.26.0/docs/format\r\n\r\n  const diffDays = differenceInDays(currentDate.getTime(), pastDate.getTime());\r\n\r\n  let calendarDate = '';\r\n  if (diffDays === 0) {\r\n    calendarDate = 'Сегодня';\r\n  } else if (diffDays === 1) {\r\n    calendarDate = 'Вчера';\r\n  } else if (diffDays < 5) {\r\n    calendarDate = `${diffDays} дня назад`;\r\n  } else if (diffDays < 20) {\r\n    calendarDate = `${diffDays} дней назад`;\r\n  } else {\r\n    calendarDate = `${formatDistance(new Date(pastDate), Date.now(), { locale: ru })} назад`;\r\n  }\r\n\r\n  const res = `${calendarDate}, ${formatedTime}`;\r\n  return res;\r\n};\r\n\r\n// Предложение от наставника, прикольное:\r\n// export function formatOrderCreationDate (date) {\r\n//   if (isToday(date)) {\r\n//     return `Сегодня, ${format(date, \"kk:mm\", { locale: ru })}`;\r\n//   }\r\n\r\n//   if (isYesterday(date)) {\r\n//     return `Вчера, ${format(date, \"kk:mm\", { locale: ru })}`;\r\n//   }\r\n\r\n//   return `${formatDistance(new Date(date), Date.now(), { locale: ru })} назад`;\r\n// }\r\n\r\n\r\n// неплохо, но чтобы получать форматирование даты как в макете, лучше использую date-fns\r\n// const getTime = (createdAt: string) => {\r\n//   const parseDate = new Date(Date.parse(createdAt));\r\n\r\n//   const options: any = { hour: 'numeric', minute: 'numeric', timeZoneName: 'short' };\r\n//   const formatedTime = new Intl.DateTimeFormat('ru-RU', options).format(parseDate);\r\n\r\n//   return formatedTime;\r\n// }\r\n\r\nexport const getOrderStatus = (orderStatus: string): string => {\r\n  switch (orderStatus) {\r\n    case ('done'): {\r\n      return 'Выполнен';\r\n    }\r\n    case ('pending'): {\r\n      return 'Готовится';\r\n    }\r\n    default: return 'Отменён'\r\n  }\r\n}\r\n\r\nexport const getPrice = (arr: Array<TIngredientObjData>) => {\r\n  return arr.reduce((previousValue: number, currentValue: TIngredientObjData) => {\r\n    return previousValue + currentValue.price;\r\n  }, 0);\r\n}\r\n\r\n// берем массив id ингридиентов из заказа. На его основании собираем полноценный массив ингридиентов. Потом из него можно посчитать стоимость заказа\r\nexport const getCompletedIngrList = (orderData: TOrder, allIngrCatalog: Array<TIngredientObjData>): Array<TIngredientObjData> => {\r\n  const completedIngrList: Array<TIngredientObjData> = [];\r\n\r\n\r\n  for (const ingrId of orderData.ingredients) {\r\n    allIngrCatalog.forEach((ingrObj) => {\r\n      if (ingrObj._id === ingrId) {\r\n        completedIngrList.push(ingrObj)\r\n      }\r\n    })\r\n  }\r\n\r\n  return completedIngrList;\r\n}","/* eslint-disable */\r\nimport React, { useState } from \"react\";\r\nimport { useCallback } from \"react\";\r\nimport s from \"./burger-constructor.module.css\";\r\nimport DraggableItem from \"../draggable-item/draggable-item\";\r\nimport { useDrop } from \"react-dnd\";\r\nimport { useAppSelector, useAppDispatch } from '../../services/hooks';\r\nimport { Loader } from \"../loader/loader\";\r\nimport { getInstanceID } from '../../utils/utils';\r\n\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TIngredientType, TIngredientObjData, TIngredientInStore, TFindIngredientInStore, TResortIngrList, TDraggableIngr } from '../../utils/types';\r\n\r\nimport {\r\n  postBurgerOrderThunk,\r\n  ADD_BUN,\r\n  ADD_SAUCE,\r\n  ADD_MAIN,\r\n  RESORT_DRAGGABLE_INGRIDIENTS,\r\n} from '../../services/actions/burgerVendor';\r\n\r\nimport {\r\n  ConstructorElement,\r\n  Button,\r\n  CurrencyIcon,\r\n} from \"@ya.praktikum/react-developer-burger-ui-components\";\r\n\r\nimport { urlApiPostOrder } from '../../utils/api-url';\r\n\r\nfunction BurgerConstructor() {\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n\r\n  // стейты с данными об ингридиентах бургера\r\n  const { chosenBun, chosenDraggableIngr, isLoggedIn, loaderIsVisible  } = useAppSelector((store) => ({\r\n    chosenBun: store.burgerVendor.bun,\r\n    chosenDraggableIngr: store.burgerVendor.draggableIngridients,\r\n    isLoggedIn: store.user.isLoggedIn,\r\n    loaderIsVisible: store.burgerVendor.constructorLoaderIsVisible,\r\n  }));\r\n\r\n  /******************************************************** */\r\n  /******        DragAndDrop логика              ********* */\r\n  /****************************************************** */\r\n\r\n  // при метком броске карточка ингридиента добавляет ингридиент в конструктор\r\n  function onDropHandler(objIngridient: TIngredientObjData) {\r\n    addIngridientInConstructor(objIngridient);\r\n  };\r\n\r\n  type TGetActionResponse = 'ADD_BUN' | 'ADD_SAUCE' | 'ADD_MAIN' | 'error';\r\n\r\n  // функция возвращает нужный экшн в зависимости от типа ингридиента\r\n  // это нужно для добавления ингридиета в стейт\r\n  const getAction = (typeOfIngridient: TIngredientType): TGetActionResponse => {\r\n    if (typeOfIngridient === 'bun') {\r\n      return ADD_BUN;\r\n    }\r\n\r\n    if (typeOfIngridient === 'sauce') {\r\n      return ADD_SAUCE;\r\n    }\r\n\r\n    if (typeOfIngridient === 'main') {\r\n      return ADD_MAIN;\r\n    }\r\n\r\n    return 'error';\r\n  };\r\n\r\n  const addIngridientInConstructor = (objIngridient: TIngredientObjData) => {\r\n\r\n    const objIngridientWithId: TDraggableIngr = { ...objIngridient, instanceID: getInstanceID() };\r\n\r\n    dispatch({\r\n      type: getAction(objIngridient.type), // в зависимости от типа добавляемого ингридиента сюда подставится нужный экшн\r\n      value: objIngridientWithId,\r\n    })\r\n  };\r\n\r\n  const [{ background }, dropTarget] = useDrop({\r\n    accept: \"ingridient\",\r\n    drop(objIngridient: TIngredientObjData) {\r\n      onDropHandler(objIngridient);\r\n    },\r\n    // когда доносим ингридиент до окна конструктора, окно подсветится градиентом\r\n    collect: monitor => ({\r\n      background: monitor.isOver() ? 'radial-gradient(circle, rgba(63,94,251,0.6110819327731092) 0%, rgba(252,70,107,0) 44%)' : '',\r\n    }),\r\n  });\r\n\r\n\r\n  /******** DND-ресортировка выбранных ингридиентов ********/\r\n  /***************************************************************** */\r\n\r\n  // Реализовано по аналогии с примером из доки: \r\n  // https://codesandbox.io/s/github/react-dnd/react-dnd/tree/gh-pages/examples_hooks_js/04-sortable/cancel-on-drop-outside?from-embed=&file=/src/Container.jsx:121-162\r\n\r\n  // Функция возвращает объект с данными ингридиента и с его индексом в массиве из store. Применяется для получения данных о drop-элементе и drag-элементе\r\n  const findIngridientInStore = useCallback<TFindIngredientInStore>(\r\n    (targetIngrID) => {\r\n      // получаем из хранилища объект ингридиента, у которого objIngr.instanceID равен ID объекта, переданному в функцию в качестве аргумента\r\n      const objIngrData = chosenDraggableIngr.filter((objIngr: TIngredientInStore) => objIngr.instanceID === targetIngrID)[0];\r\n      return {\r\n        objIngrData, // в это свойство кладём объект ингридиента из редакс-хранилища\r\n        ingrIndexInStore: chosenDraggableIngr.indexOf(objIngrData), // сюда запишется индекс, по которому данный объект ингридиента находится в массиве chosenDraggableIngr\r\n      };\r\n    },\r\n    [chosenDraggableIngr]\r\n  );\r\n\r\n  // Ставит драг-ингридиент перед тем ингридиентом, на который его перетащили\r\n  const resortIngrList: TResortIngrList =\r\n    // draggedInstanceId - укикальный ID ингридиента, который мы перетаскиваем. Является свойством объекта ингридиента.\r\n    // droppedIndexInStore - индекс (в массиве хранилища) дроп-элемента, на который перетащили драг-элемент\r\n    (draggedInstanceId: number, droppedIndexInStore: number) => {\r\n      const { ingrIndexInStore } = findIngridientInStore(draggedInstanceId); // получаем порядковый id ингридиента, на который дропнули перетаскиваемый ингридиент\r\n\r\n      dispatch({\r\n        type: RESORT_DRAGGABLE_INGRIDIENTS,\r\n        indexOfDraggedIngr: ingrIndexInStore,\r\n        indexOfDroppedIngr: droppedIndexInStore,\r\n      });\r\n    };\r\n\r\n  // помечаем контейнер, внутри которого может происходить ресортировка списка начинок бургера\r\n  const [, dropResort] = useDrop(() => ({ accept: \"draggableIngridient\" }));\r\n\r\n  /************************************************************************************** */\r\n  /******   Остальная логика: стейты, подсчёты цены, отправка заказа, рендер   ********* */\r\n  /************************************************************************************ */\r\n\r\n  // подсчитываем стоимость всех ингридиентов, инфу берём из стейта редакса\r\n  function getTotalPrice(): number {\r\n    const priceOfBun = chosenBun.price * 2; // цена верхней и нижней булки\r\n    let priceOfDraggableIngr = 0;\r\n\r\n    // если есть ингридиенты между булками, то считаем их стоимость\r\n    if (chosenDraggableIngr.length > 0) {\r\n      priceOfDraggableIngr = chosenDraggableIngr.reduce(function (summ: number, ingridient: TIngredientInStore) {\r\n        return summ + Number(ingridient.price);\r\n      }, 0);\r\n    }\r\n\r\n    return priceOfBun + priceOfDraggableIngr;\r\n  };\r\n\r\n  // функция создаёт объект тела POST-запроса к API \r\n  // Его структура такая:  { \"ingredients\": [\"609646e4dc916e00276b286e\", \"609646e4dc916e00276b2870\"]  }  \r\n  // Первый id в формате строки - это булка, последующие - остальные ингридиенты*/\r\n  function createPostBody() {\r\n    const arrWithOrderData = [];\r\n\r\n    // добавляем id булки\r\n    arrWithOrderData.push(chosenBun[\"_id\"]);\r\n\r\n    // пушим id остальных ингридиентов в массив с данными о заказе\r\n    chosenDraggableIngr.forEach((obj: TIngredientInStore) => {\r\n      arrWithOrderData.push(obj[\"_id\"]);\r\n    });\r\n\r\n    return { \"ingredients\": arrWithOrderData };\r\n  }\r\n\r\n  const sendOrderToApi = async () => {\r\n    // TODO: \r\n    // Показать лоудер -> автологин -> если норм, сделать заказ -> после ответа убрать лоудер\r\n    if (!isLoggedIn) {\r\n      // ! добавить заголовок авторизации в фетч\r\n      return (history.push({ pathname: '/login' }));\r\n    }\r\n\r\n    return dispatch(postBurgerOrderThunk(urlApiPostOrder, createPostBody));\r\n  };\r\n\r\n  return (\r\n    <section className={s.container} ref={dropTarget} style={{ background }}>\r\n      {/* {console.log('Рендерю >>BurgerConstructor<<')} */}\r\n      { loaderIsVisible ? <div className={s.loader}><Loader /></div> : null}\r\n\r\n\r\n      <ul className={s.chosenIngridients + ' mb-6'}>\r\n\r\n        {/* Верхняя булка: отрисуется, если пользователь уже выбрал булку  */}\r\n        {(chosenBun.name) &&\r\n          (\r\n            <li className={s.topIngridinet}>\r\n              <ConstructorElement type=\"top\" isLocked={true} text={chosenBun.name + \" (верх)\"} thumbnail={chosenBun.image} price={chosenBun.price} />\r\n            </li>\r\n          )\r\n        }\r\n\r\n        {/* Контейнер с настраиваемыми ингридиентами: отрисуется, если что-то уже выбрано */}\r\n        {(chosenDraggableIngr.length > 0) &&\r\n          (\r\n            <li className={s.draggableIngridinetContainer} ref={dropResort}>\r\n              {chosenDraggableIngr.map((ingr: TIngredientInStore, index: number) => {\r\n                return (\r\n                  <DraggableItem\r\n                    key={ingr.instanceID}\r\n                    ingrInstanceID={ingr.instanceID}\r\n                    ingrData={ingr}\r\n                    ingrIndexInStoreArr={index}\r\n                    resortIngrList={resortIngrList}\r\n                    findIngridient={findIngridientInStore}\r\n                  />\r\n                )\r\n              })\r\n              }\r\n            </li>\r\n          )\r\n        }\r\n\r\n        {/* Нижняя булка: отрисуется, если пользователь уже выбрал булку  */}\r\n        {(chosenBun.name) &&\r\n          (\r\n            <li className={s.bottomIngridinet}>\r\n              <ConstructorElement type=\"bottom\" isLocked={true} text={chosenBun.name + \" (низ)\"} thumbnail={chosenBun.image} price={chosenBun.price} />\r\n            </li>\r\n          )\r\n        }\r\n\r\n      </ul>\r\n\r\n      <div className={s.totalBar}>\r\n        {/* Блок со стоимостью и кнопкой заказа: Если пользователь не выбрал бургерную булку, то этот блок не будет отрисовываться */}\r\n        {/* Если не выбран ни один ингридиент, отобразится подсказка про перетаскивание. Если не выбрана булка, появится подсказка про булку */}\r\n        {(chosenBun.name) &&\r\n          (\r\n            <>\r\n              <span className={'text text_type_digits-medium mr-10'}>{getTotalPrice()}<CurrencyIcon type={'primary'} /></span>\r\n              <Button type=\"primary\" size=\"large\" onClick={sendOrderToApi}>Оформить заказ</Button>\r\n            </>\r\n          )\r\n          ||\r\n          (\r\n            <div style={{ margin: '0 auto' }}>\r\n              {(!chosenBun.name) && (chosenDraggableIngr.length < 1) &&\r\n                (\r\n                  <span className={'text text_type_main-medium mr-10'} style={{ textAlign: 'center', justifyContent: 'center', display: 'table-cell', paddingRight: '40px' }}>{/* TODO: вынести стили в module.css */}\r\n                    Перетащите сюда ингридиенты, <br></br>которые хотите добавить в бургер\r\n                  </span>\r\n                )\r\n                ||\r\n                (\r\n                  <span className={'text text_type_main-medium mr-10'} style={{}}>\r\n                    Выберите булку для бургера\r\n                  </span>\r\n                )\r\n              }\r\n            </div>\r\n          )\r\n        }\r\n\r\n      </div>\r\n\r\n    </section>\r\n  );\r\n  // }\r\n}\r\n\r\nexport default BurgerConstructor;","import { FC } from 'react';\r\nimport stylesOD from './order-details.module.css';\r\nimport { useAppSelector } from '../../services/hooks';\r\n\r\n\r\nconst OrderDetais: FC = () => {\r\n    const orderState = useAppSelector((store) => store.burgerVendor.orderData);\r\n\r\n    return (\r\n        <>\r\n            <h2 className={'text text_type_digits-large mt-30 mb-2'}>{orderState.order.number}</h2>\r\n            <p className={'text text_type_main-medium mb-15'}>идентификатор заказа</p>\r\n            <div className={stylesOD.bgForCheck + ' mb-15'}></div>\r\n            <p className={\"text text_type_main-default mb-2\"}>Ваш заказ начали готовить</p>\r\n            <p className={\"text text_type_main-default text_color_inactive mb-30\"}>Дождитесь готовности на орбитальной станции</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default OrderDetais;","import s from './burger-vendor.module.css';\r\nimport BurgerIngredients from '../burger-ingredients/burger-ingredients';\r\nimport BurgerConstructor from '../burger-constructor/burger-constructor';\r\nimport Modal from '../modal/modal';\r\nimport OrderDetails from '../order-details/order-details';\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport { useAppSelector } from '../../services/hooks';\r\n\r\nfunction BurgerVendor() {\r\n\r\n  /******************************************************** */\r\n  /******      Импорт стейтов из редакса        ********* */\r\n  /****************************************************** */\r\n\r\n  const { modalIsVisible, currentModalType, arrOfIngridients, dataIsLoading, dataHasError } = useAppSelector((store) => ({\r\n    modalIsVisible: store.burgerVendor.modalIsVisible,\r\n    currentModalType: store.burgerVendor.currentModalType,\r\n    ingrInModalData: store.burgerVendor.ingrInModalData,\r\n    arrOfIngridients: store.burgerVendor.ingridientsData.arrOfIngridients,\r\n    dataIsLoading: store.burgerVendor.ingridientsData.ingrDataIsLoading,\r\n    dataHasError: store.burgerVendor.ingridientsData.ingrDataHasError,\r\n  }));\r\n\r\n  /******************************************************** */\r\n  /******    Получение массива данных данных от API     ********* */\r\n  /****************************************************** */\r\n\r\n  // это можно раскомментировать, если мы хотим обновления данных об ингридиентах при каждом переходе на BurgerVendor. Однако в 2021 в этом нет необходимости: стоимость ингредиентов и их наличие не меняется, сервер всегда отдаёт одно и то же.\r\n\r\n  // useEffect(() => dispatch(getIngridientsDataThunk(urlApiGetIngridients)), [dispatch]);\r\n\r\n\r\n  /******************************************************** */\r\n  /************      Рендер      ************************* */\r\n  /****************************************************** */\r\n\r\n  // https://www.bxnotes.ru/conspect/lib/react/react-notes/rendering/ - хорошая статья по рендерингу в реакте, надо заюзать\r\n  // https://max-frontend.gitbook.io/redux-course-ru-v2/sozdanie/optimizatsiya-refaktoring/optimizatsiya-pererisovok - статья про оптимизацию рендера\r\n\r\n\r\n  return (\r\n    <>\r\n      <section className={s.headerSection}>\r\n        <h1 className=\"text text_type_main-large\">Соберите бургер</h1>\r\n      </section>\r\n\r\n      <section className={s.constructorContainer}>\r\n\r\n        {/* Здесь стоит условие: отрисовка компонентов только после успешного получения данных правильного формата\r\n* Это очень важно для компонента  BurgerConstructor, который роняет приложение при первичном рендере без fetch или без правильного массива данных с ингридиентами\r\n\r\n***Про условия отрисовки:\r\nУсловие (!!arrOfIngridients) пересчитается в false как при первичном рендере до фетча, так и при .catch в fetch. Предотвращает падение приложения, если arrOfIngridients === undefined, что может быть при падении сервера или изменении структуры ответа от api \r\nУсловие (!!arrOfIngridients.length) уточняет проверку !!arrOfIngridient.  Если сервер вернёт пустой массив, мы не будем отображать компоненты конструктора бургера */}\r\n        {!dataIsLoading && !dataHasError && !!arrOfIngridients && !!arrOfIngridients.length && (\r\n          <>\r\n            <DndProvider backend={HTML5Backend}>\r\n              <BurgerIngredients />{/* попап  - ingrInModalData */}\r\n              <BurgerConstructor />{/* попап  - orderData */}\r\n            </DndProvider>\r\n\r\n            {/* рендер попапа с деталями заказа - orderData */}\r\n            {modalIsVisible && (currentModalType === 'OrderDetails') &&\r\n              <Modal>\r\n                <OrderDetails />\r\n              </Modal>\r\n            }\r\n          </>\r\n        )}\r\n      </section>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BurgerVendor;","import s from './feed-detailed-card.module.css';\r\nimport { useAppSelector } from '../../services/hooks';\r\nimport { getOrderStatus, getPrice, getCompletedIngrList, getFormattedDate } from '../../utils/utils';\r\nimport { CurrencyIcon } from \"@ya.praktikum/react-developer-burger-ui-components\";\r\nimport { TIngredientObjData, } from '../../utils/types';\r\n\r\n\r\n\r\n\r\nexport const FeedDetailedCard = () => {\r\n  const orderData = useAppSelector(store => store.ws.detailedOrder);\r\n  const allIngrCatalog = useAppSelector((state) => state.burgerVendor.ingridientsData.arrOfIngridients);\r\n\r\n  // собираем массив с данными об используемых ингридиентах\r\n  let arrOfUsedIngr: null | Array<TIngredientObjData> = null;\r\n  let bunItem: null | TIngredientObjData = null;\r\n  let restIngr: null | Array<TIngredientObjData> = null;\r\n\r\n  if (allIngrCatalog && orderData) {\r\n    \r\n    arrOfUsedIngr = allIngrCatalog.filter((ingr: TIngredientObjData) => orderData.ingredients.includes(ingr._id));\r\n\r\n    restIngr = allIngrCatalog.filter((ingr: TIngredientObjData) => orderData.ingredients.includes(ingr._id));\r\n\r\n\r\n    bunItem = restIngr[0];\r\n    restIngr = restIngr.slice(1,);\r\n\r\n    //TODO: сделать в arrOfUsedIngr схлопывание повторяющихся ингридиентов, изменить структуру объекта (добавить поле с количеством повторений ингридиента), переписать getListItem() под новую структуру\r\n  }\r\n\r\n  // вернёт круглую картинку ингредиента\r\n  const getIcon = (url: string) => {\r\n    return (<div className={s.imgContainer} style={{ backgroundImage: `url(${url})` }}></div>)\r\n  }\r\n\r\n  const getListItem = (ingrObj: TIngredientObjData | null, amount: number = 1, index: number) => {\r\n\r\n    return (\r\n      ingrObj ?\r\n        (\r\n          <li className={s.ingrItem} key={index}>\r\n            <div className={s.ingrIdent}>\r\n              {getIcon(ingrObj.image_mobile)}\r\n              <span className={' text text_type_main-default'}>{ingrObj.name}</span>\r\n            </div>\r\n            <div className={s.priceContainer}>\r\n              <span className={s.ingrPrice + ' text text_type_digits-default'}>{amount} x {ingrObj.price}</span>\r\n              <CurrencyIcon type=\"primary\" />\r\n            </div>\r\n          </li>\r\n        )\r\n        :\r\n        null\r\n    )\r\n  }\r\n\r\n  return (\r\n    <article className={s.main}>\r\n      <span className={s.number + ' text text_type_digits-default mb-10'}> {orderData.number} </span>\r\n      <h4 className={s.header + ' text text_type_main-medium mb-2'}> {orderData.name} </h4>\r\n      <span className={s.status + ' text text_type_main-default mb-15'}>{getOrderStatus(orderData.status)}</span>\r\n\r\n      <h5 className={s + ' text text_type_main-medium mb-6'}>Состав:</h5>\r\n\r\n      <ul className={s.ingrList}>\r\n        {/* Булка */}\r\n        {bunItem ? getListItem(bunItem, 2, 999) : null}\r\n\r\n        {/* Остальные ингредиенты */}\r\n        {restIngr ? restIngr.map( (ingr, index) => getListItem(ingr, 1, index)) : null}\r\n      </ul>\r\n\r\n      <div className={s.plane}>\r\n        <span className={' text text_type_main-default text_color_inactive'}>{getFormattedDate(orderData.createdAt)}</span>\r\n\r\n        <div className={s.price}><span className={' text text_type_digits-default mr-2'}>\r\n          { arrOfUsedIngr ? ( getPrice(getCompletedIngrList(orderData, allIngrCatalog)) ) : null}\r\n          </span><CurrencyIcon type=\"primary\" /></div>\r\n      </div>\r\n    </article>\r\n  )\r\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport styles from './auth-form.module.css';\r\nimport { Link, Redirect, useLocation } from 'react-router-dom';\r\nimport { logInAppThunk, confirmAuthThunk } from '../services/actions/userActions';\r\n\r\nimport { useAppDispatch, useAppSelector } from '../services/hooks';\r\n\r\nimport {\r\n  Input,\r\n  PasswordInput,\r\n  Button,\r\n} from '@ya.praktikum/react-developer-burger-ui-components';\r\n\r\nexport function LoginPage() {\r\n  const [form, setFormValues] = useState({ email: '', password: '' });\r\n  const { isLoggedIn } = useAppSelector((store) => store.user); // TODO: типизируем в следующем спринте\r\n  const dispatch = useAppDispatch();\r\n\r\n  // https://reactrouter.com/web/api/Hooks/uselocation\r\n  // https://reactrouter.com/web/api/location \r\n  const location = useLocation<{ from: Location }>(); // создаст объект, в котором будут и текущий адрес, и адрес, откуда пришли, если пришли из ProtectedRoute (location.state.from.pathname)\r\n\r\n  // автологин\r\n  useEffect(() => {\r\n    // console.log('Auth in /login');\r\n    dispatch(confirmAuthThunk());\r\n  }, [dispatch]);\r\n\r\n  // автоподстановка корректного логина и пароля  ВЫКЛЮЧИТЬ НА ПРОДЕ\r\n  // useEffect(() => {\r\n  //   setFormValues(\r\n  //     { email: 'shamko.e.v@yandex.ru', password: '123123' }\r\n  //   );\r\n  // }, [isLoggedIn, location]);\r\n\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = useCallback(\r\n    e => { \r\n      e.preventDefault();\r\n      // console.log('Sending login request');\r\n      // console.log(form);\r\n\r\n      dispatch(logInAppThunk(form));\r\n    },\r\n    [form, dispatch]\r\n  );\r\n\r\n  // редирект сработает и при авторизации, и при прямом переходе на страницу по ссылке\r\n  if (isLoggedIn) {\r\n    // console.log('IS LOGGED IN, location:  ', location)\r\n    return (<Redirect to={ location.state?.from || '/'} />); // пропс to={} примет либо объект location от предыдущей страницы (он м.б. передан в пропсах), и вытащит оттуда роут предыдущей страницы, на которую нужно вернуть пользователя. Либо примет путь '/'\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <form className={'auth-form ' + styles.form} onSubmit={handleSubmit}>\r\n        <h1 className='text text_type_main-medium mb-6'>Вход</h1>\r\n\r\n        <Input\r\n          type='email'\r\n          placeholder='E-mail'\r\n          value={form.email}\r\n          name={'email'}\r\n          onChange={handleChange}\r\n\r\n          error={false}\r\n          errorText={'Введите корректный e-mail'}\r\n        />\r\n\r\n        <PasswordInput\r\n          value={form.password}\r\n          name={'password'}\r\n          size={'default'}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <Button type=\"primary\" size=\"medium\">\r\n          Войти\r\n        </Button>\r\n\r\n        <p className=\"text text_type_main-default text_color_inactive\">\r\n          Вы — новый пользователь?{\" \"}\r\n          <Link to={\"/registration\"} className={\"text_color_link\"}>\r\n            Зарегистрироваться\r\n          </Link>\r\n        </p>\r\n        <p className=\"text text_type_main-default text_color_inactive\">\r\n          Забыли пароль?{\" \"}\r\n          <Link to={\"/forgot-password\"} className={\"text_color_link\"}>\r\n            Восстановить пароль\r\n          </Link>\r\n        </p>\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../services/hooks';\r\nimport styles from './auth-form.module.css';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { confirmAuthThunk, registerNewUserThunk } from '../services/actions/userActions';\r\n\r\nimport {\r\n  Input,\r\n  PasswordInput,\r\n  Button,\r\n} from '@ya.praktikum/react-developer-burger-ui-components';\r\n\r\nexport function RegistrationPage() {\r\n  const [form, setFormValues] = useState({ email: '', name: '', password: '' });\r\n  const { isLoggedIn } = useAppSelector((store) => store.user);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    // console.log('Auth in /registration');\r\n    dispatch(confirmAuthThunk());\r\n  }, [dispatch]);\r\n\r\n   // автоподстановка корректного логина и пароля  ВЫКЛЮЧИТЬ НА ПРОДЕ\r\n   useEffect(() => {\r\n    setFormValues(\r\n      { email: 'shamko.e.v+1@yandex.ru', name: 'User1', password: '123123' }\r\n    );\r\n  }, [isLoggedIn]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // после регистрации редиректит на /login\r\n  const handleSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      // console.log('Sending registration request');\r\n      dispatch(registerNewUserThunk(form));\r\n\r\n      // if (true) {\r\n      //   history.replace({ pathname: '/login' });\r\n      // }\r\n    }, [dispatch, form]\r\n  );\r\n\r\n  // редирект сработает и при авторизации, и при прямом переходе на страницу по ссылке\r\n  if (isLoggedIn) {\r\n    return (<Redirect to={{ pathname: '/' }} />);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <form className={'auth-form ' + styles.form} onSubmit={handleSubmit}>\r\n        <h1 className='text text_type_main-medium mb-6'>Регистрация</h1>\r\n\r\n        <Input\r\n          type='text'\r\n          placeholder='Имя'\r\n          value={form.name}\r\n          name={'name'}\r\n          onChange={handleChange}\r\n\r\n          error={false}\r\n          errorText={'Имя должно состоять из символов галактического алфавита'}\r\n        />\r\n\r\n        <Input\r\n          type='email'\r\n          placeholder='E-mail'\r\n          value={form.email}\r\n          name={'email'}\r\n          onChange={handleChange}\r\n\r\n          error={false}\r\n          errorText={'Введите корректный e-mail'}\r\n        />\r\n\r\n        <PasswordInput\r\n          value={form.password}\r\n          name={'password'}\r\n          size={'default'}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <Button type=\"primary\" size=\"medium\">\r\n          Зарегистрироваться\r\n        </Button>\r\n\r\n        <p className=\"text text_type_main-default text_color_inactive\">\r\n          Уже зарегистрированы?{\" \"}\r\n          <Link to={\"/login\"} className={\"text_color_link\"}>\r\n            Войти\r\n          </Link>\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React, { useCallback, useState, useEffect } from 'react';\r\nimport styles from './auth-form.module.css';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useAppSelector, useAppDispatch } from '../services/hooks';\r\nimport { confirmAuthThunk, requestResetCodeThunk, } from '../services/actions/userActions';\r\nimport {\r\n  Input,\r\n  Button,\r\n} from '@ya.praktikum/react-developer-burger-ui-components';\r\n\r\n\r\nexport function ForgotPage() {\r\n  const [form, setFormValues] = useState({ email: '' });\r\n  const { isLoggedIn, canResetPassword } = useAppSelector((store) => store.user);\r\n\r\n  // const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n\r\n  // автоподстановка корректного логина и пароля  ВЫКЛЮЧИТЬ НА ПРОДЕ\r\n  useEffect(() => {\r\n    setFormValues(\r\n      { email: 'shamko.e.v@yandex.ru' }\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // console.log('Auth in /forgot-password');\r\n    dispatch(confirmAuthThunk());\r\n  }, [dispatch]);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      // console.log('Requesting redirection to password reset page', form['email']);\r\n\r\n      // включаем возможность зайти на страницу ввода нового пароля\r\n      // dispatch({\r\n      //   type: ALLOW_RESET_PASSWORD,\r\n      // });\r\n\r\n      dispatch(requestResetCodeThunk(form.email));\r\n\r\n      // if (true) { // после ушедшего запроса на сервер\r\n      //   history.replace({ pathname: '/reset-password' });\r\n      // }\r\n    }, [dispatch, form]\r\n  ); //  [auth, form] будущие зависимости\r\n\r\n  // редирект сработает и при авторизации, и при прямом переходе на страницу по ссылке\r\n  if (isLoggedIn) {\r\n    return (<Redirect to={{ pathname: '/' }} />);\r\n  }\r\n\r\n  if (!isLoggedIn && canResetPassword) {\r\n    return (<Redirect to={{ pathname: '/reset-password' }} />);\r\n  }\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <form className={'auth-form ' + styles.form} onSubmit={handleSubmit}>\r\n        <h1 className='text text_type_main-medium mb-6'>Восстановление пароля</h1>\r\n\r\n        <Input\r\n          type='text'\r\n          placeholder='Укажите e-mail'\r\n          value={form.email}\r\n          name={'email'}\r\n          onChange={handleChange}\r\n\r\n          error={false}\r\n          errorText={'Введите корректный e-mail'}\r\n        />\r\n\r\n        <Button type=\"primary\" size=\"medium\">\r\n          Восстановить\r\n        </Button>\r\n\r\n        <p className=\"text text_type_main-default text_color_inactive\">\r\n          Вспомнили пароль?{\" \"}\r\n          <Link to={\"/login\"} className={\"text_color_link\"}>\r\n            Войти\r\n          </Link>\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React, { useCallback, useState } from 'react';\r\nimport styles from './auth-form.module.css';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { useAppSelector, useAppDispatch } from '../services/hooks';\r\nimport { getCookie } from '../utils/cookie';\r\nimport { setNewPasswordThunk } from '../services/actions/userActions';\r\n\r\nimport {\r\n  Input,\r\n  PasswordInput,\r\n  Button,\r\n} from '@ya.praktikum/react-developer-burger-ui-components';\r\n\r\nexport function ResetPassword() {\r\n  const [form, setFormValues] = useState({ password: '', resetCode: '' });\r\n  const { isLoggedIn, canResetPassword, hasResetPassword } = useAppSelector((store) => store.user);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      // console.log('Sending request for password reset');\r\n\r\n      const newPassword = form.password;\r\n      const resetCode = form['resetCode'];\r\n\r\n      console.log('newPassword', newPassword);\r\n      console.log('resetCode', resetCode);\r\n\r\n      dispatch(setNewPasswordThunk(newPassword, resetCode));\r\n\r\n      setFormValues({ ...form, password: '' });\r\n    }, [dispatch, form]\r\n  ); //  [auth, form] будущие зависимости\r\n\r\n\r\n  /*******************************************************/\r\n  /* ***** Логика редиректа прочь с этой страницы ***** */\r\n  /*****************************************************/\r\n\r\n  // авторизованный пользователь не может сменить пароль\r\n  if (isLoggedIn) {\r\n    return (<Redirect to={{ pathname: '/' }} />);\r\n  }\r\n\r\n  // после успешной смены пароля редиректнет на страницу логина\r\n  if (hasResetPassword) {\r\n    console.log('has reset password');\r\n    return (<Redirect to={{ pathname: '/login' }} />);\r\n  }\r\n\r\n  // при прямом переходе на /reset-password пользователя редиректнет на страницу /forgot-password если он не запрашивал код для восстановления пароля в течение последениего часа\r\n  // поскольку стейт canResetPassword обнуляется при перезагрузке страницы, дополнительно информация о том, что был запрошен резет пароля, хранится в куки в течение часа\r\n  if (!canResetPassword && (getCookie('canResetPassword') !== 'yes')) {\r\n    return (<Redirect to={{ pathname: '/forgot-password' }} />);\r\n  }\r\n\r\n  /*******************************************************/\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <form className={'auth-form ' + styles.form} onSubmit={handleSubmit}>\r\n        <h1 className='text text_type_main-medium mb-6'>Восстановление пароля</h1>\r\n\r\n        <PasswordInput\r\n          value={form.password}\r\n          name={'password'}\r\n          size={'default'}\r\n          onChange={handleChange}\r\n        />\r\n\r\n        <Input\r\n          type='text'\r\n          placeholder='Введите код из письма'\r\n          value={form.resetCode}\r\n          name={'resetCode'}\r\n          onChange={handleChange}\r\n\r\n          error={false}\r\n          errorText={''}\r\n        />\r\n\r\n        <Button type=\"primary\" size=\"medium\">\r\n          Восстановить\r\n        </Button>\r\n\r\n        <p className=\"text text_type_main-default text_color_inactive\">\r\n          Вспомнили пароль?{\" \"}\r\n          <Link to={\"/login\"} className={\"text_color_link\"}>\r\n            Войти\r\n          </Link>\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React, { FC } from 'react';\r\nimport styles from './profile-tab.module.css';\r\nimport { TProfileMenuTabsValue } from '../../utils/types';\r\n\r\ntype TProfileTabProps = {\r\n  value: TProfileMenuTabsValue,\r\n  isActive: boolean,\r\n  onClick: (tabName: TProfileMenuTabsValue) => void,\r\n};\r\n\r\n// написан по аналогии с <Tab> из пакета от Практикума\r\nexport const ProfileTab: FC<TProfileTabProps> = ({ children, value, isActive, onClick: handleClick}) => { \r\n  const className = `${styles.tab} ${isActive ? styles.tab_type_current : ''}`;\r\n\r\n  const onClick = React.useCallback(() => {\r\n    if (typeof handleClick === 'function' && !isActive ) {\r\n      handleClick(value);\r\n    }\r\n  }, [handleClick, value, isActive]);\r\n\r\n  return (\r\n    <div className={`${className} pt-4 pr-10 pb-4 noselect`} onClick={onClick}>\r\n      <span className=\"text text_type_main-medium\">{children}</span>\r\n    </div>\r\n  );\r\n};","import { useState, FC } from 'react';\r\nimport styles from './profile-menu.module.css';\r\nimport { ProfileTab } from '../profile-tab/profile-tab';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { logOutThunk } from '../../services/actions/userActions';\r\nimport { TProfileMenuTabsValue } from '../../utils/types';\r\n\r\nimport { useAppDispatch } from '../../services/hooks';\r\n\r\ntype TProfileMenuProps = { activeTab: TProfileMenuTabsValue };\r\n\r\nexport const ProfileMenu: FC<TProfileMenuProps> = ({ activeTab }) => {\r\n  const [currentTab] = useState(activeTab);\r\n  const history = useHistory();\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleTabClick = (value: TProfileMenuTabsValue) => {\r\n    if (value === 'profile') {\r\n      history.replace({ pathname: '/profile' });\r\n    }\r\n\r\n    if (value === 'orderHistory') {\r\n      history.replace({ pathname: '/profile/orders' });\r\n    }\r\n\r\n    if (value === 'logOut') {\r\n      //console.log('Gonna try to log you out');\r\n      //console.log(`localStorage.getItem('refreshToken')`, localStorage.getItem('refreshToken'))\r\n      dispatch(logOutThunk());\r\n    }\r\n  }\r\n\r\n  return (\r\n    <nav className={styles.menu}>\r\n      <ProfileTab value=\"profile\" isActive={currentTab === 'profile'} onClick={handleTabClick}>Профиль</ProfileTab>\r\n      <ProfileTab value=\"orderHistory\" isActive={currentTab === 'orderHistory'} onClick={handleTabClick}>История заказов</ProfileTab>\r\n      <ProfileTab value=\"logOut\" isActive={false} onClick={handleTabClick}>Выход</ProfileTab>\r\n\r\n      <p className=\"text text_type_main-default text_color_inactive mt-20\">В этом разделе вы можете изменить свои персональные данные</p>\r\n    </nav>\r\n  );\r\n};","import React, { useState, useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../services/hooks';\r\nimport { confirmAuthThunk, patchUserDataThunk } from '../services/actions/userActions';\r\nimport styles from './profile.module.css';\r\nimport { ProfileMenu } from '../components/profile-menu/profile-menu';\r\n\r\nimport {\r\n  Input,\r\n  Button,\r\n} from '@ya.praktikum/react-developer-burger-ui-components';\r\n\r\nexport function ProfilePage() {\r\n  const [form, setFormValues] = useState({ name: '', email: '', password: '' });\r\n  const { userName, userEmail } = useAppSelector((state) => state.user);\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(confirmAuthThunk());\r\n  }, [dispatch]);\r\n\r\n  // при загрузке компонента в поля поставятся имя и почта из стейта\r\n  useEffect(() => {\r\n    setFormValues({ ...form, name: userName, email: userEmail })\r\n    //eslint-disable-next-line\r\n  }, []);\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setFormValues({ ...form, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    // console.log('сабмитим изменения в профиле');\r\n    dispatch(patchUserDataThunk(form, setFormValues));\r\n  }\r\n  \r\n  const handleCansel = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    // console.log('canselling changes');\r\n    setFormValues({ name: userName, email: userEmail, password: '' });\r\n  }\r\n\r\n  return (\r\n    <section className={styles.wrap}>\r\n      <ProfileMenu activeTab={'profile'} />\r\n      <form className={styles.profileInfo + \" profile-inputs\"} onSubmit={handleSubmit}>\r\n        <Input\r\n          type={\"text\"}\r\n          name={\"name\"}\r\n          placeholder={\"Имя\"}\r\n          value={form.name}\r\n          onChange={handleChange}\r\n          icon={\"EditIcon\"}\r\n          error={false}\r\n        />\r\n\r\n        <Input\r\n          type={\"text\"}\r\n          name={\"email\"}\r\n          placeholder={\"e-mail\"}\r\n          value={form.email}\r\n          onChange={handleChange}\r\n          icon={\"EditIcon\"}\r\n          error={false}\r\n        />\r\n\r\n        <Input\r\n          type={\"text\"}\r\n          name={'password'}\r\n          placeholder={\"Пароль\"}\r\n          value={form.password}\r\n          onChange={handleChange}\r\n          size={'default'}\r\n          icon={\"EditIcon\"}\r\n          error={false}\r\n        />\r\n        <div className={styles.buttonWrap}>\r\n          <Button >Сохранить</Button>\r\n          <Button onClick={handleCansel as () => void} type=\"secondary\">Отмена</Button>\r\n        </div>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n","import { TOrder } from '../../utils/types';\r\nimport { TOrdersStoreData } from '../reducers/wsReducer';\r\n\r\nexport const WS_OPEN_CONNECTION: 'WS_OPEN_CONNECTION' = 'WS_OPEN_CONNECTION';\r\nexport const WS_CONNECTED_SUCCESSFULLY: 'WS_CONNECTED_SUCCESSFULLY' = 'WS_CONNECTED_SUCCESSFULLY';\r\nexport const WS_ERROR: 'WS_ERROR' = 'WS_ERROR';\r\nexport const WS_GOT_ORDERS: 'WS_GOT_ORDERS' = 'WS_GOT_ORDERS';\r\nexport const WS_SEND_MESSAGE: 'WS_SEND_MESSAGE' = 'WS_SEND_MESSAGE';\r\nexport const WS_CLOSE_CONNECTION: 'WS_CLOSE_CONNECTION' = 'WS_CLOSE_CONNECTION';\r\nexport const WS_DISCONNECTED: 'WS_DISCONNECTED' = 'WS_DISCONNECTED';\r\nexport const SET_DETAILED_ORDER_IN_MODAL: 'SET_DETAILED_ORDER_IN_MODAL' = 'SET_DETAILED_ORDER_IN_MODAL';\r\n\r\nexport const wsActions = {\r\n  openConnection: WS_OPEN_CONNECTION, // для отправки запроса на установлениe ws\r\n  onOpen: WS_CONNECTED_SUCCESSFULLY, // соединение успешно открылось\r\n  onError: WS_ERROR, // возникла ошибка\r\n  onGotOrders: WS_GOT_ORDERS, // когда пришли данные о заказах\r\n  sendMessage: WS_SEND_MESSAGE, // отправка заказа на сервер\r\n  closeConnection: WS_CLOSE_CONNECTION, // экшн для отправки запроса на закрытие ws\r\n  onClose: WS_DISCONNECTED, // ws статус переменился на CLOSED\r\n  setOrderInModal: SET_DETAILED_ORDER_IN_MODAL, // устанавливает данные заказа для отображения в модальном окне\r\n};\r\n\r\nexport type TwsActions = {\r\n  openConnection: typeof WS_OPEN_CONNECTION, // для отправки запроса на установлениe ws\r\n  onOpen: typeof WS_CONNECTED_SUCCESSFULLY, // соединение успешно открылось\r\n  onError: typeof WS_ERROR, // возникла ошибка\r\n  onGotOrders: typeof WS_GOT_ORDERS, // когда пришли данные о заказах\r\n  sendMessage: typeof WS_SEND_MESSAGE, // отправка заказа на сервер\r\n  closeConnection: typeof WS_CLOSE_CONNECTION, // экшн для отправки запроса на закрытие ws\r\n  onClose: typeof WS_DISCONNECTED, // ws статус переменился на CLOSED\r\n  setOrderInModal: typeof SET_DETAILED_ORDER_IN_MODAL, // устанавливает данные заказа для отображения в модальном окне\r\n};\r\n\r\n\r\nexport interface IsetOrderInModalAction {\r\n  readonly type: typeof SET_DETAILED_ORDER_IN_MODAL;\r\n  readonly orderData: TOrder,\r\n}\r\n\r\n// ********************** Интерфейсы и генераторы экшенов ***************\r\n\r\n// типизация для редьюсера и для генератора экшена\r\nexport interface IopenConnectionAction {\r\n  readonly type: typeof WS_OPEN_CONNECTION;\r\n}\r\n\r\n// Эти функции называются action creator - они нужны что бы не писать каждый раз создание объекта, а просто вызывать функцию, которая возвращает нужные объект экшена\r\n// Мне и без них норм, но пусть пока тут лежат, мб позже оценю их прелесть\r\nexport const openConnectionAction = (): IopenConnectionAction => {\r\n  return {\r\n    type: WS_OPEN_CONNECTION\r\n  };\r\n};\r\n\r\n// *****\r\n\r\nexport interface IonOpenAction {\r\n  readonly type: typeof WS_CONNECTED_SUCCESSFULLY;\r\n}\r\n\r\nexport const onOpenAction = (): IonOpenAction => {\r\n  return {\r\n    type: WS_CONNECTED_SUCCESSFULLY\r\n  };\r\n}\r\n\r\n// *****\r\n\r\nexport interface IonErrorAction {\r\n  readonly type: typeof WS_ERROR;\r\n}\r\n\r\nexport const onErrorAction = (): IonErrorAction => {\r\n  return {\r\n    type: WS_ERROR\r\n  };\r\n}\r\n\r\n// *****\r\n\r\nexport interface IonGotOrdersAction {\r\n  readonly type: typeof WS_GOT_ORDERS;\r\n  readonly ordersData: TOrdersStoreData;\r\n}\r\n\r\nexport const onGotOrdersAction = (ordersData: TOrdersStoreData): IonGotOrdersAction => {\r\n  return {\r\n    type: WS_GOT_ORDERS,\r\n    ordersData,\r\n  };\r\n}\r\n\r\n// *****\r\n\r\nexport interface IsendMessageAction {\r\n  readonly type: typeof WS_SEND_MESSAGE;\r\n  readonly payload: string,\r\n  \r\n}\r\n\r\nexport const sendMessageAction = (message: string): IsendMessageAction => {\r\n  return {\r\n    type: WS_SEND_MESSAGE,\r\n    payload: message,\r\n  };\r\n}\r\n\r\n// *****\r\n\r\nexport interface IcloseConnectionAction {\r\n  readonly type: typeof WS_CLOSE_CONNECTION;\r\n}\r\n\r\nexport const closeConnectionAction = (): IcloseConnectionAction => {\r\n  return {\r\n    type: WS_CLOSE_CONNECTION\r\n  };\r\n}\r\n\r\n// *****\r\n\r\nexport interface IonCloseAction {\r\n  readonly type: typeof WS_DISCONNECTED;\r\n}\r\n\r\nexport const onCloseAction = (): IonCloseAction => {\r\n  return {\r\n    type: WS_DISCONNECTED\r\n  };\r\n}\r\n\r\n// это union-тип, объединяющий в себе все типы экшенов\r\nexport type TwsActionsUnion = IopenConnectionAction | IonOpenAction | IonErrorAction | IonGotOrdersAction | IsendMessageAction | IcloseConnectionAction | IcloseConnectionAction | IonCloseAction | IsetOrderInModalAction;","import { useAppSelector, useAppDispatch } from '../../services/hooks';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport s from './feed-card.module.css';\r\nimport { CurrencyIcon } from \"@ya.praktikum/react-developer-burger-ui-components\";\r\nimport { TOrder, TIngredientObjData } from '../../utils/types';\r\n\r\nimport { getOrderStatus, getPrice, getCompletedIngrList, getFormattedDate } from '../../utils/utils';\r\n\r\n\r\nimport {\r\n  OPEN_MODAL,\r\n  SET_MODAL_TYPE,\r\n} from '../../services/actions/burgerVendor';\r\n\r\nimport {\r\n  SET_DETAILED_ORDER_IN_MODAL,\r\n} from '../../services/actions/wsActions';\r\n\r\ntype TFeedCard = {\r\n  orderData: TOrder,\r\n  key: number,\r\n  isPersonal: boolean,\r\n}\r\n\r\nexport function FeedCard({ orderData, isPersonal }: TFeedCard) {\r\n\r\n  const dispatch = useAppDispatch();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n\r\n  const allIngrCatalog = useAppSelector((state) => state.burgerVendor.ingridientsData.arrOfIngridients);\r\n\r\n  // ***** собираем полный массив ингридиентов для подсчёта стоимости заказа\r\n\r\n  // const fullIngrList: Array<TIngredientObjData> = [];\r\n\r\n  // for (let ingrId of orderData.ingredients) {\r\n  //   arrOfIngridients.forEach((ingrObj) => {\r\n  //     if (ingrObj._id === ingrId) {\r\n  //       fullIngrList.push(ingrObj)\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  //******* собираем массив с данными об используемых ингридиентах\r\n  let arrOfUsedIngr: [] | Array<TIngredientObjData> = [];\r\n  let arrImages: Array<string> = []\r\n\r\n\r\n  if (allIngrCatalog && orderData) {\r\n    arrOfUsedIngr = allIngrCatalog.filter((ingr: TIngredientObjData) => orderData.ingredients.includes(ingr._id));\r\n\r\n    arrOfUsedIngr.forEach((ingr: TIngredientObjData) => { arrImages.push(ingr.image_mobile) })\r\n  }\r\n\r\n\r\n  // const getPrice = (arr: Array<TIngredientObjData>) => {\r\n  //   return arr.reduce((previousValue: number, currentValue: TIngredientObjData) => {\r\n  //     return previousValue + currentValue.price;\r\n  //   }, 0);\r\n  // }\r\n\r\n  // ******************* Для иконок ингридиентов\r\n\r\n  const getIcons = (url: string, index: number) => {\r\n    return (<div className={s.imgContainer} style={{ backgroundImage: `url(${url})` }} key={index}></div>)\r\n  }\r\n\r\n  let normalizedPics = []\r\n  // берем массив ссылок на иконки ингридиентов\r\n  // делаем, чтобы было не больше 5 картинок\r\n  // и разворачиваем их в обратном порядке для облегчения рендеринга с наложением\r\n  const formateArr = (arr: Array<string>) => {\r\n\r\n    if (arr.length < 1) { // предохранитель, чтобы не было рендеринга undefined на некоторых этапах жизни компонента\r\n      return [];\r\n    }\r\n\r\n    let normalizedArr = arr.map(i => i);\r\n\r\n    if (normalizedArr.length > 5) {\r\n      normalizedArr.length = 5;\r\n    }\r\n\r\n    normalizedArr.reverse();\r\n\r\n    return normalizedArr;\r\n  }\r\n\r\n  normalizedPics = formateArr(arrImages);\r\n\r\n  // *******************\r\n\r\n\r\n  // *******************\r\n\r\n  const openIngridientDetails = () => {\r\n    dispatch({\r\n      type: OPEN_MODAL,\r\n    });\r\n    dispatch({\r\n      type: SET_MODAL_TYPE,\r\n      value: 'OrderCard',\r\n    });\r\n    dispatch({\r\n      type: SET_DETAILED_ORDER_IN_MODAL,\r\n      orderData,\r\n    });\r\n  };\r\n\r\n\r\n\r\n  const handleClick = () => {\r\n    openIngridientDetails();\r\n\r\n    // console.log('history.location 1', history.location )\r\n    // console.log('location 1', location)\r\n\r\n    // при открытии модального окна с информацией об ингридиенте в адресной строке пропишется уникальный роут ингридиента\r\n    // history.replace({\r\n    //   pathname: `${history.location.pathname}/${orderData._id}`,\r\n    //   state: { background: location }, // в background записался текущий объект location, который будет использоваться в App для изменения содержимого адресной строки\r\n    // });\r\n\r\n    if (isPersonal) {\r\n      history.push({\r\n        pathname: `${history.location.pathname}/${orderData._id}`,\r\n        state: { profileOrderModal: location }, // в background записался текущий объект location, который будет использоваться в App для изменения содержимого адресной строки\r\n      });\r\n    } else {\r\n      history.push({\r\n        pathname: `${history.location.pathname}/${orderData._id}`,\r\n        state: { feedModal: location }, // в background записался текущий объект location, который будет использоваться в App для изменения содержимого адресной строки\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <article className={s.main} onClick={handleClick}>\r\n      <div className={s.plane + ' mb-6'}>\r\n        <span className={s.number + ' text text_type_digits-default'}>#{orderData.number}</span>\r\n        <span className={' text text_type_main-default text_color_inactive'}>{getFormattedDate(orderData.createdAt)}</span>\r\n      </div>\r\n      <h4 className={s.header + ' text text_type_main-medium mb-2'}>{orderData.name}</h4>\r\n      {isPersonal ? (<span className={' text text_type_main-default text_color_inactive mb-2'}>{getOrderStatus(orderData.status)}</span>) : null}\r\n      <div className={s.plane}>\r\n        <div className={s.iconsContainer}>\r\n          {normalizedPics && normalizedPics.map((url: string, index) => (getIcons(url, index)))}\r\n        </div>\r\n\r\n        <div className={s.price}><span className={' text text_type_digits-default mr-2'}>{getPrice(getCompletedIngrList(orderData, allIngrCatalog))}</span><CurrencyIcon type=\"primary\" /></div>\r\n      </div>\r\n    </article >\r\n  );\r\n}\r\n","import { useAppSelector } from '../../services/hooks';\r\nimport { FeedCard } from '../feed-card/feed-card';\r\nimport s from './scrollable-list.module.css';\r\nimport { TOrder } from '../../utils/types';\r\n\r\n\r\ntype TScrollableListProps = {\r\n  isPersonal: boolean,\r\n}\r\n\r\nexport function ScrollableList({ isPersonal }: TScrollableListProps) {\r\n\r\n  const currentOrders: ReadonlyArray<TOrder> = useAppSelector((store) => store.ws.ordersData.orders);\r\n\r\n  let reversedOrdersList: Array<TOrder> = [];\r\n  if (currentOrders && isPersonal) {\r\n    reversedOrdersList = currentOrders.slice();\r\n    reversedOrdersList = reversedOrdersList.reverse();\r\n  }\r\n\r\n  return (\r\n    <article className={s.main}>\r\n\r\n      {/* в /feed ленту заказов нужно отображать в прямом порядке, как она с сервера приходит */}\r\n      {!isPersonal && currentOrders && currentOrders.map((order: TOrder) => <FeedCard orderData={order} isPersonal={isPersonal} key={order.number} />)}\r\n\r\n      {/* в profile/orders ленту заказов нужно отображать в обратном порядке, потому что с сервера она приходит отсортированная так, что наверху самые старые заказы */}\r\n      {isPersonal && reversedOrdersList && reversedOrdersList.map((order: TOrder) => <FeedCard orderData={order} isPersonal={isPersonal} key={order.number} />)}\r\n\r\n    </article>\r\n  );\r\n}","import { useEffect } from \"react\";\r\nimport { useAppDispatch } from '../services/hooks';\r\nimport { confirmAuthThunk } from '../services/actions/userActions';\r\nimport { wsActions } from '../services/actions/wsActions';\r\nimport styles from './profile.module.css';\r\nimport { ProfileMenu } from '../components/profile-menu/profile-menu';\r\nimport { getAccessTokenLiteral } from '../utils/cookie';\r\nimport { wsOrders } from '../utils/api-url';\r\nimport { ScrollableList } from '../components/scrollable-list/scrollable-list';\r\n\r\nexport function ProfileOrdersPage() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    // console.log('Auth in profile/orders');\r\n    dispatch(confirmAuthThunk());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: wsActions.openConnection,\r\n      url: wsOrders + `?token=${getAccessTokenLiteral()}`,     \r\n    });\r\n    return () => {\r\n      // console.log('Размонтируем /feed');\r\n      dispatch({ type: wsActions.closeConnection });\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <section className={styles.wrap}>\r\n      <ProfileMenu activeTab={'orderHistory'} />\r\n      <div className={styles.profileInfo + \" profile-inputs\"}>\r\n\r\n        {/* <p className={'text text_type_main-default'}>Здесь будет история заказов.</p> */}\r\n        <ScrollableList isPersonal={true} />\r\n\r\n      </div>\r\n    </section>\r\n  );\r\n}","import { useParams } from \"react-router-dom\";\r\nimport { useAppSelector } from '../services/hooks';\r\nimport IngredientDetais from '../components/ingridient-details/ingridient-details';\r\nimport { TIngredientObjData } from '../utils/types';\r\n\r\n\r\nexport function IngridientPage() {\r\n  const { id } = useParams<{ id?: string }>();\r\n\r\n  const { arrOfIngridients } = useAppSelector((store) => store.burgerVendor.ingridientsData); // TODO: в следующем спринте типировать конкретнее\r\n\r\n  // Пока массив ингредиентов запрашивается в шапке приложения, можно здесь этот запрос не дублировать\r\n  //@ts-ignore\r\n  // React.useEffect(() => dispatch(getIngridientsDataThunk(urlApiGetIngridients)), [dispatch]);\r\n\r\n  const ingridientProp = arrOfIngridients.find((ingr: TIngredientObjData) => ingr._id === id);\r\n\r\n  // на момент первого рендера ingridientProp это [], а в <IngridientDetais> нельзя пробрасывать такой пропс, так что вернём null\r\n  if (!ingridientProp) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={{ paddingTop: 80, }}>\r\n      <IngredientDetais ingredientData={ingridientProp} />\r\n    </div>\r\n  );\r\n}","import { useEffect } from 'react';\r\nimport { useAppSelector, useAppDispatch } from '../services/hooks';\r\nimport { ScrollableList } from '../components/scrollable-list/scrollable-list';\r\nimport { wsActions } from '../services/actions/wsActions';\r\nimport { TOrder } from '../utils/types';\r\nimport { wsAllOrders } from '../utils/api-url';\r\nimport s from './feed.module.css';\r\n\r\nexport function FeedPage() {\r\n\r\n  const dispatch = useAppDispatch();\r\n\r\n  const currentOrders: ReadonlyArray<TOrder> = useAppSelector((store) => store.ws.ordersData.orders);\r\n  const ordersTotalToday = useAppSelector((store) => store.ws.ordersData.totalToday);\r\n  const ordersTotalEver = useAppSelector((store) => store.ws.ordersData.total);\r\n\r\n  // массивы для хранения выполненных и готовящихся заказов\r\n  const оrdersDone: number[] = [];\r\n  const оrdersInWork: number[] = [];\r\n\r\n  // заполняем массивы объектами заказов:\r\n  if (currentOrders) {\r\n    currentOrders.forEach((item: TOrder) => {\r\n      if (item.status === 'done') {\r\n        оrdersDone.push(item.number);\r\n      } else {\r\n        оrdersInWork.push(item.number);\r\n      }\r\n    });\r\n  }\r\n\r\n  // вернёт разметку элемента списка готовящихся/выполненных заказов\r\n  const getLiElement = (orderNumber: number, key: number) => {\r\n    return (<li className={s.liElem + ' text text_type_digits-default mb-2'} key={key}>{orderNumber}</li>)\r\n  }\r\n\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: wsActions.openConnection,\r\n      url: wsAllOrders, \r\n    });\r\n    return () => {\r\n      // console.log('Размонтируем /feed');\r\n      dispatch({ type: wsActions.closeConnection });\r\n    };\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <section className={s.headerSection}>\r\n        <h1 className=\"text text_type_main-large\">Лента заказов</h1>\r\n      </section>\r\n\r\n      <section className={s.feedData}>\r\n\r\n      {/* СЛЕВА: Секция с лентой заказов */}\r\n        <section className={s.feedContent}>\r\n          <ScrollableList isPersonal={false} />\r\n        </section>\r\n\r\n      {/* СПРАВА: Секция со статистикой */}\r\n        <section className={s.feedChart}>\r\n\r\n          {/* --------- \"Готовы\", \"В работе\" */}\r\n          <div className={s.currentOrders}>\r\n\r\n            <div className={s.currentChart}>\r\n              <span className={'text text_type_main-medium mb-6'}>Готовы</span>\r\n              <ul className={s.ul} style={{ color: '#00CCCC' }}>\r\n                {оrdersDone.slice(0, 18).map((item) => getLiElement(item, item))}\r\n              </ul>\r\n            </div>\r\n\r\n            <div className={s.currentChart}>\r\n              <span className={'text text_type_main-medium mb-6'}>В работе</span>\r\n              <ul className={s.ul}>\r\n                {оrdersInWork.slice(0, 18).map((item) => getLiElement(item, item))}\r\n              </ul>\r\n            </div>\r\n\r\n          </div>\r\n\r\n          {/* --------- \"Выполнено\" */}\r\n          <div className={s.totalChart}>\r\n\r\n            <div className={s.totalBlock}>\r\n              <span className={s.bigHeader + ' text text_type_main-medium mt-15'}>Выполнено за всё время</span>\r\n              <span className={' text text_type_digits-large mb-15'}>{ordersTotalEver}</span>\r\n\r\n            </div>\r\n\r\n            <div className={s.totalBlock}>\r\n              <span className={s.bigHeader + ' text text_type_main-medium mt-15'}>Выполнено за сегодня</span>\r\n              <span className={' text text_type_digits-large mb-15'}>{ordersTotalToday}</span>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </section>\r\n      </section>\r\n\r\n    </>\r\n  );\r\n}","import { useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useAppSelector, useAppDispatch } from '../services/hooks';\r\n// import { confirmAuthThunk } from '../services/actions/userActions';\r\nimport { getAccessTokenLiteral } from '../utils/cookie';\r\n\r\n\r\nimport { wsActions } from '../services/actions/wsActions';\r\nimport { TOrder } from '../utils/types';\r\nimport { FeedDetailedCard } from '../components/feed-detailed-card/feed-detailed-card';\r\nimport { wsAllOrders, wsOrders } from '../utils/api-url';\r\nimport {\r\n  SET_DETAILED_ORDER_IN_MODAL,\r\n} from '../services/actions/wsActions';\r\n\r\n\r\ntype TOrderPageProps = {\r\n  orderSource: 'feed' | 'personalOrder'\r\n}\r\n\r\nexport const OrderPage = ({ orderSource }: TOrderPageProps) => {\r\n  const dispatch = useAppDispatch();\r\n  const { id } = useParams<{ id?: string }>();\r\n\r\n  const currentOrders: ReadonlyArray<TOrder> = useAppSelector((store) => store.ws.ordersData.orders);\r\n\r\n  // объект, который нужно поместить в стейт для попапа\r\n  let selectedOrder: undefined | TOrder;\r\n  // данные в него запишутся после успешной установки ws и заполнения массива currentOrders\r\n  if (currentOrders) {\r\n    selectedOrder = currentOrders.find(obj => obj._id === id); // находим нужный объект в массиве\r\n\r\n    dispatch({\r\n      type: SET_DETAILED_ORDER_IN_MODAL,\r\n      orderData: selectedOrder,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (orderSource === 'feed') {\r\n      dispatch({\r\n        type: wsActions.openConnection,\r\n        url: wsAllOrders,\r\n      });\r\n    }\r\n\r\n    if (orderSource === 'personalOrder') {\r\n      dispatch({\r\n        type: wsActions.openConnection,\r\n        url: wsOrders + `?token=${getAccessTokenLiteral()}`,     \r\n      });\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: wsActions.closeConnection });\r\n    };\r\n  }, [dispatch, orderSource]);\r\n\r\n  return (\r\n    <>\r\n      {currentOrders && selectedOrder ? <FeedDetailedCard /> : null}<br />\r\n    </>\r\n  )\r\n}","import React, { useEffect } from \"react\";\n//import logo from '../../images/logo.svg';\nimport indexStyles from './app.module.css';\nimport { Route, Switch, useLocation, useHistory, } from 'react-router-dom';\nimport { useAppDispatch } from '../../services/hooks';\nimport { confirmAuthThunk } from '../../services/actions/userActions';\nimport {\n  getIngridientsDataThunk,\n} from '../../services/actions/burgerVendor';\nimport { urlApiGetIngridients } from '../../utils/api-url';\nimport { ProtectedRoute } from '../protected-route/protected-route';\nimport { Location } from 'history';\nimport Modal from '../modal/modal';\nimport IngredientDetais from '../ingridient-details/ingridient-details';\nimport { useAppSelector } from '../../services/hooks';\nimport AppHeader from '../app-header/app-header';\nimport BurgerVendor from '../burger-vendor/burger-vendor';\nimport { FeedDetailedCard } from '../feed-detailed-card/feed-detailed-card';\nimport { LoginPage, RegistrationPage, ForgotPage, ResetPassword, ProfilePage, FeedPage, IngridientPage, ProfileOrdersPage, OrderPage } from '../../pages';\n\n\n// нужно для функционала отображения модальных окон поверх основного контента страницы, и чтобы при этом url менялся\ntype TLocationState = {\n  ingredientModal?: Location;\n  feedModal?: Location;\n  profileOrderModal?: Location;\n};\n\nfunction App() {\n\n  const history = useHistory();\n  let location = useLocation<TLocationState | undefined>();\n  // console.log('location ', location);\n\n  // background станет не undefined, когда произойдёт клик по одному из ингридиентов в BurgerIngridients\n  // background - это объект location, соответствующий адресу, на котором мы находились, когда произошёл клик по ингридиенту (т.е. '/' ))\n  // если таки background !== undefined, он будет использован в качестве location для Switch, и тогда BurgerVendor будет показан в качестве фона под модальным окном с информацией об ингридиенте\n\n  const action = history.action === 'PUSH' || history.action === 'REPLACE'; //  history.action is mutable and automatically updates as the location changes. https://github.com/remix-run/history/blob/main/docs/api-reference.md \n\n  // три переменные ниже - это, по сути, background для каждого из модальных окон\n  const modalIngredientOpen = action && location.state && location.state.ingredientModal;\n  const modalFeedOrderOpen = action && location.state && location.state.feedModal;\n  const modalProfileOrderOpen = action && location.state && location.state.profileOrderModal;\n\n  const { ingrInModalData } = useAppSelector((store) => store.burgerVendor); // хранилище типизируем в следующем спринте\n\n  const dispatch = useAppDispatch();\n\n  \n  useEffect(() => {\n    dispatch(confirmAuthThunk());\n    dispatch(getIngridientsDataThunk(urlApiGetIngridients));\n  }, [dispatch]);\n\n  return (\n    <>\n      <AppHeader />\n\n      <main className={indexStyles.main}>\n        <Switch location={modalIngredientOpen || modalFeedOrderOpen || modalProfileOrderOpen || location}>\n\n          <Route path=\"/login\">\n            <LoginPage />\n          </Route>\n\n          <Route path=\"/registration\">\n            <RegistrationPage />\n          </Route>\n\n          <Route path=\"/forgot-password\">\n            <ForgotPage />\n          </Route>\n\n          <Route path=\"/reset-password\">\n            <ResetPassword />\n          </Route>\n\n          <ProtectedRoute path=\"/profile\" exact={true}>\n            <ProfilePage />\n          </ProtectedRoute>\n\n          <ProtectedRoute path=\"/profile/orders\" exact={true}>\n            <ProfileOrdersPage />\n\n          </ProtectedRoute>\n\n          <ProtectedRoute path=\"/profile/orders/:id\">\n            {/* /profile/orders/:id — страница заказа в истории заказов. Доступна только авторизованным пользователям. */}\n            <OrderPage orderSource={'personalOrder'} />\n\n          </ProtectedRoute>\n\n          {/* <ProtectedRoute path=\"/profile/orders\">\n            <ProfileOrdersPage />\n          </ProtectedRoute> */}\n\n          <Route path=\"/ingredients/:id\">\n            <IngridientPage />\n          </Route>\n\n          <Route path=\"/feed\" exact={true}>\n            <FeedPage />\n          </Route>\n\n          <Route path=\"/feed/:id\">\n            {/* Страница конкретного заказа из /feed */}\n            <OrderPage orderSource={'feed'} />\n          </Route>\n\n          <Route path=\"/\" exact={true}>{/* exact={true}>; */}\n            <BurgerVendor />\n          </Route>\n        </Switch>\n\n        {/* Вот это модальные окна с разным содержимым. Модальные окна - это именно когда окно поверх основного контента страницы */}\n        {modalIngredientOpen && (\n          <Route path=\"/ingredients/:id\">\n              <Modal>\n                <IngredientDetais ingredientData={ingrInModalData} />\n              </Modal>\n          </Route>\n        )}\n        \n        {modalFeedOrderOpen && (\n          <Route path=\"/feed/:id\">\n              <Modal>\n                <FeedDetailedCard />\n              </Modal>\n          </Route>\n        )}\n\n        {modalProfileOrderOpen && (\n          <ProtectedRoute path=\"/profile/orders/:id\">\n              <Modal>\n                <FeedDetailedCard />\n              </Modal>\n          </ProtectedRoute>\n        )}\n\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","import { RootState } from '../store';\r\nimport { Middleware } from 'redux';\r\nimport { getAccessTokenLiteral } from '../../utils/cookie';\r\nimport { TwsActions } from \"../actions/wsActions\";\r\n\r\n/* \r\nВсю логику взаимодействия с WebSocket разместим внутри мидлвара, что позволит разделить зоны ответственности частей приложения и сделать код более читабельным и поддерживаемым.\r\nЗа подключение к серверу отвечает объект класса WebSocket, который будет создан внутри мидлвара. Все события этого объекта класса будут отправлять экшены в глобальный стейт.\r\n*/\r\n\r\nexport const socketMiddleware = (wsActions: TwsActions): Middleware<{}, RootState> => {\r\n  return store => {\r\n    let socket: WebSocket | null = null;\r\n\r\n    return next => action => {\r\n      const { dispatch } = store;\r\n      const { type } = action;\r\n      const { payload } = action;\r\n\r\n      const {\r\n        openConnection,  // для отправки запроса на установлениу ws\r\n        onOpen,  // соединение успешно открылось\r\n        onError, // возникла ошибка\r\n        onGotOrders, // когда пришли данные о заказах\r\n        onClose, // ws статус переменился на CLOSED\r\n        sendMessage, // отправка заказа на сервер\r\n        closeConnection, // экшн для отправки запроса на закрытие ws\r\n      } = wsActions;\r\n\r\n      // для подключения к общедоступной ленте заказов\r\n      if (type === openConnection) {\r\n        // console.log('Initiating Websocket connection');\r\n        // console.log('action.url is ', action.url);\r\n        socket = new WebSocket(action.url);\r\n      }\r\n\r\n      if (socket && type === closeConnection) {\r\n        // console.log('Отправляем команду на закрытие сокета');\r\n        socket.close();\r\n        socket = null;\r\n      }\r\n\r\n      if (socket) {\r\n\r\n        socket.onopen = () => {\r\n          // console.log('Successfully opened WebSocket connection');\r\n          dispatch({ type: onOpen });\r\n        }\r\n\r\n        socket.onerror = (event) => {\r\n          // console.log('WebSocket got error. Event is:');\r\n          // console.log(event);\r\n          dispatch({ type: onError });\r\n        }\r\n\r\n        socket.onmessage = (event) => {\r\n          // console.log('Got message through WebSocket connection');\r\n          const { data } = event;\r\n          const parseData = JSON.parse(data);\r\n\r\n          dispatch({\r\n            type: onGotOrders,\r\n            ordersData: parseData,\r\n          });\r\n        }\r\n\r\n        socket.onclose = () => {\r\n          // console.log('Closed WebSocket connection');\r\n          dispatch({ type: onClose });\r\n        }\r\n      }\r\n\r\n      // в приложении это сейчас не используется, но по заданию добавить нужно. Для универсальности\r\n      if (socket && type === sendMessage) {\r\n        socket.send(JSON.stringify({\r\n          ...payload,\r\n          token: getAccessTokenLiteral(),\r\n        }));\r\n      }\r\n\r\n      next(action);\r\n    };\r\n  };\r\n};\r\n","import update from \"immutability-helper\"; // этот пакет для ресортировки массива, хранящегося в стейте\r\nimport { TBurgerVendorActionsUnion } from '../actions/burgerVendor';\r\n\r\nimport { TOrderData, TDraggableIngr, TIngredientObjData, TModalType } from '../../utils/types';\r\n\r\nimport {\r\n    TOGGLE_MODAL_VISIBILITY,\r\n    SET_CURRENT_MODAL_TYPE,\r\n    SET_INGRIDIENT_IN_MODAL,\r\n    SET_ORDER_STATE,\r\n    INGRIDIENT_FETCH_SUCCESS,\r\n    INGRIDIENT_FETCH_ERROR,\r\n    OPEN_MODAL,\r\n    CLOSE_MODAL,\r\n    SET_MODAL_TYPE,\r\n    ADD_BUN,\r\n    ADD_SAUCE,\r\n    ADD_MAIN,\r\n    UPDATE_DRAGGABLE_INGRIDIENTS,\r\n    REMOVE_ALL_INGRIDIENTS,\r\n    RESORT_DRAGGABLE_INGRIDIENTS,\r\n    SET_CONSTRUCTOR_LOADER,\r\n} from '../actions/burgerVendor';\r\n\r\nexport type TBurgerVendorReducer = {\r\n    ingridientsData: {\r\n        arrOfIngridients: Array<TIngredientObjData>,\r\n        ingrDataIsLoading: boolean,\r\n        ingrDataHasError: boolean,\r\n    }\r\n    bun: TDraggableIngr,\r\n    draggableIngridients: Array<TDraggableIngr>,\r\n\r\n    modalIsVisible: boolean,\r\n    currentModalType: TModalType,\r\n    ingrInModalData: TIngredientObjData,\r\n    orderData: TOrderData,\r\n    constructorLoaderIsVisible: boolean,\r\n\r\n}\r\n\r\n// 'пустой' объект ингридиента, решает проблему типирования пропса для модального окна\r\nexport const blankIngr: TIngredientObjData  = {\r\n    _id: '',\r\n    name: '',\r\n    type: 'main',\r\n    proteins: 0,\r\n    fat: 0,\r\n    carbohydrates: 0,\r\n    calories: 0,\r\n    price: 0,\r\n    image: '',\r\n    image_mobile: '',\r\n    image_large: '',\r\n    __v: 0,\r\n}\r\n\r\nexport const blankDraggableIngr: TDraggableIngr = {\r\n    _id: '',\r\n    name: '',\r\n    type: 'main',\r\n    proteins: 0,\r\n    fat: 0,\r\n    carbohydrates: 0,\r\n    calories: 0,\r\n    price: 0,\r\n    image: '',\r\n    image_mobile: '',\r\n    image_large: '',\r\n    __v: 0,\r\n    instanceID: 0,\r\n}\r\n\r\nexport const initialState: TBurgerVendorReducer = {\r\n    ingridientsData: {\r\n        arrOfIngridients: [],\r\n        ingrDataIsLoading: false,\r\n        ingrDataHasError: false,\r\n    },\r\n\r\n    // два свойства с содержимым ингридиентов в BurgerConcstructor\r\n    bun: blankDraggableIngr,\r\n    draggableIngridients: [],\r\n\r\n    // модальное окно\r\n    modalIsVisible: false,\r\n    currentModalType: 'none',\r\n    ingrInModalData: blankIngr, // TODO: переименовать в ingrDataInModal\r\n\r\n    orderData: {\r\n        success: false,\r\n        name: '',\r\n        order: {\r\n            number: '',\r\n        },\r\n    },\r\n    constructorLoaderIsVisible: false,\r\n};\r\n\r\n// создание редьюсера\r\n// выполняю рекомендацию к проекту: на данном этапе собираю все редьюсеры в одном файле\r\n\r\nexport const burgerVendorReducer = (state = initialState, action: TBurgerVendorActionsUnion): TBurgerVendorReducer => {\r\n    switch (action.type) {\r\n        case TOGGLE_MODAL_VISIBILITY: {\r\n            return {\r\n                ...state,\r\n                modalIsVisible: action.value,\r\n            }\r\n        }\r\n        case SET_CURRENT_MODAL_TYPE: {\r\n            return {\r\n                ...state,\r\n                currentModalType: action.value, // 'none', 'IngridientDetails', 'OrderDetails'\r\n            }\r\n        }\r\n        case SET_INGRIDIENT_IN_MODAL: {\r\n            return {\r\n                ...state,\r\n                ingrInModalData: action.value // {}\r\n            }\r\n        }\r\n        case SET_ORDER_STATE: {\r\n            return {\r\n                ...state,\r\n                orderData: action.value, // {}\r\n            }\r\n        }\r\n        case INGRIDIENT_FETCH_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                ingridientsData: {\r\n                    arrOfIngridients: action.value,\r\n                    ingrDataIsLoading: false,\r\n                    ingrDataHasError: false,\r\n                },\r\n            }\r\n        }\r\n        case INGRIDIENT_FETCH_ERROR: {\r\n            return {\r\n                ...state,\r\n                ingridientsData: {\r\n                    arrOfIngridients: [],\r\n                    ingrDataIsLoading: false,\r\n                    ingrDataHasError: true\r\n                },\r\n            }\r\n        }\r\n        case OPEN_MODAL: {\r\n            return {\r\n                ...state,\r\n                modalIsVisible: true,\r\n            }\r\n        }\r\n        case CLOSE_MODAL: {\r\n            return {\r\n                ...state,\r\n                modalIsVisible: false,\r\n            }\r\n        }\r\n        case SET_MODAL_TYPE: {\r\n            return {\r\n                ...state,\r\n                currentModalType: action.value,\r\n            }\r\n        }\r\n        case ADD_BUN: {\r\n            return {\r\n                ...state,\r\n                bun: action.value, // объект с данными о булке\r\n            }\r\n        }\r\n        case ADD_SAUCE: {\r\n            return {\r\n                ...state,\r\n                draggableIngridients: [\r\n                    ...state.draggableIngridients,\r\n                    action.value,\r\n                ]\r\n            }\r\n        }\r\n        case ADD_MAIN: {\r\n            return {\r\n                ...state,\r\n                draggableIngridients: [\r\n                    ...state.draggableIngridients,\r\n                    action.value,\r\n                ]\r\n            };\r\n        }\r\n        case UPDATE_DRAGGABLE_INGRIDIENTS: {\r\n            return {\r\n                ...state,\r\n                draggableIngridients: action.value // в action.value должен быть корректный массив с объектами ингридиентов. Если мы удаляем из draggableIngridients какой-то ингридиент, то сюда должен прийти массив, из которого объект ингридиента уже удалён\r\n            };\r\n        }\r\n        case RESORT_DRAGGABLE_INGRIDIENTS: {\r\n            const resortedArrOfIngridients = update(state.draggableIngridients, {\r\n                // Что здесь происходит: мы ресортируем массив объектов ингридиентов в конструкторе бургера\r\n                // пакет immutability-helper для этого нуждается в indexOfDraggedIngr и indexOfDroppedIngr - исходных индексах в массиве draggableIngridients\r\n                // Выбранный ингридиент (indexOfDraggedIngr) ставится на индекс другого ингридиента (indexOfDroppedIngr).\r\n                $splice: [\r\n                    [action.indexOfDraggedIngr, 1],\r\n                    [action.indexOfDroppedIngr, 0, state.draggableIngridients[action.indexOfDraggedIngr]],\r\n                ],\r\n            });\r\n            return {\r\n                ...state,\r\n                draggableIngridients: resortedArrOfIngridients,\r\n            }\r\n        }\r\n        case REMOVE_ALL_INGRIDIENTS: {\r\n            return {\r\n                ...state,\r\n                bun: blankDraggableIngr,\r\n                draggableIngridients: []\r\n            }\r\n        }\r\n        case SET_CONSTRUCTOR_LOADER: {\r\n            return {\r\n                ...state,\r\n                constructorLoaderIsVisible: action.value,\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import {\r\n  LOGIN_SUCCESSFUL,\r\n  LOGIN_FAILED,\r\n  LOGOUT_SUCCESSFUL,\r\n  SET_USER_DATA,\r\n  ALLOW_RESET_PASSWORD,\r\n  HAS_RESET_PASSWORD,\r\n} from '../actions/userActions';\r\n\r\nimport { TUserActionsUnion } from '../actions/userActions';\r\n\r\nexport type TUserState = {\r\n  isLoggedIn: boolean,\r\n  userName: string,\r\n  userEmail: string,\r\n  canResetPassword: boolean,\r\n  hasResetPassword: boolean,\r\n  userChecked: boolean;\r\n};\r\n\r\nexport const userInitialState: TUserState = {\r\n  isLoggedIn: false,\r\n  userName: '',\r\n  userEmail: '',\r\n  canResetPassword: false,\r\n  hasResetPassword: false,\r\n  userChecked: false,\r\n};\r\n\r\nexport const userReducer = (state = userInitialState, action: TUserActionsUnion): TUserState => {\r\n  switch (action.type) {\r\n    case LOGIN_SUCCESSFUL: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        userName: action.name,\r\n        userEmail: action.email,\r\n        userChecked: true, // можно не делать, т.к. даже после диспатча LOGIN_SUCCESSFUL все защищённые роуты будут перепроверяться через getUser, который диспатчит SET_USER_DATA\r\n      }\r\n    }\r\n    // дублирует LOGIN_SUCCESSFUL для удобства чтения экшенов\r\n    // используется при успешном автозалогинивании\r\n    case SET_USER_DATA: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        userName: action.name,\r\n        userEmail: action.email,\r\n        userChecked: true,\r\n      }\r\n    }\r\n    case LOGIN_FAILED: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        userName: '',\r\n        userEmail: '',\r\n        userChecked: true,\r\n      }\r\n    }\r\n    case LOGOUT_SUCCESSFUL: {\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        userName: '',\r\n        userEmail: '',\r\n        userChecked: true,\r\n      }\r\n    }\r\n    case ALLOW_RESET_PASSWORD: {\r\n      return {\r\n        ...state,\r\n        canResetPassword: true,\r\n        hasResetPassword: false,\r\n        userChecked: true,\r\n      }\r\n    }\r\n    case HAS_RESET_PASSWORD: {\r\n      return {\r\n        ...state,\r\n        userChecked: true,\r\n        canResetPassword: false,\r\n        hasResetPassword: true,\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};","import {\r\n  WS_CONNECTED_SUCCESSFULLY, // соединение успешно открылось\r\n  WS_ERROR, // возникла ошибка\r\n  WS_GOT_ORDERS, // когда пришли данные о заказах\r\n  WS_DISCONNECTED, // ws статус переменился на CLOSED\r\n  SET_DETAILED_ORDER_IN_MODAL, // устанавливает данные заказа для отображения в модальном окне\r\n  TwsActionsUnion // \r\n} from '../actions/wsActions';\r\nimport { TOrder } from '../../utils/types';\r\n\r\nexport type TOrdersStoreData = {\r\n  success: null | boolean,\r\n  orders: ReadonlyArray<TOrder>,\r\n  total: number,\r\n  totalToday: number,\r\n}\r\n\r\nexport type TwsState = {\r\n  wsConnected: boolean,\r\n  wsError: boolean,\r\n  ordersData: TOrdersStoreData,\r\n  detailedOrder: TOrder,\r\n}\r\n\r\n\r\nexport const wsInitialState: TwsState = {\r\n  wsConnected: false,\r\n  wsError: false,\r\n  ordersData: {\r\n    success: null,\r\n    orders: [],\r\n    total: 0,\r\n    totalToday: 0,\r\n  },\r\n  detailedOrder: {\r\n    ingredients: [],\r\n    _id: '',\r\n    status: 'pending',\r\n    number: 0,\r\n    createdAt: '',\r\n    updatedAt: '',\r\n    name: '',\r\n  },\r\n};\r\n\r\nexport const wsReducer = (state = wsInitialState, action: TwsActionsUnion): TwsState => {\r\n  switch (action.type) {\r\n    case WS_CONNECTED_SUCCESSFULLY:\r\n      return {\r\n        ...state,\r\n        wsConnected: true,\r\n        wsError: false, // если добавить на страницу кнопку переподключения, пригодится\r\n      };\r\n    case WS_GOT_ORDERS:\r\n      return {\r\n        ...state,\r\n        ordersData: action.ordersData,\r\n      };\r\n    case WS_DISCONNECTED:\r\n      return {\r\n        ...state,\r\n        wsConnected: false,\r\n      };\r\n    case WS_ERROR:\r\n      return {\r\n        ...state,\r\n        wsConnected: false,\r\n        wsError: true,\r\n      }\r\n    case SET_DETAILED_ORDER_IN_MODAL:\r\n      return {\r\n        ...state,\r\n        detailedOrder: action.orderData,\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport { burgerVendorReducer } from './burgerVendor';\r\nimport { userReducer } from './user';\r\nimport { wsReducer } from './wsReducer';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    burgerVendor: burgerVendorReducer,\r\n    user: userReducer,\r\n    ws: wsReducer,\r\n  });","import { socketMiddleware } from './middleware';\r\nimport { wsActions, TwsActionsUnion } from './actions/wsActions';\r\nimport { TBurgerVendorActionsUnion } from './actions/burgerVendor';\r\nimport { TUserActionsUnion } from './actions/userActions';\r\n\r\nimport { rootReducer } from './reducers';\r\nimport { createStore, compose, applyMiddleware, Action, ActionCreator } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const wsCreatedMiddleware = socketMiddleware(wsActions);\r\nexport type TApplicationActionsUnion = TBurgerVendorActionsUnion | TUserActionsUnion | TwsActionsUnion; //нужен для типизации AppThunk\r\n\r\n\r\n// ************** Подключение Redux Devtools ******************\r\n// ********************************************************\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n    : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(thunk, wsCreatedMiddleware));\r\n\r\n\r\n\r\n// ************** Создание объекта хранилища ******************\r\n// ********************************************************\r\n\r\n// это - сам объект хранилища, \"глобальный\", на чистом редаксе\r\nexport const store = createStore(rootReducer, enhancer); // вот при такой записи плагин Redux DevTools работает\r\n\r\n// если так записать, то не работает Redux DevTools:\r\n// const store = createStore(rootReducer, applyMiddleware(thunk));  \r\n\r\n\r\n\r\n// ************** Типизация Redux ******************\r\n// *********************************************\r\n\r\n// типизация redux-хранилища  \r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n// Типизация метода dispatch для проверки на валидность отправляемого экшена\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\n\r\n// Типизация thunk'ов:\r\n// \"thunk — это функция которая возвращает другую функцию, в замыкании которой есть метод dispatch и которая может вернуть (а может и не вернуть) какой-то результат 🤯\" (с)\r\nexport type AppThunk<ReturnType = void> = ActionCreator<ThunkAction<ReturnType, Action, RootState, TApplicationActionsUnion>>; // это, конечно, совершенно чудовищная конструкция\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\n//import reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { store } from './services/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// это стандартное что-то из CRA, пока оставлю тут\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"auth-form_wrap__3RVAe\",\"form\":\"auth-form_form__rX39Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ingridiensContainer\":\"burger-ingredients_ingridiensContainer__3BQrh\",\"tabs\":\"burger-ingredients_tabs__1l8_J\",\"ingrDisplay\":\"burger-ingredients_ingrDisplay__1icPp\",\"ingrShowcase\":\"burger-ingredients_ingrShowcase__2NIYC\",\"ingrList\":\"burger-ingredients_ingrList__6P8Qc\",\"zaglushka\":\"burger-ingredients_zaglushka__2SUDu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"feed-card_main__2ST8h\",\"plane\":\"feed-card_plane__1mDgz\",\"number\":\"feed-card_number__lJRyI\",\"header\":\"feed-card_header__M8EXj\",\"price\":\"feed-card_price__32Lqy\",\"iconsContainer\":\"feed-card_iconsContainer__3AZZ8\",\"imgContainer\":\"feed-card_imgContainer__BfOuM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"burger-constructor_container__103lO\",\"chosenIngridients\":\"burger-constructor_chosenIngridients__1gAGd\",\"topIngridinet\":\"burger-constructor_topIngridinet__957Y3\",\"bottomIngridinet\":\"burger-constructor_bottomIngridinet__Ab3_v\",\"draggableIngridinetContainer\":\"burger-constructor_draggableIngridinetContainer__2t25h\",\"draggableItime\":\"burger-constructor_draggableItime__19vpI\",\"draggableButton\":\"burger-constructor_draggableButton__1z_cB\",\"totalBar\":\"burger-constructor_totalBar__22PBG\",\"loader\":\"burger-constructor_loader__21tyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"profile_wrap__3CJnb\",\"profileInfo\":\"profile_profileInfo__U7vrM\",\"buttonWrap\":\"profile_buttonWrap__3iOLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ingrCard\":\"ingridient-card_ingrCard__2GnK_\",\"price\":\"ingridient-card_price__2JkM8\",\"itemPic\":\"ingridient-card_itemPic__1LVUZ\",\"counter\":\"ingridient-card_counter__24YZf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"modal_modal__hc1-g\",\"closeButton\":\"modal_closeButton__1nd5o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerSection\":\"burger-vendor_headerSection__1BgLE\",\"constructorContainer\":\"burger-vendor_constructorContainer__GiZwe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"draggableItime\":\"draggable-item_draggableItime__3bG_l\",\"draggableButton\":\"draggable-item_draggableButton__3ro-k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tab\":\"profile-tab_tab__2JNML\",\"tab_type_current\":\"profile-tab_tab_type_current__33H-l\"};"],"sourceRoot":""}